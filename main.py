#!/usr/bin/env python3
"""
Telegram Analytics Bot - –®–∞–≥ 4: –§–ò–ù–ê–õ - –ü–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º
"""
import os
import http.server
import socketserver
import logging
import threading
import asyncio
import time
import schedule

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class HealthHandler(http.server.BaseHTTPRequestHandler):
    def do_GET(self):
        logger.info(f"HTTP –∑–∞–ø—Ä–æ—Å: {self.path}")
        
        if self.path in ['/health', '/']:
            self.send_response(200)
            self.send_header('Content-Type', 'text/plain')
            self.end_headers()
            self.wfile.write(b'OK')
            logger.info("Health check —É—Å–ø–µ—à–Ω–æ")
        else:
            self.send_response(404)
            self.end_headers()
    
    def log_message(self, format, *args):
        logger.info(f"HTTP: {format % args}")

def start_health_server():
    """–ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è Railway health checks"""
    PORT = int(os.environ.get('PORT', 8000))
    logger.info(f"–ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
    
    def run_server():
        with socketserver.TCPServer(("", PORT), HealthHandler) as httpd:
            logger.info(f"HTTP —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –Ω–∞ 0.0.0.0:{PORT}")
            httpd.serve_forever()
    
    server_thread = threading.Thread(target=run_server, daemon=True)
    server_thread.start()
    return server_thread

async def send_scheduled_reports(app, db, reports, report_type):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
    try:
        logger.info(f"–ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É {report_type} –æ—Ç—á–µ—Ç–æ–≤...")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        subscribers = await db.get_subscribers(report_type)
        if not subscribers:
            logger.info(f"–ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è {report_type} –æ—Ç—á–µ—Ç–æ–≤")
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        if report_type == 'daily':
            report = await reports.generate_daily_report()
        elif report_type == 'weekly':
            report = await reports.generate_weekly_report()
        else:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ—Ç—á–µ—Ç–∞: {report_type}")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
        sent_count = 0
        for user_id in subscribers:
            try:
                await app.bot.send_message(
                    chat_id=user_id,
                    text=f"üìä <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π {report_type} –æ—Ç—á–µ—Ç</b>\n\n{report}",
                    parse_mode='HTML'
                )
                sent_count += 1
                logger.info(f"–û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                await asyncio.sleep(1)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        logger.info(f"‚úÖ {report_type} –æ—Ç—á–µ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {sent_count} –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {report_type} –æ—Ç—á–µ—Ç–æ–≤: {e}")

async def start_telegram_bot():
    """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    try:
        from telegram.ext import Application, CommandHandler
        from telegram import Update
        from telegram.ext import ContextTypes
        from config import Config
        from database import Database
        from reports import ReportGenerator
        
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = Config()
        if not config.bot_token:
            logger.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
            logger.info("–†–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ –∫–∞–∫ HTTP —Å–µ—Ä–≤–µ—Ä")
            while True:
                await asyncio.sleep(60)
            return
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db = None
        reports = None
        scheduler_running = False
        try:
            logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
            logger.info(f"DATABASE_URL –¥–æ—Å—Ç—É–ø–µ–Ω: {bool(config.database_url)}")
            
            db = Database(config.database_url)
            await db.init_db()
            reports = ReportGenerator(db)
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
            logger.warning(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            logger.info("–ü—Ä–æ–¥–æ–ª–∂–∞—é –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞
        app = Application.builder().token(config.bot_token).build()
        
        # –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
        async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            user_id = update.effective_user.id
            username = update.effective_user.username or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
            if db:
                try:
                    await db.save_user(user_id, username)
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} ({user_id}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î")
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            
            welcome_text = f"""
üöÄ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Telegram Analytics Bot!**

–ü—Ä–∏–≤–µ—Ç, {username}! 

üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É –ø–æ–º–æ—â—å
/status - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
/ping - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏
/users - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–µ—Å–ª–∏ –ë–î —Ä–∞–±–æ—Ç–∞–µ—Ç)
/daily - –¥–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç
/weekly - –Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
/demo - –¥–µ–º–æ –æ—Ç—á–µ—Ç —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
/subscribe daily|weekly - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã
/unsubscribe daily|weekly - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –æ—Ç—á–µ—Ç–æ–≤

üîß –°—Ç–∞—Ç—É—Å: **–ü–û–õ–ù–´–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ** (–®–∞–≥ 4/4)
‚úÖ HTTP —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç
‚úÖ Telegram –±–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω
{'‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞' if db else '‚ö†Ô∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}
{'‚úÖ –û—Ç—á–µ—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã' if reports else '‚ö†Ô∏è  –û—Ç—á–µ—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã'}
{'‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω' if scheduler_running else '‚è≥ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è'}
            """
            
            await update.message.reply_text(welcome_text, parse_mode='Markdown')
            logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} ({username})")

        async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            await start_command(update, context)

        async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ë–î
            db_status = "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∞" if db else "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
            reports_status = "‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã" if reports else "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
            scheduler_status = "‚úÖ –ó–∞–ø—É—â–µ–Ω" if scheduler_running else "‚ùå –ù–µ –∑–∞–ø—É—â–µ–Ω"
            users_count = 0
            
            if db:
                try:
                    users_count = await db.get_users_count()
                    db_status = f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∞ ({users_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)"
                except:
                    db_status = "‚ö†Ô∏è  –ü–æ–¥–∫–ª—é—á–µ–Ω–∞, –Ω–æ –µ—Å—Ç—å –æ—à–∏–±–∫–∏"
            
            status_text = f"""
ü§ñ **–°—Ç–∞—Ç—É—Å Telegram Analytics Bot**

‚úÖ HTTP —Å–µ—Ä–≤–µ—Ä: –†–∞–±–æ—Ç–∞–µ—Ç
‚úÖ Telegram API: –ü–æ–¥–∫–ª—é—á–µ–Ω  
‚úÖ Railway –¥–µ–ø–ª–æ–π: –ê–∫—Ç–∏–≤–µ–Ω
{db_status.split()[0]} –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_status}
{reports_status.split()[0]} –û—Ç—á–µ—Ç—ã: {reports_status}
{scheduler_status.split()[0]} –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: {scheduler_status}

üèóÔ∏è **–¢–µ–∫—É—â–∞—è —Å—Ç–∞–¥–∏—è**: –ü–û–õ–ù–´–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ (4/4) ‚úÖ
üìä **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ**: {users_count}
            """
            await update.message.reply_text(status_text, parse_mode='Markdown')

        async def ping_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            await update.message.reply_text("üèì Pong! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!")

        async def users_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            if not db:
                await update.message.reply_text("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                return
            
            try:
                count = await db.get_users_count()
                users_list = await db.get_recent_users(limit=10)
                
                text = f"üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ —Å–∏—Å—Ç–µ–º–µ**: {count}\n\n"
                text += "üÜï **–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**\n"
                
                for user in users_list:
                    text += f"‚Ä¢ {user['username'] or '–ë–µ–∑ –∏–º–µ–Ω–∏'} (ID: {user['user_id']})\n"
                
                await update.message.reply_text(text, parse_mode='Markdown')
            except Exception as e:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

        async def daily_report_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            if not reports:
                await update.message.reply_text("‚ùå –°–∏—Å—Ç–µ–º–∞ –æ—Ç—á–µ—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                return
            
            try:
                await update.message.reply_text("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –¥–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç...")
                report = await reports.generate_daily_report()
                await update.message.reply_text(report, parse_mode='HTML')
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")

        async def weekly_report_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            if not reports:
                await update.message.reply_text("‚ùå –°–∏—Å—Ç–µ–º–∞ –æ—Ç—á–µ—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                return
            
            try:
                await update.message.reply_text("üìà –ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç...")
                report = await reports.generate_weekly_report()
                await update.message.reply_text(report, parse_mode='HTML')
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")

        async def demo_report_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            """–î–µ–º–æ –æ—Ç—á–µ—Ç —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
            demo_report = """
üìä <b>–î–ï–ú–û –û–¢–ß–ï–¢ - –î–Ω–µ–≤–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞</b>

üìÖ <b>–î–∞—Ç–∞:</b> 20 –∏—é–ª—è 2025
üïê <b>–ü–µ—Ä–∏–æ–¥:</b> –ü–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞

üìà <b>–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:</b>
üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: 1,247 (+15%)
üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: 89 (+8%)
üìã –ù–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: 5
üîó –ü–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: 23

üèÜ <b>–¢–û–ü –ê–ö–¢–ò–í–ù–û–°–¢–ò:</b>
ü•á @user1 - 47 —Å–æ–æ–±—â–µ–Ω–∏–π
ü•à @user2 - 32 —Å–æ–æ–±—â–µ–Ω–∏—è  
ü•â @user3 - 28 —Å–æ–æ–±—â–µ–Ω–∏–π

‚è∞ <b>–ê–ö–¢–ò–í–ù–û–°–¢–¨ –ü–û –ß–ê–°–ê–ú:</b>
üåÖ 06:00-12:00: 287 —Å–æ–æ–±—â–µ–Ω–∏–π
üåû 12:00-18:00: 456 —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–∏–∫)
üåô 18:00-00:00: 398 —Å–æ–æ–±—â–µ–Ω–∏–π
üåÉ 00:00-06:00: 106 —Å–æ–æ–±—â–µ–Ω–∏–π

üìä <b>–¢–ò–ü–´ –ö–û–ù–¢–ï–ù–¢–ê:</b>
üí¨ –¢–µ–∫—Å—Ç: 89% (1,110 —Å–æ–æ–±—â–µ–Ω–∏–π)
üñº –ú–µ–¥–∏–∞: 8% (97 —Å–æ–æ–±—â–µ–Ω–∏–π)
üìé –§–∞–π–ª—ã: 3% (40 —Å–æ–æ–±—â–µ–Ω–∏–π)

‚ú® <i>–≠—Ç–æ –¥–µ–º–æ –≤–µ—Ä—Å–∏—è. –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≥—Ä—É–ø–ø.</i>
            """
            await update.message.reply_text(demo_report, parse_mode='HTML')

        async def subscribe_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            if not db:
                await update.message.reply_text("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                return
            
            if not context.args:
                await update.message.reply_text("""
üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:**

/subscribe daily - –¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã (–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 09:00)
/subscribe weekly - –Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã (–ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º –≤ 09:00)

–ü—Ä–∏–º–µ—Ä: `/subscribe daily`
                """, parse_mode='Markdown')
                return
            
            report_type = context.args[0].lower()
            if report_type not in ['daily', 'weekly']:
                await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã: daily, weekly")
                return
            
            user_id = update.effective_user.id
            try:
                await db.subscribe_user(user_id, report_type)
                await update.message.reply_text(f"‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ {report_type} –æ—Ç—á–µ—Ç—ã!")
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ {report_type}")
            except Exception as e:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")

        async def unsubscribe_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            if not db:
                await update.message.reply_text("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                return
            
            if not context.args:
                await update.message.reply_text("""
üìã **–û—Ç–ø–∏—Å–∫–∞ –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:**

/unsubscribe daily - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤  
/unsubscribe weekly - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤

–ü—Ä–∏–º–µ—Ä: `/unsubscribe daily`
                """, parse_mode='Markdown')
                return
            
            report_type = context.args[0].lower()
            if report_type not in ['daily', 'weekly']:
                await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã: daily, weekly")
                return
            
            user_id = update.effective_user.id
            try:
                await db.unsubscribe_user(user_id, report_type)
                await update.message.reply_text(f"‚úÖ –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç {report_type} –æ—Ç—á–µ—Ç–æ–≤!")
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç {report_type}")
            except Exception as e:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏: {e}")

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        app.add_handler(CommandHandler("start", start_command))
        app.add_handler(CommandHandler("help", help_command))
        app.add_handler(CommandHandler("status", status_command))
        app.add_handler(CommandHandler("ping", ping_command))
        app.add_handler(CommandHandler("users", users_command))
        app.add_handler(CommandHandler("daily", daily_report_command))
        app.add_handler(CommandHandler("weekly", weekly_report_command))
        app.add_handler(CommandHandler("demo", demo_report_command))
        app.add_handler(CommandHandler("subscribe", subscribe_command))
        app.add_handler(CommandHandler("unsubscribe", unsubscribe_command))
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        await app.initialize()
        await app.start()
        await app.updater.start_polling()
        
        logger.info("‚úÖ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        if db and reports:
            try:
                # –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤
                def send_daily_reports():
                    asyncio.create_task(send_scheduled_reports(app, db, reports, 'daily'))
                
                def send_weekly_reports():
                    asyncio.create_task(send_scheduled_reports(app, db, reports, 'weekly'))
                
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
                schedule.every().day.at("09:00").do(send_daily_reports)
                schedule.every().monday.at("09:00").do(send_weekly_reports)
                
                # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                def run_scheduler():
                    nonlocal scheduler_running
                    scheduler_running = True
                    logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω - –æ—Ç—á–µ—Ç—ã –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
                    logger.info("üìÖ –î–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 09:00")
                    logger.info("üìÖ –ù–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã: –∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 09:00")
                    
                    while True:
                        schedule.run_pending()
                        time.sleep(60)
                
                scheduler_thread = threading.Thread(target=run_scheduler, daemon=True)
                scheduler_thread.start()
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
        else:
            logger.warning("‚ö†Ô∏è  –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∑–∞–ø—É—â–µ–Ω (–Ω–µ—Ç –ë–î –∏–ª–∏ —Å–∏—Å—Ç–µ–º—ã –æ—Ç—á–µ—Ç–æ–≤)")
        
        # –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
        while True:
            await asyncio.sleep(60)
            
    except ImportError as e:
        logger.warning(f"Telegram –±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–Ω–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π): {e}")
        logger.info("–†–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ –∫–∞–∫ HTTP —Å–µ—Ä–≤–µ—Ä")
        while True:
            await asyncio.sleep(60)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        logger.info("–ü—Ä–æ–¥–æ–ª–∂–∞—é —Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ HTTP —Å–µ—Ä–≤–µ—Ä")
        while True:
            await asyncio.sleep(60)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("=== üöÄ –ó–∞–ø—É—Å–∫ Telegram Analytics Bot (–®–∞–≥ 4/4) ===")
    logger.info("üéØ –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø - –ü–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≥–æ—Ç–æ–≤!")
    
    # 1. HTTP —Å–µ—Ä–≤–µ—Ä –ü–ï–†–í–´–ú (–∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è Railway)
    start_health_server()
    logger.info("‚úÖ HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
    
    # –ü–∞—É–∑–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    await asyncio.sleep(2)
    
    # 2. Telegram –±–æ—Ç
    await start_telegram_bot()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.info("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é HTTP —Å–µ—Ä–≤–µ—Ä...")
