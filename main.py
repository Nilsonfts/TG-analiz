#!/usr/bin/env python3
"""
Telegram Analytics Bot - –®–∞–≥ 2: –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã + HTTP —Å–µ—Ä–≤–µ—Ä + –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
"""
import os
import http.server
import socketserver
import logging
import threading
import asyncio
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class HealthHandler(http.server.BaseHTTPRequestHandler):
    def do_GET(self):
        logger.info(f"HTTP –∑–∞–ø—Ä–æ—Å: {self.path}")
        
        if self.path in ['/health', '/']:
            self.send_response(200)
            self.send_header('Content-Type', 'text/plain')
            self.end_headers()
            self.wfile.write(b'OK')
            logger.info("Health check —É—Å–ø–µ—à–Ω–æ")
        else:
            self.send_response(404)
            self.end_headers()
    
    def log_message(self, format, *args):
        logger.info(f"HTTP: {format % args}")

def start_health_server():
    """–ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è Railway health checks"""
    PORT = int(os.environ.get('PORT', 8000))
    logger.info(f"–ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
    
    def run_server():
        with socketserver.TCPServer(("", PORT), HealthHandler) as httpd:
            logger.info(f"HTTP —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –Ω–∞ 0.0.0.0:{PORT}")
            httpd.serve_forever()
    
    server_thread = threading.Thread(target=run_server, daemon=True)
    server_thread.start()
    return server_thread

async def start_telegram_bot():
    """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    try:
        from telegram.ext import Application, CommandHandler
        from telegram import Update
        from telegram.ext import ContextTypes
        from config import Config
        from database import Database
        
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = Config()
        if not config.bot_token:
            logger.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
            logger.info("–†–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ –∫–∞–∫ HTTP —Å–µ—Ä–≤–µ—Ä")
            while True:
                await asyncio.sleep(60)
            return
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db = None
        try:
            logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
            db = Database(config.database_url)
            await db.init_db()
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
            logger.info("–ü—Ä–æ–¥–æ–ª–∂–∞—é –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞
        app = Application.builder().token(config.bot_token).build()
        
        # –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
        async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            user_id = update.effective_user.id
            username = update.effective_user.username or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
            if db:
                try:
                    await db.save_user(user_id, username)
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} ({user_id}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î")
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            
            welcome_text = f"""
üöÄ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Telegram Analytics Bot!**

–ü—Ä–∏–≤–µ—Ç, {username}! 

üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É –ø–æ–º–æ—â—å
/status - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
/ping - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏
/users - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–µ—Å–ª–∏ –ë–î —Ä–∞–±–æ—Ç–∞–µ—Ç)

üîß –°—Ç–∞—Ç—É—Å: **–° –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö** (–®–∞–≥ 2/4)
‚úÖ HTTP —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç
‚úÖ Telegram –±–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω
{'‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞' if db else '‚ö†Ô∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}
‚è≥ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ - —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
‚è≥ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ - –≤ –ø–ª–∞–Ω–∞—Ö
            """
            
            await update.message.reply_text(welcome_text, parse_mode='Markdown')
            logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} ({username})")

        async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            await start_command(update, context)

        async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ë–î
            db_status = "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∞" if db else "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
            users_count = 0
            
            if db:
                try:
                    users_count = await db.get_users_count()
                    db_status = f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∞ ({users_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)"
                except:
                    db_status = "‚ö†Ô∏è  –ü–æ–¥–∫–ª—é—á–µ–Ω–∞, –Ω–æ –µ—Å—Ç—å –æ—à–∏–±–∫–∏"
            
            status_text = f"""
ü§ñ **–°—Ç–∞—Ç—É—Å Telegram Analytics Bot**

‚úÖ HTTP —Å–µ—Ä–≤–µ—Ä: –†–∞–±–æ—Ç–∞–µ—Ç
‚úÖ Telegram API: –ü–æ–¥–∫–ª—é—á–µ–Ω  
‚úÖ Railway –¥–µ–ø–ª–æ–π: –ê–∫—Ç–∏–≤–µ–Ω
{db_status.split()[0]} –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_status}
‚è≥ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞: –ù–µ –∞–∫—Ç–∏–≤–Ω–∞
‚è≥ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: –ù–µ –∑–∞–ø—É—â–µ–Ω

üèóÔ∏è **–¢–µ–∫—É—â–∞—è —Å—Ç–∞–¥–∏—è**: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (2/4)
üìä **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ**: {users_count}
            """
            await update.message.reply_text(status_text, parse_mode='Markdown')

        async def ping_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            await update.message.reply_text("üèì Pong! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!")

        async def users_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            if not db:
                await update.message.reply_text("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                return
            
            try:
                count = await db.get_users_count()
                users_list = await db.get_recent_users(limit=10)
                
                text = f"üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ —Å–∏—Å—Ç–µ–º–µ**: {count}\n\n"
                text += "üÜï **–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**\n"
                
                for user in users_list:
                    text += f"‚Ä¢ {user['username'] or '–ë–µ–∑ –∏–º–µ–Ω–∏'} (ID: {user['user_id']})\n"
                
                await update.message.reply_text(text, parse_mode='Markdown')
            except Exception as e:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        app.add_handler(CommandHandler("start", start_command))
        app.add_handler(CommandHandler("help", help_command))
        app.add_handler(CommandHandler("status", status_command))
        app.add_handler(CommandHandler("ping", ping_command))
        app.add_handler(CommandHandler("users", users_command))
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        await app.initialize()
        await app.start()
        await app.updater.start_polling()
        
        logger.info("‚úÖ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
        # –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
        while True:
            await asyncio.sleep(60)
            
    except ImportError as e:
        logger.warning(f"Telegram –±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–Ω–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π): {e}")
        logger.info("–†–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ –∫–∞–∫ HTTP —Å–µ—Ä–≤–µ—Ä")
        while True:
            await asyncio.sleep(60)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        logger.info("–ü—Ä–æ–¥–æ–ª–∂–∞—é —Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ HTTP —Å–µ—Ä–≤–µ—Ä")
        while True:
            await asyncio.sleep(60)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("=== üöÄ –ó–∞–ø—É—Å–∫ Telegram Analytics Bot (–®–∞–≥ 2/4) ===")
    
    # 1. HTTP —Å–µ—Ä–≤–µ—Ä –ü–ï–†–í–´–ú (–∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è Railway)
    start_health_server()
    logger.info("‚úÖ HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
    
    # –ü–∞—É–∑–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    await asyncio.sleep(2)
    
    # 2. Telegram –±–æ—Ç
    await start_telegram_bot()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.info("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é HTTP —Å–µ—Ä–≤–µ—Ä...")
