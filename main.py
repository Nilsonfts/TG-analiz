#!/usr/bin/env python3
"""
Railway Telegram Bot with HTTP healthcheck
"""
import os
import asyncio
import logging
import threading
from http.server import HTTPServer, BaseHTTPRequestHandler
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = os.getenv('BOT_TOKEN')

# HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è healthcheck
class HealthHandler(BaseHTTPRequestHandler):
    def log_message(self, format, *args):
        pass  # –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ HTTP —Å–µ—Ä–≤–µ—Ä–∞
    
    def do_GET(self):
        self.send_response(200)
        self.send_header('Content-Type', 'application/json')
        self.end_headers()
        self.wfile.write(b'{"status": "ok", "bot": "running"}')

def start_http_server():
    """–ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è healthcheck"""
    port = int(os.environ.get('PORT', 8000))
    server = HTTPServer(('0.0.0.0', port), HealthHandler)
    logger.info(f"HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    server.serve_forever()

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    await update.message.reply_text(
        "üöÄ <b>Telegram Channel Analytics Bot</b>\n\n"
        "‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Railway!\n"
        "üìä –ì–æ—Ç–æ–≤ –∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ –∫–∞–Ω–∞–ª–æ–≤\n\n"
        "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /summary - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–∞\n"
        "‚Ä¢ /growth - –†–æ—Å—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n"
        "‚Ä¢ /charts - –ì—Ä–∞—Ñ–∏–∫–∏\n"
        "‚Ä¢ /help - –ü–æ–º–æ—â—å\n\n"
        "üîß <i>–î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω—ã –∫–∞–Ω–∞–ª–æ–≤</i>",
        parse_mode='HTML'
    )

async def summary_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /summary"""
    await update.message.reply_text(
        "üìä <b>–°–≤–æ–¥–∫–∞ –ø–æ –∫–∞–Ω–∞–ª—É</b>\n\n"
        "üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: 15,247 (+127 –∑–∞ –¥–µ–Ω—å)\n"
        "üìà –†–æ—Å—Ç: +0.8% –∑–∞ –Ω–µ–¥–µ–ª—é\n"
        "‚ö° –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: 45,230 (—Å—Ä–µ–¥–Ω–∏–µ)\n"
        "üéØ –û—Ö–≤–∞—Ç: 78.5% –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n"
        "üîÑ –í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å: 12.3%\n\n"
        "üí° <i>–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ. Railway –¥–µ–ø–ª–æ–π —Ä–∞–±–æ—Ç–∞–µ—Ç!</i>",
        parse_mode='HTML'
    )

async def growth_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /growth"""
    await update.message.reply_text(
        "üìà <b>–†–æ—Å—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ (7 –¥–Ω–µ–π)</b>\n\n"
        "üìÖ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        "‚Ä¢ –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫: +45 üë•\n"
        "‚Ä¢ –í—Ç–æ—Ä–Ω–∏–∫: +38 üìä\n"
        "‚Ä¢ –°—Ä–µ–¥–∞: +52 üöÄ\n"
        "‚Ä¢ –ß–µ—Ç–≤–µ—Ä–≥: +41 üìà\n"
        "‚Ä¢ –ü—è—Ç–Ω–∏—Ü–∞: +67 üéâ\n"
        "‚Ä¢ –°—É–±–±–æ—Ç–∞: +34 üì±\n"
        "‚Ä¢ –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ: +28 ‚≠ê\n\n"
        "üìä <b>–ò—Ç–æ–≥–æ:</b> +305 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n"
        "üèÜ <b>–õ—É—á—à–∏–π –¥–µ–Ω—å:</b> –ü—è—Ç–Ω–∏—Ü–∞ (+67)\n"
        "üìç <b>–°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏—Ä–æ—Å—Ç:</b> +44/–¥–µ–Ω—å",
        parse_mode='HTML'
    )

async def charts_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /charts"""
    keyboard = [
        [InlineKeyboardButton("üìà –†–æ—Å—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤", callback_data="chart_growth")],
        [InlineKeyboardButton("‚è∞ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º", callback_data="chart_activity")],
        [InlineKeyboardButton("üéØ –ò—Å—Ç–æ—á–Ω–∏–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞", callback_data="chart_traffic")],
        [InlineKeyboardButton("üìä –ü–æ–ª–Ω—ã–π –¥–∞—à–±–æ—Ä–¥", callback_data="chart_dashboard")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üìä <b>–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏:",
        reply_markup=reply_markup,
        parse_mode='HTML'
    )

async def handle_chart_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    chart_type = query.data.replace("chart_", "")
    
    messages = {
        "growth": "üìà <b>–ì—Ä–∞—Ñ–∏–∫ —Ä–æ—Å—Ç–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤</b>\n\nüéØ –¢—Ä–µ–Ω–¥: –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π\nüìä 30-–¥–Ω–µ–≤–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ –≥–æ—Ç–æ–≤–∞",
        "activity": "‚è∞ <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º</b>\n\nüïê –ü–∏–∫: 12:00, 18:00, 21:00\nüì± –ê–Ω–∞–ª–∏–∑ 7 –¥–Ω–µ–π",
        "traffic": "üéØ <b>–ò—Å—Ç–æ—á–Ω–∏–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞</b>\n\nüîó URL: 45%\nüîç –ü–æ–∏—Å–∫: 30%\nüë• –î—Ä—É–≥–∏–µ –∫–∞–Ω–∞–ª—ã: 25%",
        "dashboard": "üéõ <b>–ü–æ–ª–Ω—ã–π –¥–∞—à–±–æ—Ä–¥</b>\n\nüìä –í—Å–µ –º–µ—Ç—Ä–∏–∫–∏ —Å–æ–±—Ä–∞–Ω—ã\n‚úÖ –ì–æ—Ç–æ–≤ –∫ –∞–Ω–∞–ª–∏–∑—É"
    }
    
    await query.edit_message_text(
        f"{messages.get(chart_type, 'üìä –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫...')}\n\n"
        "üöÄ <i>Railway –¥–µ–ø–ª–æ–π —É—Å–ø–µ—à–µ–Ω! –ì—Ä–∞—Ñ–∏–∫–∏ –±—É–¥—É—Ç –≥–æ—Ç–æ–≤—ã –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–∞–Ω–∞–ª–∞–º.</i>",
        parse_mode='HTML'
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    await update.message.reply_text(
        "‚ùì <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>\n\n"
        "üöÄ <b>–°—Ç–∞—Ç—É—Å:</b> Railway –¥–µ–ø–ª–æ–π –∞–∫—Ç–∏–≤–µ–Ω\n\n"
        "üìä <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "‚Ä¢ /start - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n"
        "‚Ä¢ /summary - –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "‚Ä¢ /growth - –ê–Ω–∞–ª–∏–∑ —Ä–æ—Å—Ç–∞\n"
        "‚Ä¢ /charts - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏\n"
        "‚Ä¢ /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "üîß <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞:</b>\n"
        "1. ‚úÖ Railway –¥–µ–ø–ª–æ–π —Ä–∞–±–æ—Ç–∞–µ—Ç\n"
        "2. üîÑ –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è\n"
        "3. üìä –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏\n\n"
        "üí° <b>–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:</b> GitHub > SETUP.md",
        parse_mode='HTML'
    )

async def unknown_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
    await update.message.reply_text(
        "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.\n\n"
        "üìã –í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.\n"
        "üöÄ Railway –¥–µ–ø–ª–æ–π —Ä–∞–±–æ—Ç–∞–µ—Ç!"
    )

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if not BOT_TOKEN:
        logger.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        logger.info("üí° –î–æ–±–∞–≤—å—Ç–µ BOT_TOKEN –≤ Railway Variables")
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ HTTP —Å–µ—Ä–≤–µ—Ä
        start_http_server()
        return
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram Bot –Ω–∞ Railway...")
    logger.info(f"ü§ñ –¢–æ–∫–µ–Ω: {BOT_TOKEN[:10]}...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    http_thread = threading.Thread(target=start_http_server, daemon=True)
    http_thread.start()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram –±–æ—Ç–∞
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("summary", summary_command))
    application.add_handler(CommandHandler("growth", growth_command))
    application.add_handler(CommandHandler("charts", charts_command))
    application.add_handler(CommandHandler("help", help_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(handle_chart_callback, pattern="^chart_"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    from telegram.ext import MessageHandler, filters
    application.add_handler(MessageHandler(filters.COMMAND, unknown_command))
    
    logger.info("‚úÖ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ Railway!")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
