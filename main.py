#!/usr/bin/env python3
"""
Telegram Analytics Bot - –ü–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π
"""
import os
import http.server
import socketserver
import logging
import threading
import asyncio
import time
import schedule
import signal
import sys
from datetime import datetime, timedelta

# Telegram Bot API
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters

# –ù–∞—à–∏ –º–æ–¥—É–ª–∏
from visualization import ChartGenerator
from alerts import AlertSystem
from data_export import DataExporter

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è graceful shutdown
app_running = True
telegram_app = None

class HealthHandler(http.server.BaseHTTPRequestHandler):
    def do_GET(self):
        logger.info(f"HTTP –∑–∞–ø—Ä–æ—Å: {self.path}")
        
        if self.path in ['/health', '/']:
            self.send_response(200)
            self.send_header('Content-Type', 'text/plain')
            self.end_headers()
            self.wfile.write(b'OK')
            logger.info("Health check —É—Å–ø–µ—à–Ω–æ")
        else:
            self.send_response(404)
            self.end_headers()
    
    def log_message(self, format, *args):
        logger.info(f"HTTP: {format % args}")

def start_health_server():
    """–ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è Railway health checks"""
    PORT = int(os.environ.get('PORT', 8000))
    logger.info(f"–ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
    
    def run_server():
        with socketserver.TCPServer(("", PORT), HealthHandler) as httpd:
            logger.info(f"HTTP —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –Ω–∞ 0.0.0.0:{PORT}")
            httpd.serve_forever()
    
    server_thread = threading.Thread(target=run_server, daemon=True)
    server_thread.start()
    return server_thread

async def send_scheduled_reports(app, db, reports, report_type):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
    try:
        logger.info(f"–ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É {report_type} –æ—Ç—á–µ—Ç–æ–≤...")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        subscribers = await db.get_subscribers(report_type)
        if not subscribers:
            logger.info(f"–ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è {report_type} –æ—Ç—á–µ—Ç–æ–≤")
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        if report_type == 'daily':
            report = await reports.generate_daily_report()
        elif report_type == 'weekly':
            report = await reports.generate_weekly_report()
        else:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ—Ç—á–µ—Ç–∞: {report_type}")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
        sent_count = 0
        for user_id in subscribers:
            try:
                await app.bot.send_message(
                    chat_id=user_id,
                    text=f"üìä <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π {report_type} –æ—Ç—á–µ—Ç</b>\n\n{report}",
                    parse_mode='HTML'
                )
                sent_count += 1
                logger.info(f"–û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                await asyncio.sleep(1)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        logger.info(f"‚úÖ {report_type} –æ—Ç—á–µ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {sent_count} –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {report_type} –æ—Ç—á–µ—Ç–æ–≤: {e}")

async def start_telegram_bot():
    """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    global telegram_app, app_running
    
    try:
        from config import Config
        from database import Database
        from reports import ReportGenerator
        
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = Config()
        if not config.bot_token:
            logger.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
            logger.info("–†–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ –∫–∞–∫ HTTP —Å–µ—Ä–≤–µ—Ä")
            while app_running:
                await asyncio.sleep(60)
            return

        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ DATABASE_URL
        logger.info("=" * 50)
        logger.info("–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•:")
        logger.info(f"DATABASE_URL –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {bool(config.database_url)}")
        if config.database_url:
            logger.info(f"DATABASE_URL (–ø–µ—Ä–≤—ã–µ 50 —Å–∏–º–≤–æ–ª–æ–≤): {config.database_url[:50]}...")
            logger.info(f"DATABASE_URL (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–∏–º–≤–æ–ª–æ–≤): ...{config.database_url[-20:]}")
        else:
            logger.error("DATABASE_URL –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")
        logger.info("=" * 50)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db = None
        reports = None
        scheduler_running = False
        try:
            logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
            logger.info(f"DATABASE_URL –¥–æ—Å—Ç—É–ø–µ–Ω: {bool(config.database_url)}")
            if config.database_url:
                logger.info(f"DATABASE_URL –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å: {config.database_url[:20]}...")
            else:
                logger.error("DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
                logger.error("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Railway:")
                logger.error("- DATABASE_PUBLIC_URL")
                logger.error("- DATABASE_URL") 
            
            logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ Database...")
            db = Database(config.database_url)
            logger.info("–û–±—ä–µ–∫—Ç Database —Å–æ–∑–¥–∞–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é...")
            
            await db.init_db()
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
            # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á–µ—Ç–æ–≤ –µ—Å–ª–∏ –ë–î —Ä–∞–±–æ—Ç–∞–µ—Ç
            try:
                reports = ReportGenerator(db)
                logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Ç—á–µ—Ç–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            except Exception as reports_error:
                logger.warning(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤: {reports_error}")
                
        except Exception as e:
            logger.error("‚ùå" * 20)
            logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•: {e}")
            logger.error(f"‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            logger.error(f"‚ùå –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏: {str(e)}")
            if hasattr(e, '__traceback__'):
                import traceback
                logger.error(f"‚ùå –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞:\n{traceback.format_exc()}")
            logger.error("‚ùå" * 20)
            logger.info("–ü—Ä–æ–¥–æ–ª–∂–∞—é –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞
        app = Application.builder().token(config.bot_token).build()
        telegram_app = app  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
        
        # –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
        async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            user_id = update.effective_user.id
            username = update.effective_user.username or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
            if db:
                try:
                    await db.save_user(user_id, username)
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} ({user_id}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î")
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            
            welcome_text = f"""
üöÄ **Telegram Analytics Bot —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏!**

–ü—Ä–∏–≤–µ—Ç, {username}! 

üìä **–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ /charts - üìà –≥—Ä–∞—Ñ–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ 
‚Ä¢ /trend - üìä –¥–∏–Ω–∞–º–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü
‚Ä¢ /dashboard - üéØ —Å–≤–æ–¥–Ω–∞—è –ø–∞–Ω–µ–ª—å

**üìã –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ /help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –≤—Å–µ–º –∫–æ–º–∞–Ω–¥–∞–º
‚Ä¢ /status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ /daily - –¥–Ω–µ–≤–Ω–æ–π –æ—Ç—á—ë—Ç
‚Ä¢ /weekly - –Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç

**üîî –ü–æ–¥–ø–∏—Å–∫–∏:**
‚Ä¢ /subscribe daily - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á—ë—Ç—ã
‚Ä¢ /subscribe weekly - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á—ë—Ç—ã

üé® **–°—Ç–∞—Ç—É—Å: –ì–†–ê–§–ò–ö–ò –ò –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø**
‚úÖ HTTP —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç
‚úÖ Telegram –±–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω
{'‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞' if db else '‚ö†Ô∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}
{'‚úÖ –û—Ç—á–µ—Ç—ã –∏ –≥—Ä–∞—Ñ–∏–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã' if reports else '‚ö†Ô∏è  –û—Ç—á–µ—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã'}
{'‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω' if scheduler_running else '‚è≥ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è'}

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥!
            """
            
            await update.message.reply_text(welcome_text, parse_mode='Markdown')
            logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} ({username})")

        async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            help_text = """
ü§ñ **Telegram Analytics Bot - –°–ø—Ä–∞–≤–∫–∞**

**üìä –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ /status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ /users - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π  
‚Ä¢ /daily - –¥–Ω–µ–≤–Ω–æ–π –æ—Ç—á—ë—Ç
‚Ä¢ /weekly - –Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç
‚Ä¢ /summary - —Å–≤–æ–¥–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á—ë—Ç
‚Ä¢ /demo - –¥–µ–º–æ –æ—Ç—á—ë—Ç

**üìà –ì—Ä–∞—Ñ–∏–∫–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞:**
‚Ä¢ /charts - –≥—Ä–∞—Ñ–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ —á–∞—Å–∞–º –∏ —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
‚Ä¢ /trend - –≥—Ä–∞—Ñ–∏–∫ –¥–∏–Ω–∞–º–∏–∫–∏ –∑–∞ 30 –¥–Ω–µ–π
‚Ä¢ /dashboard - —Å–≤–æ–¥–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –ø–∞–Ω–µ–ª—å
‚Ä¢ /export [messages|users|analytics|full] - —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ CSV

**üîî –ü–æ–¥–ø–∏—Å–∫–∏:**
‚Ä¢ /subscribe [daily|weekly] - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∞–≤—Ç–æ–æ—Ç—á—ë—Ç—ã
‚Ä¢ /unsubscribe [daily|weekly] - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è

**üëë –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ /groupinfo - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ
‚Ä¢ /addgroup [ID] - –¥–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
‚Ä¢ /alerts - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–ª–µ—Ä—Ç—ã —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
‚Ä¢ /debug - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ /testdb - —Ç–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

**‚ÑπÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã:**
üìÖ –î–Ω–µ–≤–Ω—ã–µ –æ—Ç—á—ë—Ç—ã: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 09:00
üìÖ –ù–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á—ë—Ç—ã: –∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 09:00
üö® –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤: –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç

–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞!
            """
            await update.message.reply_text(help_text, parse_mode='Markdown')

        async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ë–î
            db_status = "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∞" if db else "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
            reports_status = "‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã" if reports else "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
            scheduler_status = "‚úÖ –ó–∞–ø—É—â–µ–Ω" if scheduler_running else "‚ùå –ù–µ –∑–∞–ø—É—â–µ–Ω"
            users_count = 0
            
            if db:
                try:
                    users_count = await db.get_users_count()
                    db_status = f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∞ ({users_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)"
                except:
                    db_status = "‚ö†Ô∏è  –ü–æ–¥–∫–ª—é—á–µ–Ω–∞, –Ω–æ –µ—Å—Ç—å –æ—à–∏–±–∫–∏"
            
            status_text = f"""
ü§ñ **–°—Ç–∞—Ç—É—Å Telegram Analytics Bot**

‚úÖ HTTP —Å–µ—Ä–≤–µ—Ä: –†–∞–±–æ—Ç–∞–µ—Ç
‚úÖ Telegram API: –ü–æ–¥–∫–ª—é—á–µ–Ω  
‚úÖ Railway –¥–µ–ø–ª–æ–π: –ê–∫—Ç–∏–≤–µ–Ω
{db_status.split()[0]} –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_status}
{reports_status.split()[0]} –û—Ç—á–µ—Ç—ã: {reports_status}
{scheduler_status.split()[0]} –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: {scheduler_status}

üèóÔ∏è **–¢–µ–∫—É—â–∞—è —Å—Ç–∞–¥–∏—è**: –ü–û–õ–ù–´–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ (4/4) ‚úÖ
üìä **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ**: {users_count}
            """
            await update.message.reply_text(status_text, parse_mode='Markdown')

        async def ping_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            await update.message.reply_text("üèì Pong! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!")

        async def users_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            if not db:
                await update.message.reply_text("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                return
            
            try:
                count = await db.get_users_count()
                users_list = await db.get_recent_users(limit=10)
                
                text = f"üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ —Å–∏—Å—Ç–µ–º–µ**: {count}\n\n"
                text += "üÜï **–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**\n"
                
                for user in users_list:
                    text += f"‚Ä¢ {user['username'] or '–ë–µ–∑ –∏–º–µ–Ω–∏'} (ID: {user['user_id']})\n"
                
                await update.message.reply_text(text, parse_mode='Markdown')
            except Exception as e:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

        async def daily_report_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            if not reports:
                await update.message.reply_text("‚ùå –°–∏—Å—Ç–µ–º–∞ –æ—Ç—á–µ—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                return
            
            try:
                await update.message.reply_text("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –¥–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç...")
                report = await reports.generate_daily_report()
                await update.message.reply_text(report, parse_mode='HTML')
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")

        async def weekly_report_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            if not reports:
                await update.message.reply_text("‚ùå –°–∏—Å—Ç–µ–º–∞ –æ—Ç—á–µ—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                return
            
            try:
                await update.message.reply_text("üìà –ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç...")
                report = await reports.generate_weekly_report()
                await update.message.reply_text(report, parse_mode='HTML')
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")

        async def demo_report_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            """–î–µ–º–æ –æ—Ç—á–µ—Ç —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
            demo_report = """
üìä <b>–î–ï–ú–û –û–¢–ß–ï–¢ - –î–Ω–µ–≤–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞</b>

üìÖ <b>–î–∞—Ç–∞:</b> 20 –∏—é–ª—è 2025
üïê <b>–ü–µ—Ä–∏–æ–¥:</b> –ü–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞

üìà <b>–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:</b>
üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: 1,247 (+15%)
üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: 89 (+8%)
üìã –ù–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: 5
üîó –ü–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: 23

üèÜ <b>–¢–û–ü –ê–ö–¢–ò–í–ù–û–°–¢–ò:</b>
ü•á @user1 - 47 —Å–æ–æ–±—â–µ–Ω–∏–π
ü•à @user2 - 32 —Å–æ–æ–±—â–µ–Ω–∏—è  
ü•â @user3 - 28 —Å–æ–æ–±—â–µ–Ω–∏–π

‚è∞ <b>–ê–ö–¢–ò–í–ù–û–°–¢–¨ –ü–û –ß–ê–°–ê–ú:</b>
üåÖ 06:00-12:00: 287 —Å–æ–æ–±—â–µ–Ω–∏–π
üåû 12:00-18:00: 456 —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–∏–∫)
üåô 18:00-00:00: 398 —Å–æ–æ–±—â–µ–Ω–∏–π
üåÉ 00:00-06:00: 106 —Å–æ–æ–±—â–µ–Ω–∏–π

üìä <b>–¢–ò–ü–´ –ö–û–ù–¢–ï–ù–¢–ê:</b>
üí¨ –¢–µ–∫—Å—Ç: 89% (1,110 —Å–æ–æ–±—â–µ–Ω–∏–π)
üñº –ú–µ–¥–∏–∞: 8% (97 —Å–æ–æ–±—â–µ–Ω–∏–π)
üìé –§–∞–π–ª—ã: 3% (40 —Å–æ–æ–±—â–µ–Ω–∏–π)

‚ú® <i>–≠—Ç–æ –¥–µ–º–æ –≤–µ—Ä—Å–∏—è. –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≥—Ä—É–ø–ø.</i>
            """
            await update.message.reply_text(demo_report, parse_mode='HTML')

        async def subscribe_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            if not db:
                await update.message.reply_text("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                return
            
            if not context.args:
                await update.message.reply_text("""
üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:**

/subscribe daily - –¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã (–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 09:00)
/subscribe weekly - –Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã (–ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º –≤ 09:00)

–ü—Ä–∏–º–µ—Ä: `/subscribe daily`
                """, parse_mode='Markdown')
                return
            
            report_type = context.args[0].lower()
            if report_type not in ['daily', 'weekly']:
                await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã: daily, weekly")
                return
            
            user_id = update.effective_user.id
            try:
                await db.subscribe_user(user_id, report_type)
                await update.message.reply_text(f"‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ {report_type} –æ—Ç—á–µ—Ç—ã!")
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ {report_type}")
            except Exception as e:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")

        async def unsubscribe_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            if not db:
                await update.message.reply_text("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                return
            
            if not context.args:
                await update.message.reply_text("""
üìã **–û—Ç–ø–∏—Å–∫–∞ –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:**

/unsubscribe daily - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤  
/unsubscribe weekly - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤

–ü—Ä–∏–º–µ—Ä: `/unsubscribe daily`
                """, parse_mode='Markdown')
                return
            
            report_type = context.args[0].lower()
            if report_type not in ['daily', 'weekly']:
                await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã: daily, weekly")
                return
            
            user_id = update.effective_user.id
            try:
                await db.unsubscribe_user(user_id, report_type)
                await update.message.reply_text(f"‚úÖ –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç {report_type} –æ—Ç—á–µ—Ç–æ–≤!")
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç {report_type}")
            except Exception as e:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏: {e}")

        async def groupinfo_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø–µ"""
            chat = update.effective_chat
            user = update.effective_user
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ –≥—Ä—É–ø–ø–µ
            if chat.type not in ['group', 'supergroup']:
                await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
            try:
                chat_member = await context.bot.get_chat_member(chat.id, user.id)
                if chat_member.status not in ['administrator', 'creator']:
                    await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!")
                    return
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            
            group_info = f"""
üèõÔ∏è **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ**

üìã **–ù–∞–∑–≤–∞–Ω–∏–µ:** {chat.title or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}
üÜî **ID –≥—Ä—É–ø–ø—ã:** `{chat.id}`
üë§ **Username:** @{chat.username or '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
üë• **–¢–∏–ø:** {chat.type}

üìä **–î–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã:**
1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ ID –≥—Ä—É–ø–ø—ã: `{chat.id}`
2. –î–æ–±–∞–≤—å—Ç–µ –≥—Ä—É–ø–ø—É –≤ —Å–∏—Å—Ç–µ–º—É –∫–æ–º–∞–Ω–¥–æ–π `/addgroup {chat.id}`

‚öôÔ∏è **–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:**
{'‚úÖ –ì—Ä—É–ø–ø–∞ —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è' if db else '‚ö†Ô∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - —Å–Ω–∞—á–∞–ª–∞ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î'}
            """
            
            await update.message.reply_text(group_info, parse_mode='Markdown')
            logger.info(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ {chat.id} –∑–∞–ø—Ä–æ—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.id}")

        async def addgroup_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –≤ —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
            if not db or not db.pool:
                await update.message.reply_text("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL.")
                logger.error("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –¥–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É")
                return
            
            user_id = update.effective_user.id
            
            # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /addgroup –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –±–æ—Ç–∞: {config.admin_users}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±–æ—Ç–∞
            if user_id not in config.admin_users:
                await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –±–æ—Ç–∞ –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –≥—Ä—É–ø–ø—ã!")
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
                return
            
            if not context.args:
                await update.message.reply_text("""
üìã **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:**

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/addgroup <ID_–≥—Ä—É–ø–ø—ã>`

1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
2. –í –≥—Ä—É–ø–ø–µ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É `/groupinfo` 
3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ ID –≥—Ä—É–ø–ø—ã
4. –í—ã–ø–æ–ª–Ω–∏—Ç–µ `/addgroup <ID_–≥—Ä—É–ø–ø—ã>`

–ü—Ä–∏–º–µ—Ä: `/addgroup -1001234567890`
                """, parse_mode='Markdown')
                return
            
            try:
                group_id = int(context.args[0])
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
                try:
                    chat = await context.bot.get_chat(group_id)
                    members_count = await context.bot.get_chat_member_count(group_id)
                    
                    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –≥—Ä—É–ø–ø—ã
                    from database import TelegramGroup
                    group = TelegramGroup(
                        group_id=group_id,
                        username=chat.username,
                        title=chat.title,
                        description=chat.description,
                        members_count=members_count,
                        is_active=True
                    )
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    await db.add_group(group)
                    
                    await update.message.reply_text(f"""
‚úÖ **–ì—Ä—É–ø–ø–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞!**

üìã **–ù–∞–∑–≤–∞–Ω–∏–µ:** {chat.title}
üÜî **ID:** `{group_id}`
üë• **–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** {members_count}

üöÄ **–ß—Ç–æ –¥–∞–ª—å—à–µ:**
- –ë–æ—Ç –±—É–¥–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –≥—Ä—É–ø–ø–µ
- –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã
                    """, parse_mode='Markdown')
                    
                    logger.info(f"–ì—Ä—É–ø–ø–∞ {group_id} ({chat.title}) –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {user_id}")
                    
                except Exception as e:
                    await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ: {e}")
                    
            except ValueError:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –≥—Ä—É–ø–ø—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.")
            except Exception as e:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã: {e}")

        async def debug_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º"""
            user_id = update.effective_user.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if user_id not in config.admin_users:
                await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!")
                return
            
            debug_info = f"""
üîç **–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è**

**–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:**
‚Ä¢ BOT_TOKEN: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if config.bot_token else '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}
‚Ä¢ DATABASE_URL: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if config.database_url else '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}
‚Ä¢ ADMIN_USERS: {config.admin_users}

**–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:**
‚Ä¢ –û–±—ä–µ–∫—Ç db: {'‚úÖ –°–æ–∑–¥–∞–Ω' if db else '‚ùå –ù–µ —Å–æ–∑–¥–∞–Ω'}
‚Ä¢ –ü—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if db and db.pool else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}

**–°–∏—Å—Ç–µ–º—ã:**
‚Ä¢ –û—Ç—á–µ—Ç—ã: {'‚úÖ –†–∞–±–æ—Ç–∞—é—Ç' if reports else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã'}
‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: {'‚úÖ –ó–∞–ø—É—â–µ–Ω' if scheduler_running else '‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}

**–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–ø–µ—Ä–≤—ã–µ —Å–∏–º–≤–æ–ª—ã):**
‚Ä¢ DATABASE_URL: {config.database_url[:30] + '...' if config.database_url else '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
            """
            
            await update.message.reply_text(debug_info, parse_mode='Markdown')

        async def testdb_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
            user_id = update.effective_user.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if user_id not in config.admin_users:
                await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ë–î
            import os
            db_vars = {}
            possible_vars = [
                'DATABASE_URL', 'DATABASE_PUBLIC_URL', 'POSTGRES_URL', 'POSTGRES_PUBLIC_URL',
                'DB_URL', 'DB_PUBLIC_URL', 'RAILWAY_DATABASE_URL', 'PGUSER', 'PGHOST', 
                'PGPORT', 'PGDATABASE', 'POSTGRES_PASSWORD', 'RAILWAY_TCP_PROXY_DOMAIN',
                'RAILWAY_TCP_PROXY_PORT', 'RAILWAY_PRIVATE_DOMAIN'
            ]
            
            for var in possible_vars:
                value = os.getenv(var)
                if value:
                    # –ú–∞—Å–∫–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                    if 'postgresql://' in value and ':' in value:
                        masked = value.split('://')[0] + '://***:***@' + value.split('@')[1] if '@' in value else value[:30] + '...'
                    else:
                        masked = value[:30] + '...' if len(value) > 30 else value
                    db_vars[var] = masked
            
            test_info = f"""üîß –¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:
{chr(10).join([f'‚Ä¢ {k}: {v}' for k, v in db_vars.items()]) if db_vars else '‚Ä¢ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}

–¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: {config.database_url[:30] + '...' if config.database_url else '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
‚Ä¢ –°–æ–¥–µ—Ä–∂–∏—Ç localhost: {'–î–∞' if config.database_url and ('localhost' in config.database_url or '127.0.0.1' in config.database_url) else '–ù–µ—Ç'}

–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–±—Ä–∞—Ç—å –≤–Ω–µ—à–Ω–∏–π URL:"""

            # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–±—Ä–∞—Ç—å –≤–Ω–µ—à–Ω–∏–π URL –∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            pguser = os.getenv('PGUSER')
            pgpass = os.getenv('POSTGRES_PASSWORD') 
            pghost = os.getenv('RAILWAY_TCP_PROXY_DOMAIN')
            pgport = os.getenv('RAILWAY_TCP_PROXY_PORT')
            pgdb = os.getenv('PGDATABASE')
            
            if all([pguser, pgpass, pghost, pgport, pgdb]):
                manual_url = f"postgresql://{pguser}:{pgpass}@{pghost}:{pgport}/{pgdb}"
                test_info += f"""
‚Ä¢ MANUAL_URL: {manual_url[:50]}...
‚Ä¢ –°–æ–¥–µ—Ä–∂–∏—Ç localhost: {'–î–∞' if 'localhost' in manual_url else '–ù–µ—Ç'}

–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:
{'–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–π URL –≤—ã—à–µ' if 'localhost' not in manual_url else '–î–æ–±–∞–≤—å—Ç–µ DATABASE_PUBLIC_URL —Å –≤–Ω–µ—à–Ω–∏–º –∞–¥—Ä–µ—Å–æ–º PostgreSQL'}
"""
            else:
                test_info += f"""

–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —Å–±–æ—Ä–∫–∏ URL:
‚Ä¢ PGUSER: {'‚úÖ' if pguser else '‚ùå'}
‚Ä¢ POSTGRES_PASSWORD: {'‚úÖ' if pgpass else '‚ùå'}
‚Ä¢ RAILWAY_TCP_PROXY_DOMAIN: {'‚úÖ' if pghost else '‚ùå'}
‚Ä¢ RAILWAY_TCP_PROXY_PORT: {'‚úÖ' if pgport else '‚ùå'}  
‚Ä¢ PGDATABASE: {'‚úÖ' if pgdb else '‚ùå'}

–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:
–î–æ–±–∞–≤—å—Ç–µ DATABASE_PUBLIC_URL —Å –≤–Ω–µ—à–Ω–∏–º –∞–¥—Ä–µ—Å–æ–º PostgreSQL
"""
            
            await update.message.reply_text(test_info)

        # === –ù–û–í–´–ï –ö–û–ú–ê–ù–î–´ –° –ì–†–ê–§–ò–ö–ê–ú–ò ===
        
        async def charts_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
            user_id = update.effective_user.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if user_id not in config.admin_users:
                await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!")
                return
            
            if not db:
                await update.message.reply_text("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                return
            
            await update.message.reply_text("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≥—Ä–∞—Ñ–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...")
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä—É–ø–ø—ã
                groups = await db.get_active_groups()
                if not groups:
                    await update.message.reply_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                    return
                
                group = groups[0]  # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—É—é –≥—Ä—É–ø–ø—É
                chart_gen = ChartGenerator()
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
                hourly_data = await db.get_hourly_activity(group.group_id, days=7)
                top_users_data = await db.get_daily_stats(group.group_id, datetime.now())
                
                # –°–æ–∑–¥–∞—ë–º –≥—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ —á–∞—Å–∞–º
                if hourly_data:
                    chart_buf = chart_gen.create_activity_chart(
                        hourly_data, 
                        f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –≥—Ä—É–ø–ø–µ '{group.title}' (7 –¥–Ω–µ–π)"
                    )
                    
                    if chart_buf:
                        await update.message.reply_photo(
                            photo=chart_buf,
                            caption=f"üìä –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ —á–∞—Å–∞–º\nüè∑Ô∏è –ì—Ä—É–ø–ø–∞: {group.title}\nüìÖ –ü–µ—Ä–∏–æ–¥: 7 –¥–Ω–µ–π"
                        )
                
                # –°–æ–∑–¥–∞—ë–º –≥—Ä–∞—Ñ–∏–∫ —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                if top_users_data and top_users_data['top_users']:
                    chart_buf = chart_gen.create_top_users_chart(
                        top_users_data['top_users'],
                        f"–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≥—Ä—É–ø–ø—ã '{group.title}'"
                    )
                    
                    if chart_buf:
                        await update.message.reply_photo(
                            photo=chart_buf,
                            caption=f"üèÜ –¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\nüè∑Ô∏è –ì—Ä—É–ø–ø–∞: {group.title}"
                        )
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤: {e}")
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤: {e}")

        async def trend_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –¥–∏–Ω–∞–º–∏–∫–∏"""
            user_id = update.effective_user.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if user_id not in config.admin_users:
                await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!")
                return
            
            if not db:
                await update.message.reply_text("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                return
            
            await update.message.reply_text("üìà –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≥—Ä–∞—Ñ–∏–∫ –¥–∏–Ω–∞–º–∏–∫–∏...")
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä—É–ø–ø—ã
                groups = await db.get_active_groups()
                if not groups:
                    await update.message.reply_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                    return
                
                group = groups[0]  # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—É—é –≥—Ä—É–ø–ø—É
                chart_gen = ChartGenerator()
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–∏–Ω–∞–º–∏–∫–∏ –∑–∞ 30 –¥–Ω–µ–π
                daily_trend = await db.get_daily_trend(group.group_id, days=30)
                
                if daily_trend and len(daily_trend) > 1:
                    chart_buf = chart_gen.create_daily_trend_chart(
                        daily_trend,
                        f"–î–∏–Ω–∞–º–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –≥—Ä—É–ø–ø–µ '{group.title}'"
                    )
                    
                    if chart_buf:
                        await update.message.reply_photo(
                            photo=chart_buf,
                            caption=f"üìà –î–∏–Ω–∞–º–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ 30 –¥–Ω–µ–π\nüè∑Ô∏è –ì—Ä—É–ø–ø–∞: {group.title}\nüìä –î–∞–Ω–Ω—ã—Ö: {len(daily_trend)} –¥–Ω–µ–π"
                        )
                else:
                    await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –¥–∏–Ω–∞–º–∏–∫–∏ (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –¥–Ω—è)")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–∏–Ω–∞–º–∏–∫–∏: {e}")
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")

        async def dashboard_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–Ω–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞"""
            user_id = update.effective_user.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if user_id not in config.admin_users:
                await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!")
                return
            
            if not db:
                await update.message.reply_text("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                return
            
            await update.message.reply_text("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å–≤–æ–¥–Ω—ã–π –¥–∞—à–±–æ—Ä–¥...")
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä—É–ø–ø—ã
                groups = await db.get_active_groups()
                if not groups:
                    await update.message.reply_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                    return
                
                group = groups[0]  # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—É—é –≥—Ä—É–ø–ø—É
                chart_gen = ChartGenerator()
                
                # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
                summary_stats = await db.get_group_summary_stats(group.group_id)
                hourly_activity = await db.get_hourly_activity(group.group_id, days=7)
                top_users_data = await db.get_daily_stats(group.group_id, datetime.now())
                daily_trend = await db.get_daily_trend(group.group_id, days=14)
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
                dashboard_data = {
                    **summary_stats,
                    'hourly_activity': hourly_activity,
                    'top_users': top_users_data.get('top_users', []) if top_users_data else [],
                    'daily_trend': daily_trend
                }
                
                # –°–æ–∑–¥–∞—ë–º –¥–∞—à–±–æ—Ä–¥
                chart_buf = chart_gen.create_summary_dashboard(
                    dashboard_data,
                    f"üìä –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –ø–∞–Ω–µ–ª—å - {group.title}"
                )
                
                if chart_buf:
                    await update.message.reply_photo(
                        photo=chart_buf,
                        caption=f"üìä –°–≤–æ–¥–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –ø–∞–Ω–µ–ª—å\nüè∑Ô∏è –ì—Ä—É–ø–ø–∞: {group.title}\nüìà –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {dashboard_data.get('total_messages', 0)}\nüë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {dashboard_data.get('total_users', 0)}"
                    )
                else:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞—à–±–æ—Ä–¥–∞: {e}")
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞—à–±–æ—Ä–¥–∞: {e}")

        async def alerts_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤ –≤—Ä—É—á–Ω—É—é"""
            user_id = update.effective_user.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if user_id not in config.admin_users:
                await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!")
                return
            
            if not db:
                await update.message.reply_text("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                return
            
            await update.message.reply_text("üö® –ü—Ä–æ–≤–µ—Ä—è—é –∞–ª–µ—Ä—Ç—ã...")
            
            try:
                alert_system = AlertSystem(db, app.bot)
                alerts = await alert_system.check_all_groups()
                
                if alerts:
                    response = f"üö® **–ù–ê–ô–î–ï–ù–û {len(alerts)} –ê–õ–ï–†–¢–û–í:**\n\n"
                    for i, alert in enumerate(alerts, 1):
                        response += f"{i}. **{alert.alert_type.upper()}**\n"
                        response += f"   –ì—Ä—É–ø–ø–∞: {alert.group_name}\n"
                        response += f"   {alert.message}\n\n"
                        if len(response) > 3500:  # Telegram limit
                            await update.message.reply_text(response, parse_mode='Markdown')
                            response = "**–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–æ–≤:**\n\n"
                    
                    if len(response.strip()) > len("**–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–æ–≤:**"):
                        await update.message.reply_text(response, parse_mode='Markdown')
                else:
                    await update.message.reply_text("‚úÖ –ê–ª–µ—Ä—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - –≤—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ!")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤: {e}")
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤: {e}")

        async def export_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –≤ CSV"""
            user_id = update.effective_user.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if user_id not in config.admin_users:
                await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!")
                return
            
            if not db:
                await update.message.reply_text("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä (—Ç–∏–ø —ç–∫—Å–ø–æ—Ä—Ç–∞)
            args = context.args
            export_type = args[0] if args else "full"
            
            await update.message.reply_text("üì• –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ...")
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä—É–ø–ø—ã
                groups = await db.get_active_groups()
                if not groups:
                    await update.message.reply_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
                    return
                
                group = groups[0]  # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—É—é –≥—Ä—É–ø–ø—É
                exporter = DataExporter(db)
                
                if export_type == "messages":
                    # –≠–∫—Å–ø–æ—Ä—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
                    csv_buffer = await exporter.export_messages_csv(group.group_id, 30)
                    if csv_buffer:
                        filename = f"{exporter.sanitize_filename(group.title)}_messages.csv"
                        await update.message.reply_document(
                            document=csv_buffer,
                            filename=filename,
                            caption=f"üìÑ –≠–∫—Å–ø–æ—Ä—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ 30 –¥–Ω–µ–π\nüè∑Ô∏è –ì—Ä—É–ø–ø–∞: {group.title}"
                        )
                    else:
                        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π")
                
                elif export_type == "users":
                    # –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    csv_buffer = await exporter.export_users_csv(group.group_id)
                    if csv_buffer:
                        filename = f"{exporter.sanitize_filename(group.title)}_users.csv"
                        await update.message.reply_document(
                            document=csv_buffer,
                            filename=filename,
                            caption=f"üë• –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\nüè∑Ô∏è –ì—Ä—É–ø–ø–∞: {group.title}"
                        )
                    else:
                        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                
                elif export_type == "analytics":
                    # –≠–∫—Å–ø–æ—Ä—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
                    csv_buffer = await exporter.export_analytics_csv(group.group_id, 30)
                    if csv_buffer:
                        filename = f"{exporter.sanitize_filename(group.title)}_analytics.csv"
                        await update.message.reply_document(
                            document=csv_buffer,
                            filename=filename,
                            caption=f"üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–Ω–µ–≤–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∑–∞ 30 –¥–Ω–µ–π\nüè∑Ô∏è –ì—Ä—É–ø–ø–∞: {group.title}"
                        )
                    else:
                        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
                
                else:  # export_type == "full" –∏–ª–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π
                    # –ü–æ–ª–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç
                    export_package = await exporter.create_full_export_package(
                        group.group_id, 
                        exporter.sanitize_filename(group.title)
                    )
                    
                    if export_package:
                        await update.message.reply_text(f"üì¶ –û—Ç–ø—Ä–∞–≤–ª—è—é {len(export_package)} —Ñ–∞–π–ª–æ–≤...")
                        
                        for filename, file_buffer in export_package.items():
                            try:
                                await update.message.reply_document(
                                    document=file_buffer,
                                    filename=filename,
                                    caption=f"üìÅ {filename}\nüè∑Ô∏è –ì—Ä—É–ø–ø–∞: {group.title}"
                                )
                            except Exception as file_error:
                                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ {filename}: {file_error}")
                        
                        await update.message.reply_text("‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!")
                    else:
                        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")

        async def summary_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞"""
            user_id = update.effective_user.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if user_id not in config.admin_users:
                await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!")
                return
            
            if not db:
                await update.message.reply_text("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                return
            
            await update.message.reply_text("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á—ë—Ç...")
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä—É–ø–ø—ã
                groups = await db.get_active_groups()
                if not groups:
                    await update.message.reply_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                    return
                
                group = groups[0]  # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—É—é –≥—Ä—É–ø–ø—É
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                summary_stats = await db.get_group_summary_stats(group.group_id)
                hourly_data = await db.get_hourly_activity(group.group_id, 7)
                daily_stats = await db.get_daily_stats(group.group_id, datetime.now())
                
                # –ê–Ω–∞–ª–∏–∑ –ø–∏–∫–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                if hourly_data:
                    peak_hours = sorted(hourly_data.items(), key=lambda x: x[1], reverse=True)[:3]
                    peak_hours_text = ", ".join([f"{h}:00 ({c} —Å–æ–æ–±—â–µ–Ω–∏–π)" for h, c in peak_hours])
                else:
                    peak_hours_text = "–î–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ"
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
                report = f"""
üìä **–°–í–û–î–ù–´–ô –û–¢–ß–Å–¢ –ì–†–£–ü–ü–´**

üè∑Ô∏è **–ì—Ä—É–ø–ø–∞:** {summary_stats.get('group_name', 'Unknown')}
üë• **–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** {summary_stats.get('members_count', 0):,}

üìà **–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:**
‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {summary_stats.get('total_messages', 0):,}
‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {summary_stats.get('total_users', 0):,}
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤ –¥–µ–Ω—å: {summary_stats.get('avg_daily', 0):.1f} —Å–æ–æ–±—â–µ–Ω–∏–π

üèÜ **–ê–ö–¢–ò–í–ù–û–°–¢–¨:**
‚Ä¢ –°–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π: {summary_stats.get('top_user', 'N/A')}
‚Ä¢ –í–æ–≤–ª–µ—á—ë–Ω–Ω–æ—Å—Ç—å: {(summary_stats.get('total_users', 0) / max(summary_stats.get('members_count', 1), 1) * 100):.1f}%

‚è∞ **–ü–ò–ö–û–í–´–ï –ß–ê–°–´:** 
{peak_hours_text}

üìÖ **–°–ï–ì–û–î–ù–Ø:**
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: {daily_stats.get('messages_count', 0)}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {daily_stats.get('users_count', 0)}

üí° **–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:**
"""
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
                avg_daily = summary_stats.get('avg_daily', 0)
                if avg_daily < 10:
                    report += "‚Ä¢ üî• –°—Ç–∏–º—É–ª–∏—Ä—É–π—Ç–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è - –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∏–∑–∫–∞—è\n"
                elif avg_daily > 100:
                    report += "‚Ä¢ üìä –û—Ç–ª–∏—á–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å! –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —Ç–µ–º–ø\n"
                
                engagement = summary_stats.get('total_users', 0) / max(summary_stats.get('members_count', 1), 1) * 100
                if engagement < 10:
                    report += "‚Ä¢ üë• –ù–∏–∑–∫–∞—è –≤–æ–≤–ª–µ—á—ë–Ω–Ω–æ—Å—Ç—å - –ø—Ä–∏–≤–ª–µ–∫–∞–π—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
                elif engagement > 30:
                    report += "‚Ä¢ üéØ –í—ã—Å–æ–∫–∞—è –≤–æ–≤–ª–µ—á—ë–Ω–Ω–æ—Å—Ç—å - –æ—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!\n"
                
                report += f"\nüìä **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:**\n‚Ä¢ /charts - –≥—Ä–∞—Ñ–∏–∫–∏\n‚Ä¢ /export - —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö\n‚Ä¢ /alerts - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤"
                
                await update.message.reply_text(report, parse_mode='Markdown')
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞: {e}")
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞: {e}")

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        app.add_handler(CommandHandler("start", start_command))
        app.add_handler(CommandHandler("help", help_command))
        app.add_handler(CommandHandler("status", status_command))
        app.add_handler(CommandHandler("ping", ping_command))
        app.add_handler(CommandHandler("users", users_command))
        app.add_handler(CommandHandler("daily", daily_report_command))
        app.add_handler(CommandHandler("weekly", weekly_report_command))
        app.add_handler(CommandHandler("demo", demo_report_command))
        app.add_handler(CommandHandler("subscribe", subscribe_command))
        app.add_handler(CommandHandler("unsubscribe", unsubscribe_command))
        app.add_handler(CommandHandler("groupinfo", groupinfo_command))
        app.add_handler(CommandHandler("addgroup", addgroup_command))
        app.add_handler(CommandHandler("debug", debug_command))
        app.add_handler(CommandHandler("testdb", testdb_command))
        
        # –ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
        app.add_handler(CommandHandler("charts", charts_command))
        app.add_handler(CommandHandler("trend", trend_command))
        app.add_handler(CommandHandler("dashboard", dashboard_command))
        app.add_handler(CommandHandler("alerts", alerts_command))
        app.add_handler(CommandHandler("export", export_command))
        app.add_handler(CommandHandler("summary", summary_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–∞—Ö
        async def handle_group_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–∞—Ö –¥–ª—è —Å–±–æ—Ä–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
            if not update.message or not update.effective_chat:
                return
                
            chat = update.effective_chat
            message = update.message
            
            # –¢–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø –∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø
            if chat.type not in ['group', 'supergroup']:
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥—Ä—É–ø–ø–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è
            if not db:
                return
                
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥—Ä—É–ø–ø–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                groups = await db.get_active_groups()
                group_ids = [g.group_id for g in groups]
                
                if chat.id not in group_ids:
                    return  # –ì—Ä—É–ø–ø–∞ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è
                
                # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                message_data = {
                    'message_id': message.message_id,
                    'group_id': chat.id,
                    'user_id': message.from_user.id if message.from_user else None,
                    'username': message.from_user.username if message.from_user else None,
                    'text': message.text or '',
                    'date': message.date,
                    'reply_to_message_id': message.reply_to_message.message_id if message.reply_to_message else None,
                    'forward_from_user_id': message.forward_from.id if message.forward_from else None,
                    'views': 0,  # –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
                    'reactions': '{}'  # JSON –¥–ª—è —Ä–µ–∞–∫—Ü–∏–π
                }
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                await db.save_messages([message_data])
                logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message.message_id} –∏–∑ –≥—Ä—É–ø–ø—ã {chat.id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø—ã {chat.id}: {e}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_group_message))
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        await app.initialize()
        await app.start()
        await app.updater.start_polling()
        
        logger.info("‚úÖ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        if db and reports:
            try:
                # –°–æ–∑–¥–∞—ë–º —Å–∏—Å—Ç–µ–º—É –∞–ª–µ—Ä—Ç–æ–≤
                alert_system = AlertSystem(db, app.bot)
                
                # –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤
                def send_daily_reports():
                    asyncio.create_task(send_scheduled_reports(app, db, reports, 'daily'))
                
                def send_weekly_reports():
                    asyncio.create_task(send_scheduled_reports(app, db, reports, 'weekly'))
                
                # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤
                def check_alerts():
                    asyncio.create_task(alert_system.run_monitoring_cycle(config.admin_users))
                
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
                schedule.every().day.at("09:00").do(send_daily_reports)
                schedule.every().monday.at("09:00").do(send_weekly_reports)
                schedule.every(30).minutes.do(check_alerts)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
                
                # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                def run_scheduler():
                    nonlocal scheduler_running
                    scheduler_running = True
                    logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω - –æ—Ç—á–µ—Ç—ã –∏ –∞–ª–µ—Ä—Ç—ã –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
                    logger.info("üìÖ –î–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 09:00")
                    logger.info("üìÖ –ù–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã: –∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 09:00")
                    logger.info("üö® –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤: –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç")
                    
                    while app_running:
                        schedule.run_pending()
                        time.sleep(60)
                
                scheduler_thread = threading.Thread(target=run_scheduler, daemon=True)
                scheduler_thread.start()
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
        else:
            logger.warning("‚ö†Ô∏è  –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∑–∞–ø—É—â–µ–Ω (–Ω–µ—Ç –ë–î –∏–ª–∏ —Å–∏—Å—Ç–µ–º—ã –æ—Ç—á–µ—Ç–æ–≤)")
        
        # –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
        while app_running:
            await asyncio.sleep(60)
            
    except ImportError as e:
        logger.warning(f"Telegram –±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–Ω–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π): {e}")
        logger.info("–†–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ –∫–∞–∫ HTTP —Å–µ—Ä–≤–µ—Ä")
        while app_running:
            await asyncio.sleep(60)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        logger.info("–ü—Ä–æ–¥–æ–ª–∂–∞—é —Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ HTTP —Å–µ—Ä–≤–µ—Ä")
        while app_running:
            await asyncio.sleep(60)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    global app_running, telegram_app
    
    def signal_handler(signum, frame):
        global app_running, telegram_app
        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –Ω–∞—á–∏–Ω–∞–µ–º graceful shutdown...")
        app_running = False
        if telegram_app:
            try:
                asyncio.create_task(telegram_app.stop())
                logger.info("Telegram bot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ telegram bot: {e}")
        sys.exit(0)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGTERM, signal_handler)
    signal.signal(signal.SIGINT, signal_handler)
    
    logger.info("=== üöÄ –ó–∞–ø—É—Å–∫ Telegram Analytics Bot (–®–∞–≥ 4/4) ===")
    logger.info("üéØ –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø - –ü–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≥–æ—Ç–æ–≤!")
    
    # 1. HTTP —Å–µ—Ä–≤–µ—Ä –ü–ï–†–í–´–ú (–∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è Railway)
    start_health_server()
    logger.info("‚úÖ HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
    
    # –ü–∞—É–∑–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    await asyncio.sleep(2)
    
    # 2. Telegram –±–æ—Ç
    await start_telegram_bot()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.info("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é HTTP —Å–µ—Ä–≤–µ—Ä...")
