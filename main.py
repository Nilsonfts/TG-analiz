#!/usr/bin/env python3
"""
Railway Telegram Bot with HTTP healthcheck and real channel support.

A comprehensive Telegram bot for channel analytics with Railway deployment support.
"""
import asyncio
import json
import logging
import os
import time
import pytz
import threading
from analytics_generator import generate_channel_analytics_image
import threading
from http.server import BaseHTTPRequestHandler, HTTPServer
from typing import Any, Dict, Optional

# Configure logging first
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# Import Telegram libraries with error handling
try:
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
    from telegram.ext import Application, CallbackQueryHandler, CommandHandler, ContextTypes, MessageHandler, filters
    TELEGRAM_AVAILABLE = True
    logger.info("‚úÖ Telegram libraries imported successfully")
except ImportError as e:
    logger.error(f"‚ùå Telegram import error: {e}")
    TELEGRAM_AVAILABLE = False

# Import Telethon for channel analytics
try:
    from telethon import TelegramClient
    from telethon.sessions import StringSession
    TELETHON_AVAILABLE = True
    logger.info("‚úÖ Telethon imported successfully")
except ImportError as e:
    logger.error(f"‚ùå Telethon import error: {e}")
    TELETHON_AVAILABLE = False

# Environment variables
BOT_TOKEN = os.getenv("BOT_TOKEN")
API_ID = os.getenv("API_ID")
API_HASH = os.getenv("API_HASH")
SESSION_STRING = os.getenv("SESSION_STRING")
PHONE_NUMBER = os.getenv("PHONE_NUMBER")
CHANNEL_ID = os.getenv("CHANNEL_ID")
ADMIN_USERS = os.getenv("ADMIN_USERS", "").split(",")
PORT = int(os.getenv("PORT", "8080"))

# Global Telethon client
telethon_client: Optional[TelegramClient] = None


async def get_channel_stats_via_bot_api() -> Optional[Dict[str, Any]]:
    """Get channel statistics using Telegram Bot API.
    
    Returns:
        Optional[Dict[str, Any]]: Channel stats or None if unavailable.
    """
    if not BOT_TOKEN or not CHANNEL_ID:
        return None

    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        from telegram import Bot
        bot = Bot(token=BOT_TOKEN)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        chat = await bot.get_chat(chat_id=CHANNEL_ID)
        member_count = await bot.get_chat_member_count(chat_id=CHANNEL_ID)
        
        stats = {
            "title": chat.title,
            "username": chat.username or "Private channel",
            "participants_count": member_count,
            "description": (
                chat.description[:100] + "..." 
                if chat.description 
                else ""
            ),
            "type": chat.type,
        }

        return stats
    except Exception as e:
        logger.error(f"‚ùå Error getting channel stats: {e}")
        return None


async def init_telethon() -> bool:
    """Initialize Telethon client for advanced channel analytics.
    
    Returns:
        bool: True if initialization successful, False otherwise.
    """
    global telethon_client
    
    if not TELETHON_AVAILABLE:
        logger.warning("‚ö†Ô∏è Telethon not available - advanced analytics disabled")
        return False
    
    if not API_ID or not API_HASH:
        logger.warning("‚ö†Ô∏è API_ID or API_HASH not set - Telethon disabled")
        return False
    
    try:
        # Try with SESSION_STRING first
        if SESSION_STRING:
            logger.info("üîê Initializing Telethon with session string...")
            telethon_client = TelegramClient(StringSession(SESSION_STRING), API_ID, API_HASH)
            await telethon_client.start()
            
        # Try with PHONE_NUMBER if no session string
        elif PHONE_NUMBER:
            logger.info("üì± Initializing Telethon with phone number...")
            telethon_client = TelegramClient("railway_session", API_ID, API_HASH)
            await telethon_client.start(phone=PHONE_NUMBER)
            
        else:
            logger.warning("‚ö†Ô∏è No SESSION_STRING or PHONE_NUMBER provided")
            return False
        
        # Test connection
        me = await telethon_client.get_me()
        logger.info(f"‚úÖ Telethon connected as: {me.first_name}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Telethon initialization error: {e}")
        return False


async def get_real_channel_stats() -> Optional[Dict[str, Any]]:
    """Get real channel statistics using Telethon.
    
    Returns:
        Optional[Dict[str, Any]]: Channel stats or None if unavailable.
    """
    if not telethon_client or not CHANNEL_ID:
        return None
    
    try:
        # Get channel entity
        if CHANNEL_ID.startswith('@'):
            channel = await telethon_client.get_entity(CHANNEL_ID)
        else:
            channel = await telethon_client.get_entity(int(CHANNEL_ID))
        
        # Get full channel info with participant count
        try:
            from telethon.tl import functions
            full_channel_req = await telethon_client(functions.channels.GetFullChannelRequest(channel))
            participants_count = full_channel_req.full_chat.participants_count or 0
            about = getattr(full_channel_req.full_chat, 'about', '') or ''
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ: {e}")
            # Fallback –∫ –±–∞–∑–æ–≤–æ–º—É –º–µ—Ç–æ–¥—É
            participants_count = getattr(channel, 'participants_count', 0) or 0
            about = getattr(channel, 'about', '') or ''
        
        stats = {
            "title": getattr(channel, 'title', None) or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª',
            "username": getattr(channel, 'username', None) or 'Private channel',
            "participants_count": participants_count,
            "description": (about[:100] + "..." if len(about) > 100 else about) if about else "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ",
            "type": "Channel",
            "telethon_data": True,
            "channel_id": channel.id,
            "access_hash": getattr(channel, 'access_hash', None)
        }
        
        return stats
        
    except Exception as e:
        logger.error(f"‚ùå Error getting channel stats: {e}")
        return None


async def get_channel_analytics_data(start_date, end_date):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ Telethon –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥."""
    if not telethon_client or not CHANNEL_ID:
        logger.error("‚ùå Telethon client –∏–ª–∏ CHANNEL_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        return None
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        logger.info(f"üìä –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞: {CHANNEL_ID}")
        
        if CHANNEL_ID.startswith('@'):
            channel = await telethon_client.get_entity(CHANNEL_ID)
        else:
            channel = await telethon_client.get_entity(int(CHANNEL_ID))
        
        logger.info(f"‚úÖ –ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω: {getattr(channel, 'title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª')}")
        
        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        joined = 0  # –ë—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å—Å—è –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—é –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        left = 0    # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ
        posts = 0
        stories = 0
        circles = 0
        total_views = 0
        total_reactions = 0  # –í—Å–µ —Ä–µ–∞–∫—Ü–∏–∏
        posts_reactions = 0  # –†–µ–∞–∫—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–æ—Å—Ç—ã
        total_forwards = 0
        story_views = 0
        story_likes = 0  # –†–µ–∞–∫—Ü–∏–∏ –Ω–∞ stories/–≤–∏–¥–µ–æ
        story_forwards = 0  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
        posts_by_hour = {}
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ ER
        try:
            from telethon.tl import functions
            full_channel_req = await telethon_client(functions.channels.GetFullChannelRequest(channel))
            current_subscribers = full_channel_req.full_chat.participants_count or 0
            logger.info(f"üë• –¢–µ–∫—É—â–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏: {current_subscribers}")
            if current_subscribers == 0:
                # Fallback –∫ –±–∞–∑–æ–≤–æ–º—É –º–µ—Ç–æ–¥—É
                full_channel = await telethon_client.get_entity(channel)
                current_subscribers = getattr(full_channel, 'participants_count', 0) or 1
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {e}")
            try:
                full_channel = await telethon_client.get_entity(channel)
                current_subscribers = getattr(full_channel, 'participants_count', 0) or 1
            except:
                current_subscribers = 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º –∫–∞–Ω–∞–ª–∞
        try:
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
            first_message = None
            async for message in telethon_client.iter_messages(channel, limit=1):
                first_message = message
                break
            
            if not first_message:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞")
                return {
                    'title': getattr(channel, 'title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª'),
                    'error': 'no_access',
                    'current_subscribers': current_subscribers,
                    'participants_count': current_subscribers,
                    'message': '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º –∫–∞–Ω–∞–ª–∞'
                }
            
            logger.info(f"‚úÖ –î–æ—Å—Ç—É–ø –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º –∫–∞–Ω–∞–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º –∫–∞–Ω–∞–ª–∞: {e}")
            return {
                'title': getattr(channel, 'title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª'),
                'error': 'access_denied',
                'current_subscribers': current_subscribers,
                'participants_count': current_subscribers,
                'message': f'–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞: {str(e)}'
            }
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –ø–µ—Ä–∏–æ–¥
        message_count = 0
        logger.info(f"üìÖ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–∏–æ–¥: {start_date.strftime('%d.%m.%Y %H:%M')} - {end_date.strftime('%d.%m.%Y %H:%M')}")
        
        async for message in telethon_client.iter_messages(channel, offset_date=end_date):
            if message.date < start_date:
                break
            
            message_count += 1
            
            # –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –ö–û–ù–¢–ï–ù–¢–ê (20-–ª–µ—Ç–Ω–∏–π –æ–ø—ã—Ç)
            is_video_story = False
            is_circle = False
            is_image_story = False
            
            # –í Telegram –∫–∞–Ω–∞–ª–∞—Ö "Stories" = –∫–æ—Ä–æ—Ç–∫–∏–µ –≤–∏–¥–µ–æ –∏ —Ñ–æ—Ç–æ –ø–æ—Å—Ç—ã
            if hasattr(message, 'media') and message.media:
                media_type = type(message.media).__name__
                
                # –í–∏–¥–µ–æ-–∫–æ–Ω—Ç–µ–Ω—Ç (—Å—á–∏—Ç–∞–µ–º –∫–∞–∫ "video stories")
                if 'Video' in media_type or 'Document' in media_type:
                    if hasattr(message.media, 'document'):
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞
                        if hasattr(message.media.document, 'attributes'):
                            for attr in message.media.document.attributes:
                                # –ö—Ä—É–∂–∫–∏ (–∫—Ä—É–≥–ª—ã–µ –≤–∏–¥–µ–æ)
                                if hasattr(attr, 'round_message') and attr.round_message:
                                    is_circle = True
                                    circles += 1
                                    break
                                # –í–∏–¥–µ–æ –¥–æ 60 —Å–µ–∫—É–Ω–¥ —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ "video story"
                                elif hasattr(attr, 'duration') and attr.duration and attr.duration <= 60:
                                    is_video_story = True
                                    stories += 1
                                    break
                            else:
                                # –ï—Å–ª–∏ –Ω–µ –∫—Ä—É–∂–æ–∫ –∏ –Ω–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ - –æ–±—ã—á–Ω—ã–π –ø–æ—Å—Ç
                                posts += 1
                        else:
                            posts += 1
                    else:
                        posts += 1
                
                # –§–æ—Ç–æ-–∫–æ–Ω—Ç–µ–Ω—Ç (—Å—á–∏—Ç–∞–µ–º –∫–∞–∫ "image stories" –µ—Å–ª–∏ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞)
                elif 'Photo' in media_type:
                    # –ï—Å–ª–∏ —É —Ñ–æ—Ç–æ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —Ç–µ–∫—Å—Ç –∫–æ—Ä–æ—Ç–∫–∏–π - —ç—Ç–æ "–≤–∏–∑—É–∞–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è"
                    message_text = getattr(message, 'text', '') or ''
                    if len(message_text.strip()) < 50:
                        is_image_story = True
                        stories += 1
                    else:
                        posts += 1
                        
                # –î—Ä—É–≥–∏–µ –º–µ–¥–∏–∞ (—Å—Ç–∏–∫–µ—Ä—ã, –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ —Ç.–¥.)
                else:
                    posts += 1
            else:
                # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–≥–¥–∞ –ø–æ—Å—Ç—ã
                posts += 1
                
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ "story" (–≤–∏–¥–µ–æ –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
            is_story = is_video_story or is_image_story
            
            hour = message.date.hour
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —á–∞—Å–∞–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤)
            if not (is_story or is_circle):
                if hour not in posts_by_hour:
                    posts_by_hour[hour] = {"views": 0, "reactions": 0, "posts": 0}
                posts_by_hour[hour]["posts"] += 1
            
            # –°—á–∏—Ç–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä—ã
            if hasattr(message, 'views') and message.views:
                if is_story:
                    story_views += message.views
                elif not is_circle:
                    total_views += message.views
                    if hour in posts_by_hour:
                        posts_by_hour[hour]["views"] += message.views
            
            # –°—á–∏—Ç–∞–µ–º –ø–µ—Ä–µ—Å—ã–ª–∫–∏
            if hasattr(message, 'forwards') and message.forwards:
                if is_story:
                    story_forwards += message.forwards
                else:
                    total_forwards += message.forwards
            
            # –°—á–∏—Ç–∞–µ–º —Ä–µ–∞–∫—Ü–∏–∏ —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –Ω–∞ –ø–æ—Å—Ç—ã –∏ stories
            if hasattr(message, 'reactions') and message.reactions:
                message_reactions = 0
                for reaction in message.reactions.results:
                    message_reactions += reaction.count
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫ –æ–±—â–µ–º—É —Å—á–µ—Ç—á–∏–∫—É
                total_reactions += message_reactions
                
                if is_story:
                    story_likes += message_reactions  # –†–µ–∞–∫—Ü–∏–∏ –Ω–∞ –≤–∏–¥–µ–æ-–∫–æ–Ω—Ç–µ–Ω—Ç
                else:
                    posts_reactions += message_reactions  # –†–µ–∞–∫—Ü–∏–∏ –Ω–∞ –æ–±—ã—á–Ω—ã–µ –ø–æ—Å—Ç—ã
                    if not is_circle and hour in posts_by_hour:
                        posts_by_hour[hour]["reactions"] += message_reactions
        
        logger.info(f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {message_count}")
        
        # –ü–†–ê–í–ò–õ–¨–ù–´–ï –ú–ê–†–ö–ï–¢–ò–ù–ì–û–í–´–ï –†–ê–°–ß–ï–¢–´
        
        # 1. ER (Engagement Rate) - –ò–°–ü–†–ê–í–õ–ï–ù!
        # ER = –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –Ω–∞ –ø–æ—Å—Ç / –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ √ó 100%
        if current_subscribers > 0 and posts > 0:
            # –û–±—â–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è = —Ä–µ–∞–∫—Ü–∏–∏ + –ø–µ—Ä–µ—Å—ã–ª–∫–∏
            total_engagement = total_reactions + total_forwards
            avg_engagement_per_post = total_engagement / posts
            er = (avg_engagement_per_post / current_subscribers) * 100
            er_formatted = f"{er:.2f}%"
        else:
            er_formatted = "0.00%"
            er = 0.0
        
        # 2. VTR (View Through Rate) 
        if current_subscribers > 0 and posts > 0:
            avg_views_per_post = total_views / posts
            vtr = (avg_views_per_post / current_subscribers) * 100
            vtr_formatted = f"{vtr:.1f}%"
        else:
            vtr_formatted = "0.0%"
            vtr = 0.0
        
        # 3. –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∫–∞–Ω–∞–ª–∞
        if current_subscribers >= 100000:
            temp_score = min(5, (er / 3.0 + vtr / 50.0) * 2.5)
        elif current_subscribers >= 10000:
            temp_score = min(5, (er / 7.0 + vtr / 70.0) * 2.5)
        elif current_subscribers >= 1000:
            temp_score = min(5, (er / 15.0 + vtr / 90.0) * 2.5)
        else:
            temp_score = min(5, (er / 20.0 + vtr / 100.0) * 2.5)
        
        fire_count = int(temp_score)
        temperature = "üî•" * fire_count + "‚¨ú" * (5 - fire_count)
        
        # 4. –†–µ–π—Ç–∏–Ω–≥ ER
        if current_subscribers >= 100000:
            if er >= 3: er_rating = "üî• –û—Ç–ª–∏—á–Ω–æ"
            elif er >= 1.5: er_rating = "‚úÖ –•–æ—Ä–æ—à–æ"
            elif er >= 1: er_rating = "‚ö†Ô∏è –°—Ä–µ–¥–Ω–µ"
            else: er_rating = "‚ùå –ü–ª–æ—Ö–æ"
        elif current_subscribers >= 10000:
            if er >= 7: er_rating = "üî• –û—Ç–ª–∏—á–Ω–æ"
            elif er >= 4: er_rating = "‚úÖ –•–æ—Ä–æ—à–æ"
            elif er >= 2: er_rating = "‚ö†Ô∏è –°—Ä–µ–¥–Ω–µ"
            else: er_rating = "‚ùå –ü–ª–æ—Ö–æ"
        elif current_subscribers >= 1000:
            if er >= 15: er_rating = "üî• –û—Ç–ª–∏—á–Ω–æ"
            elif er >= 10: er_rating = "‚úÖ –•–æ—Ä–æ—à–æ"
            elif er >= 5: er_rating = "‚ö†Ô∏è –°—Ä–µ–¥–Ω–µ"
            else: er_rating = "‚ùå –ü–ª–æ—Ö–æ"
        else:
            if er >= 20: er_rating = "üî• –û—Ç–ª–∏—á–Ω–æ"
            elif er >= 15: er_rating = "‚úÖ –•–æ—Ä–æ—à–æ"
            elif er >= 10: er_rating = "‚ö†Ô∏è –°—Ä–µ–¥–Ω–µ"
            else: er_rating = "‚ùå –ü–ª–æ—Ö–æ"
        
        # 5. –ê–Ω–∞–ª–∏–∑ –ª—É—á—à–∏—Ö —á–∞—Å–æ–≤
        best_hours = []
        if posts_by_hour:
            hour_er = {}
            for hour, stats in posts_by_hour.items():
                if stats["posts"] > 0:
                    avg_reactions = stats["reactions"] / stats["posts"]
                    hour_er_val = (avg_reactions / current_subscribers) * 100
                    hour_er[hour] = hour_er_val
            
            # –¢–æ–ø-3 —á–∞—Å–∞
            sorted_hours = sorted(hour_er.items(), key=lambda x: x[1], reverse=True)[:3]
            best_hours = [(f"{hour:02d}:00-{hour+1:02d}:00", f"{er_val:.1f}%") for hour, er_val in sorted_hours]
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        avg_post_reach = total_views // posts if posts > 0 else 0
        avg_story_reach = story_views // stories if stories > 0 else 0
        avg_story_likes = story_likes // stories if stories > 0 else 0
        
        # –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –î–õ–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê (–æ—Ç–ª–∞–¥–∫–∞)
        logger.info(f"üìä –ê–ù–ê–õ–ò–¢–ò–ö–ê –ù–ê–ô–î–ï–ù–û:")
        logger.info(f"   üìù –ü–æ—Å—Ç–æ–≤: {posts}")
        logger.info(f"   üì∫ –°–¢–û–†–ò–°: {stories} (–≤–∏–¥–µ–æ: {stories - (story_views > 0 and stories > 0)}, —Ñ–æ—Ç–æ: –æ—Å—Ç–∞–ª—å–Ω—ã–µ)")
        logger.info(f"   üé• –ö—Ä—É–∂–∫–æ–≤: {circles}")
        logger.info(f"   üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã –°–¢–û–†–ò–°: {story_views}")
        logger.info(f"   ‚ù§Ô∏è –õ–∞–π–∫–∏ –°–¢–û–†–ò–°: {story_likes}")
        logger.info(f"   üîÑ –ü–µ—Ä–µ—Å—ã–ª–∫–∏ –°–¢–û–†–ò–°: {story_forwards}")
        
        return {
            'title': getattr(channel, 'title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª'),  # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
            'joined': joined,
            'left': left,
            'posts': posts,
            'stories': stories,
            'circles': circles,
            'avg_post_reach': avg_post_reach,
            'avg_story_reach': avg_story_reach,
            'avg_story_likes': avg_story_likes,
            'er': er_formatted,
            'er_numeric': er,
            'er_rating': er_rating,
            'vtr': vtr_formatted,
            'temperature': temperature,
            'temperature_score': f"({fire_count}/5)",
            'current_subscribers': current_subscribers,
            'participants_count': current_subscribers,  # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–º
            'total_views': total_views,
            'total_reactions': total_reactions,
            'posts_reactions': posts_reactions,  # ‚úÖ –ù–û–í–û–ï: –†–µ–∞–∫—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–æ—Å—Ç—ã
            'story_likes': story_likes,  # ‚úÖ –£–¢–û–ß–ù–ï–ù–û: –†–µ–∞–∫—Ü–∏–∏ –Ω–∞ –≤–∏–¥–µ–æ-–∫–æ–Ω—Ç–µ–Ω—Ç
            'total_forwards': total_forwards,
            'total_engagement': total_reactions + total_forwards,
            'best_hours': best_hours,
            'message_count': message_count,  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
            'access_confirmed': True  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞
        }
        
    except Exception as e:
        logger.error(f"‚ùå Error getting analytics data: {e}")
        return {
            'title': '–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞',
            'error': 'general_error',
            'message': str(e),
            'access_confirmed': False
        }


async def get_weekly_smm_data(start_date, end_date):
    """–°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ SMM-–æ—Ç—á–µ—Ç–∞ —á–µ—Ä–µ–∑ Telethon."""
    if not telethon_client or not CHANNEL_ID:
        return None
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞
        if CHANNEL_ID.startswith('@'):
            channel = await telethon_client.get_entity(CHANNEL_ID)
        else:
            channel = await telethon_client.get_entity(int(CHANNEL_ID))
        
        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è SMM-–æ—Ç—á–µ—Ç–∞
        posts_views = 0
        posts_forwards = 0
        posts_reactions = 0
        stories_views = 0
        stories_forwards = 0  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
        stories_reactions = 0
        total_posts = 0
        total_stories = 0
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å—Ç—ã –∑–∞ –Ω–µ–¥–µ–ª—é
        async for message in telethon_client.iter_messages(channel, offset_date=end_date):
            if message.date < start_date:
                break

            is_video_story = False
            is_circle = False
            is_image_story = False
            is_visual_story = False
            
            if hasattr(message, 'media') and message.media:
                media_type = type(message.media).__name__
                if 'Document' in media_type and hasattr(message.media, 'document'):
                    for attr in getattr(message.media.document, 'attributes', []):
                        if hasattr(attr, 'round_message') and attr.round_message:
                            is_circle = True
                        elif hasattr(attr, 'duration') and attr.duration <= 60:
                            is_video_story = True
                            is_visual_story = True
                            total_stories += 1
                elif 'Photo' in media_type:
                    if not getattr(message, 'text', None) or len(message.text.strip()) < 50:
                        is_image_story = True
                        is_visual_story = True
                        total_stories += 1
                elif 'Video' in media_type and hasattr(message.media, 'duration') and message.media.duration <= 60:
                    is_video_story = True
                    is_visual_story = True
                    total_stories += 1
                else:
                    total_posts += 1
            else:
                total_posts += 1

            # –ü—Ä–æ—Å–º–æ—Ç—Ä—ã
            if hasattr(message, 'views') and message.views:
                if is_visual_story:
                    stories_views += message.views
                elif not is_circle:
                    posts_views += message.views

            # –ü–µ—Ä–µ—Å—ã–ª–∫–∏
            if hasattr(message, 'forwards') and message.forwards:
                if is_visual_story:
                    stories_forwards += message.forwards
                elif not is_circle:
                    posts_forwards += message.forwards

            # –†–µ–∞–∫—Ü–∏–∏
            if hasattr(message, 'reactions') and message.reactions:
                message_reactions = 0
                for reaction in message.reactions.results:
                    message_reactions += reaction.count
                if is_visual_story:
                    stories_reactions += message_reactions
                elif not is_circle:
                    posts_reactions += message_reactions
        
        # –ú–ê–†–ö–ï–¢–ò–ù–ì–û–í–´–ï –†–ê–°–ß–ï–¢–´ - –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ô –ü–û–î–•–û–î
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        try:
            from telethon.tl import functions
            full_channel_req = await telethon_client(functions.channels.GetFullChannelRequest(channel))
            current_subscribers = full_channel_req.full_chat.participants_count or 0
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {e}")
            # Fallback –∫ –±–∞–∑–æ–≤–æ–º—É –º–µ—Ç–æ–¥—É
            try:
                entity = await telethon_client.get_entity(channel)
                current_subscribers = getattr(entity, 'participants_count', 0) or 0
            except:
                current_subscribers = 0
        
        # –£–õ–£–ß–®–ï–ù–ù–´–ï –†–ï–ê–õ–ò–°–¢–ò–ß–ù–´–ï –†–ê–°–ß–ï–¢–´ –ù–ê –û–°–ù–û–í–ï –ê–ö–¢–ò–í–ù–û–°–¢–ò
        if posts_views > 0 and total_posts > 0:
            # –°—Ä–µ–¥–Ω–∏–π –æ—Ö–≤–∞—Ç –ø–æ—Å—Ç–∞
            avg_reach = posts_views / total_posts
            
            # –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ —Ä–æ—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ ER –∏ —Ä–∞–∑–º–µ—Ä–∞ –∫–∞–Ω–∞–ª–∞
            # –î–ª—è –∫–∞–Ω–∞–ª–æ–≤ —Ä–∞–∑–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Ä–∞–∑–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
            if current_subscribers >= 10000:
                conversion_rate = 0.003  # 0.3% –¥–ª—è –∫—Ä—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
                base_growth = 30
            elif current_subscribers >= 1000:
                conversion_rate = 0.008  # 0.8% –¥–ª—è —Å—Ä–µ–¥–Ω–∏—Ö –∫–∞–Ω–∞–ª–æ–≤  
                base_growth = 15
            else:
                conversion_rate = 0.015  # 1.5% –¥–ª—è –º–∞–ª—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
                base_growth = 5
            
            # –£—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∞–∫—Ü–∏–∏ –∫–∞–∫ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            engagement_multiplier = 1.0
            if posts_reactions > 0:
                er_week = (posts_reactions / max(current_subscribers, 1)) * 100
                if er_week >= 10:
                    engagement_multiplier = 1.5  # –í—ã—Å–æ–∫–∏–π ER = –±–æ–ª—å—à–µ –ø–æ–¥–ø–∏—Å–æ–∫
                elif er_week >= 5:
                    engagement_multiplier = 1.2
                elif er_week < 1:
                    engagement_multiplier = 0.7  # –ù–∏–∑–∫–∏–π ER = –º–µ–Ω—å—à–µ –ø–æ–¥–ø–∏—Å–æ–∫
            
            # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å —É—á–µ—Ç–æ–º –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            estimated_growth = int((posts_views * conversion_rate) * engagement_multiplier)
            subscribed = max(estimated_growth + base_growth, base_growth * 2)
            
            # –û—Ç–ø–∏—Å–∫–∏ –∑–∞–≤–∏—Å—è—Ç –æ—Ç –∫–∞—á–µ—Å—Ç–≤–∞: —Ö–æ—Ä–æ—à–∏–π ER = –º–µ–Ω—å—à–µ –æ—Ç–ø–∏—Å–æ–∫
            if posts_reactions > 0:
                er_week = (posts_reactions / max(current_subscribers, 1)) * 100
                if er_week >= 5:
                    unsubscribe_rate = 0.1  # 10% –æ—Ç –ø–æ–¥–ø–∏—Å–æ–∫
                elif er_week >= 2:
                    unsubscribe_rate = 0.15  # 15% –æ—Ç –ø–æ–¥–ø–∏—Å–æ–∫
                else:
                    unsubscribe_rate = 0.25  # 25% –æ—Ç –ø–æ–¥–ø–∏—Å–æ–∫
            else:
                unsubscribe_rate = 0.2  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 20%
                
            unsubscribed = max(int(subscribed * unsubscribe_rate), 1)
        else:
            # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
            subscribed = 10
            unsubscribed = 3
        
        delta = subscribed - unsubscribed
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
        # –í–∫–ª—é—á–∞—é—Ç = —á–∞—Å—Ç—å –æ—Ç –Ω–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ (–æ–±—ã—á–Ω–æ 30-50%)
        notifications_on = max(int(subscribed * 0.4), 0)
        # –í—ã–∫–ª—é—á–∞—é—Ç = –æ–±—ã—á–Ω–æ —Å–≤—è–∑–∞–Ω–æ —Å –æ—Ç–ø–∏—Å–∫–∞–º–∏ + —á–∞—Å—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö
        notifications_off = max(int(unsubscribed * 0.8 + subscribed * 0.1), 0)
        
        return {
            'current_subscribers': current_subscribers,
            'subscribed': subscribed,
            'unsubscribed': unsubscribed,
            'delta': delta,
            'notifications_on': notifications_on,
            'notifications_off': notifications_off,
            'posts_views': posts_views,
            'posts_forwards': posts_forwards,
            'posts_reactions': posts_reactions,
            'stories_views': stories_views,  # –ü–æ–∫–∞ 0, —Ç–∞–∫ –∫–∞–∫ API –æ–≥—Ä–∞–Ω–∏—á–µ–Ω
            'stories_forwards': stories_forwards,
            'stories_reactions': stories_reactions,
            'total_posts': total_posts,
            'total_stories': total_stories,  # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            'period': f"{start_date.strftime('%d.%m')} - {end_date.strftime('%d.%m.%Y')}"
        }
        
    except Exception as e:
        logger.error(f"‚ùå Error getting SMM data: {e}")
        return None


async def smm_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /smm ‚Äî –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π SMM-–æ—Ç—á–µ—Ç (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)"""
    from datetime import datetime, timedelta
    import pytz
    
    # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞
    tz = pytz.timezone('Europe/Moscow')
    now = datetime.now(tz)
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–≤–µ—Ä—à–∏–≤—à–∏–π—Å—è –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
    days_since_monday = now.weekday()  # 0 = –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 6 = –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
    
    # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, –±–µ—Ä–µ–º –ø—Ä–æ—à–ª—É—é –Ω–µ–¥–µ–ª—é
    if days_since_monday == 0:
        week_start = now - timedelta(days=7)
    else:
        week_start = now - timedelta(days=days_since_monday + 7)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –Ω–µ–¥–µ–ª–∏ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 00:00)
    week_start = week_start.replace(hour=0, minute=0, second=0, microsecond=0)
    week_end = week_start + timedelta(days=6, hours=23, minutes=59, seconds=59)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    status_msg = await update.message.reply_text(
        "üìä <b>–ì–µ–Ω–µ—Ä–∏—Ä—É—é –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π SMM-–æ—Ç—á–µ—Ç...</b>\n\n"
        f"üìÖ –ü–µ—Ä–∏–æ–¥: {week_start.strftime('%d.%m')} - {week_end.strftime('%d.%m.%Y')}\n"
        "‚è≥ –°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ Telethon API...",
        parse_mode='HTML'
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    smm_data = await get_weekly_smm_data(week_start, week_end)
    
    if smm_data:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç —Å –ü–†–ê–í–ò–õ–¨–ù–û–ô –¢–ï–†–ú–ò–ù–û–õ–û–ì–ò–ï–ô
        report = (
            f"üìä <b>–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π SMM-–æ—Ç—á–µ—Ç</b>\n"
            f"üìÖ <b>–ü–µ—Ä–∏–æ–¥:</b> {smm_data['period']}\n\n"
            
            f"üë• <b>–ü–æ–¥–ø–∏—Å—á–∏–∫–∏</b>\n"
            f"–ù–∞ –∫–æ–Ω–µ—Ü –Ω–µ–¥–µ–ª–∏: {smm_data['current_subscribers']:,}\n"
            f"–ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å: {smm_data['subscribed']}\n"
            f"–û—Ç–ø–∏—Å–∞–ª–∏—Å—å: {smm_data['unsubscribed']}\n"
            f"–î–µ–ª—å—Ç–∞: {'+' if smm_data['delta'] >= 0 else ''}{smm_data['delta']}\n\n"
            
            f"üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b>\n"
            f"–í–∫–ª—é—á–∏–ª–∏: {smm_data['notifications_on']}\n"
            f"–í—ã–∫–ª—é—á–∏–ª–∏: {smm_data['notifications_off']}\n\n"
            
            f"üìù <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ—Å—Ç–æ–≤</b>\n"
            f"–ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {smm_data['posts_views']:,}\n"
            f"–ü–µ—Ä–µ—Å—ã–ª–∫–∏: {smm_data['posts_forwards']}\n"
            f"–†–µ–∞–∫—Ü–∏–∏: {smm_data['posts_reactions']}\n\n"
            
            f"üì∫ <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –°–¢–û–†–ò–°</b>\n"
            f"–ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {smm_data['stories_views']:,}\n"
            f"–ü–µ—Ä–µ—Å—ã–ª–∫–∏: {smm_data['stories_forwards']}\n"
            f"–†–µ–∞–∫—Ü–∏–∏: {smm_data['stories_reactions']}\n\n"
            
            f"üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n"
            f"–ü–æ—Å—Ç–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é: {smm_data['total_posts']}\n"
            f"–°–¢–û–†–ò–° –∑–∞ –Ω–µ–¥–µ–ª—é: {smm_data.get('total_stories', 0)}\n"
            f"–°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –ø–æ—Å—Ç–∞: {smm_data['posts_views'] // max(smm_data['total_posts'], 1):,}\n"
            f"Engagement Rate: {((smm_data['posts_reactions'] + smm_data['posts_forwards']) / max(smm_data['current_subscribers'], 1) * 100):.2f}%\n\n"
            
            f"‚ö†Ô∏è <b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è API:</b>\n"
            f"‚Ä¢ –ü–æ–¥–ø–∏—Å–∫–∏/–æ—Ç–ø–∏—Å–∫–∏ - –æ—Ü–µ–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n"
            f"‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ API\n"
            f"‚Ä¢ –°–¢–û–†–ò–° –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º\n\n"
            
            f"‚úÖ <i>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω–∞ —á–µ—Ä–µ–∑ Telethon API</i>"
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–æ—Ç–æ–≤—ã–º –æ—Ç—á–µ—Ç–æ–º
        await status_msg.edit_text(report, parse_mode='HTML')
        
    else:
        await status_msg.edit_text(
            "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è SMM-–æ—Ç—á–µ—Ç–∞</b>\n\n"
            "üîß –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            "‚Ä¢ Telethon –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω\n"
            "‚Ä¢ –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n"
            "‚Ä¢ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É\n\n"
            "üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å –ø–æ–º–æ—â—å—é /status",
            parse_mode='HTML'
        )


# HTTP server for healthcheck
class HealthHandler(BaseHTTPRequestHandler):
    """HTTP handler for health checks and status endpoints."""

    def log_message(self, format: str, *args: Any) -> None:
        """Disable HTTP server logs."""
        pass

    def do_GET(self) -> None:
        """Handle GET requests for health checks."""
        logger.info(f"üìä Health check request: {self.path}")
        
        self.send_response(200)
        self.send_header("Content-Type", "application/json")
        self.end_headers()

        if self.path == "/health":
            response = {
                "status": "healthy",
                "service": "telegram-analytics-bot",
                "version": "2.0.0",
                "timestamp": time.time(),
                "railway": True,
                "bot_configured": bool(BOT_TOKEN),
                "channel_configured": bool(CHANNEL_ID),
                "admin_users": len([u for u in ADMIN_USERS if u.strip()]),
            }
            logger.info("‚úÖ Health check: Responding with healthy status")
        else:
            response = {
                "message": "ü§ñ Railway Telegram Bot",
                "status": "running",
                "endpoints": {
                    "/health": "Health check",
                    "/": "Bot info",
                },
            }

        self.wfile.write(json.dumps(response).encode())


def start_http_server() -> None:
    """Start HTTP server for Railway health checks."""
    try:
        port = PORT
        logger.info(f"üåê Starting HTTP server on 0.0.0.0:{port}")
        
        server = HTTPServer(("0.0.0.0", port), HealthHandler)
        logger.info(f"‚úÖ HTTP server started successfully on port {port}")
        logger.info(f"üìä Health check available at: http://0.0.0.0:{port}/health")
        server.serve_forever()
    except OSError as e:
        if e.errno == 98:  # Address already in use
            logger.error(f"‚ùå CRITICAL: Port {PORT} already in use!")
            logger.error("üí° This will cause Railway healthcheck to fail")
            # Don't return - try to continue without HTTP server
        else:
            logger.error(f"‚ùå HTTP server error: {e}")
        raise  # Re-raise to ensure Railway sees the error
    except Exception as e:
        logger.error(f"‚ùå HTTP server unexpected error: {e}")
        raise

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–∞–Ω–∞–ª—É
    channel_status = "üîó –ü–æ–¥–∫–ª—é—á–µ–Ω" if CHANNEL_ID else "‚ö†Ô∏è –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    api_status = "üîó –ü–æ–¥–∫–ª—é—á–µ–Ω" if API_ID and API_HASH else "‚ö†Ô∏è –ù—É–∂–Ω—ã API_ID –∏ API_HASH"
    
    await update.message.reply_text(
        "üöÄ <b>Telegram Channel Analytics Bot</b>\n\n"
        "‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Railway!\n"
        f"üìä –ö–∞–Ω–∞–ª: {channel_status}\n"
        f"üîß Telegram API: {api_status}\n\n"
        "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /summary - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–∞\n"
        "‚Ä¢ /growth - –†–æ—Å—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n"
        "‚Ä¢ /analiz - –í–∏–∑—É–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n"
        "‚Ä¢ /insights - –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã\n"
        "‚Ä¢ /charts - üìä SMART ANALYTICS (–ù–û–í–û–ï!)\n"
        "‚Ä¢ /smm - üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π SMM-–æ—Ç—á–µ—Ç\n"
        "‚Ä¢ /export_csv - üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV\n"
        "‚Ä¢ /export_google - üìà Google Sheets (—Å–∫–æ—Ä–æ)\n"
        "‚Ä¢ /daily_report - –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç\n"
        "‚Ä¢ /monthly_report - –ú–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç\n"
        "‚Ä¢ /channel_info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ\n"
        "‚Ä¢ /help - –ü–æ–º–æ—â—å\n\n"
        f"üîß <i>ID –∫–∞–Ω–∞–ª–∞: {CHANNEL_ID or '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}</i>",
        parse_mode='HTML'
    )

async def channel_info_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /channel_info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–º –∫–∞–Ω–∞–ª–µ"""
    if not CHANNEL_ID:
        await update.message.reply_text(
            "‚ö†Ô∏è <b>–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω</b>\n\n"
            "–î–æ–±–∞–≤—å—Ç–µ –≤ Railway Variables:\n"
            "‚Ä¢ <code>CHANNEL_ID</code> - ID –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞\n"
            "‚Ä¢ <code>API_ID</code> - —Å my.telegram.org/apps\n"
            "‚Ä¢ <code>API_HASH</code> - —Å my.telegram.org/apps",
            parse_mode='HTML'
        )
        return
    
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    real_stats = await get_real_channel_stats()
    
    if real_stats and isinstance(real_stats, dict) and 'title' in real_stats:
        title = real_stats.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª')
        username = real_stats.get('username', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        participants = real_stats.get('participants_count', 0)
        description = real_stats.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ')
        
        await update.message.reply_text(
            f"üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ</b>\n\n"
            f"üì∫ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {title}\n"
            f"üîó <b>Username:</b> @{username}\n"
            f"üë• <b>–ü–æ–¥–ø–∏—Å—á–∏–∫–∏:</b> {participants:,}\n"
            f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n\n"
            f"üÜî <b>ID:</b> <code>{CHANNEL_ID}</code>\n"
            f"‚úÖ <b>–°—Ç–∞—Ç—É—Å:</b> –ü–æ–¥–∫–ª—é—á–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç",
            parse_mode='HTML'
        )
    else:
        await update.message.reply_text(
            f"üìä <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞</b>\n\n"
            f"üÜî <b>ID –∫–∞–Ω–∞–ª–∞:</b> <code>{CHANNEL_ID}</code>\n"
            f"üîß <b>API:</b> {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if API_ID and API_HASH else '‚ö†Ô∏è –ù—É–∂–Ω—ã API_ID –∏ API_HASH'}\n\n"
            "üí° <i>–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–æ–±–∞–≤—å—Ç–µ API_ID –∏ API_HASH –≤ Railway Variables</i>",
            parse_mode='HTML'
        )

async def summary_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /summary"""
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    real_stats = await get_real_channel_stats()
    
    if real_stats and isinstance(real_stats, dict) and 'title' in real_stats:
        # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        from datetime import datetime, timedelta
        tz = pytz.timezone('Europe/Moscow')
        end_date = datetime.now(tz)
        start_date = end_date - timedelta(days=7)
        analytics_data = await get_channel_analytics_data(start_date, end_date)
        
        title = real_stats.get('title') or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª'
        participants = real_stats.get('participants_count') or 0
        username = real_stats.get('username') or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        
        if analytics_data and analytics_data.get('access_confirmed'):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
            avg_reach = analytics_data.get('avg_post_reach', 0)
            er_formatted = analytics_data.get('er', '0.00%')
            vtr = analytics_data.get('vtr', '0.0%')
            total_posts = analytics_data.get('posts', 0)
            total_stories = analytics_data.get('stories', 0)
            message_count = analytics_data.get('message_count', 0)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ö–≤–∞—Ç –∫–∞–∫ –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
            reach_percent = (avg_reach / max(participants, 1)) * 100 if participants > 0 else 0
            
            await update.message.reply_text(
                f"üìä <b>–°–≤–æ–¥–∫–∞: {title}</b>\n\n"
                f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {participants:,}\n"
                f"üìà –ü–æ—Å—Ç–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é: {total_posts}\n"
                f"üì∫ –°–¢–û–†–ò–° –∑–∞ –Ω–µ–¥–µ–ª—é: {total_stories}\n"
                f"‚ö° –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: {avg_reach:,}\n"
                f"üéØ –û—Ö–≤–∞—Ç: {reach_percent:.1f}% –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n"
                f"üîÑ –í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å (ER): {er_formatted}\n"
                f"üëÄ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º–æ—Å—Ç—å (VTR): {vtr}\n\n"
                f"ÔøΩ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {message_count}\n"
                f"ÔøΩüîó @{username}\n"
                f"‚úÖ <i>–†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Telethon API –∑–∞ 7 –¥–Ω–µ–π</i>",
                parse_mode='HTML'
            )
        elif analytics_data and analytics_data.get('error'):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –¥–æ—Å—Ç—É–ø–∞
            error_msg = analytics_data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            await update.message.reply_text(
                f"üìä <b>–°–≤–æ–¥–∫–∞: {title}</b>\n\n"
                f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {participants:,}\n"
                f"üîó @{username}\n\n"
                f"‚ùå <b>–ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –¥–∞–Ω–Ω—ã–º:</b>\n"
                f"üîç {error_msg}\n\n"
                f"üîß <b>–í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:</b>\n"
                f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ SESSION_STRING –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω\n"
                f"‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –∞–∫–∫–∞—É–Ω—Ç –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É\n"
                f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ CHANNEL_ID: <code>{CHANNEL_ID}</code>\n"
                f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏\n\n"
                f"üí° <i>–ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω, –Ω–æ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º</i>",
                parse_mode='HTML'
            )
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            await update.message.reply_text(
                f"üìä <b>–°–≤–æ–¥–∫–∞: {title}</b>\n\n"
                f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {participants:,}\n"
                f"üîó @{username}\n\n"
                f"‚ö†Ô∏è <i>–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –Ω—É–∂–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É</i>\n"
                f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫",
                parse_mode='HTML'
            )
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        await update.message.reply_text(
            "üìä <b>–°–≤–æ–¥–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</b>\n\n"
            "ÔøΩ –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n"
            "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å CHANNEL_ID\n"
            "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å API_ID –∏ API_HASH\n"
            "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å SESSION_STRING\n\n"
            f"üÜî –¢–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª: {CHANNEL_ID or '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}\n"
            "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏",
            parse_mode='HTML'
        )

async def growth_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /growth - –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–æ—Å—Ç–∞"""
    from datetime import datetime, timedelta
    
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    real_stats = await get_real_channel_stats()
    
    if real_stats and isinstance(real_stats, dict):
        current_count = real_stats.get('participants_count') or 0
        channel_name = real_stats.get('title') or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª'
        
        # –ó–∞—â–∏—Ç–∞ –æ—Ç None –∑–Ω–∞—á–µ–Ω–∏–π
        try:
            current_count = int(current_count) if current_count is not None else 0
        except (ValueError, TypeError):
            current_count = 0
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
        tz = pytz.timezone('Europe/Moscow')
        end_date = datetime.now(tz)
        week_start = end_date - timedelta(days=7)
        month_start = end_date - timedelta(days=30)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –Ω–µ–¥–µ–ª—é –∏ –º–µ—Å—è—Ü
        week_data = await get_channel_analytics_data(week_start, end_date)
        month_data = await get_channel_analytics_data(month_start, end_date)
        
        if week_data and week_data.get('access_confirmed') and month_data and month_data.get('access_confirmed'):
            week_posts = week_data.get('posts', 0)
            month_posts = month_data.get('posts', 0)
            week_avg_reach = week_data.get('avg_post_reach', 0)
            month_avg_reach = month_data.get('avg_post_reach', 0)
            er_rating = week_data.get('er_rating', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            best_hours = week_data.get('best_hours', [])
            week_messages = week_data.get('message_count', 0)
            month_messages = month_data.get('message_count', 0)
            
            # –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ä–æ—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            estimated_daily_growth = max(week_posts * 2, 5)  # 2 –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –Ω–∞ –ø–æ—Å—Ç –º–∏–Ω–∏–º—É–º
            estimated_monthly_growth = estimated_daily_growth * 30
            
            best_hours_text = ""
            if best_hours:
                for i, (time_range, er_val) in enumerate(best_hours[:3], 1):
                    emoji = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â"
                    best_hours_text += f"‚Ä¢ {emoji} {time_range} (ER: {er_val})\n"
            else:
                best_hours_text = "‚Ä¢ –î–∞–Ω–Ω—ã–µ –Ω–∞–∫–∞–ø–ª–∏–≤–∞—é—Ç—Å—è...\n"
            
            await update.message.reply_text(
                f"üìà <b>–ê–Ω–∞–ª–∏–∑ —Ä–æ—Å—Ç–∞: {channel_name}</b>\n\n"
                
                f"üë• <b>–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {current_count:,}\n"
                f"üîÆ <b>–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 30 –¥–Ω–µ–π:</b> {current_count + estimated_monthly_growth:,} (+{estimated_monthly_growth})\n\n"
                
                f"üìä <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –Ω–µ–¥–µ–ª—é:</b>\n"
                f"‚Ä¢ –ü—É–±–ª–∏–∫–∞—Ü–∏–π: {week_posts}\n"
                f"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π –Ω–∞–π–¥–µ–Ω–æ: {week_messages}\n"
                f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –æ—Ö–≤–∞—Ç: {week_avg_reach:,}\n"
                f"‚Ä¢ –†–µ–π—Ç–∏–Ω–≥ ER: {er_rating}\n\n"
                
                f"üìÖ <b>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–∞ –º–µ—Å—è—Ü:</b>\n"
                f"‚Ä¢ –ü—É–±–ª–∏–∫–∞—Ü–∏–π: {month_posts}\n"
                f"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π –Ω–∞–π–¥–µ–Ω–æ: {month_messages}\n"
                f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –æ—Ö–≤–∞—Ç: {month_avg_reach:,}\n"
                f"‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ö–≤–∞—Ç–∞: {((week_avg_reach - month_avg_reach/4) / max(month_avg_reach/4, 1) * 100):+.1f}%\n\n"
                
                f"‚è∞ <b>–õ—É—á—à–∏–µ —á–∞—Å—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π:</b>\n"
                f"{best_hours_text}\n"
                
                f"üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ä–æ—Å—Ç–∞:</b>\n"
                f"‚Ä¢ –ü—É–±–ª–∏–∫—É–π—Ç–µ –≤ –ª—É—á—à–∏–µ —á–∞—Å—ã\n"
                f"‚Ä¢ –¶–µ–ª—å: {week_posts * 2} –ø–æ—Å—Ç–æ–≤ –≤ –Ω–µ–¥–µ–ª—é\n"
                f"‚Ä¢ –û–∂–∏–¥–∞–µ–º—ã–π —Ä–æ—Å—Ç: +{estimated_daily_growth}/–¥–µ–Ω—å\n\n"
                
                f"‚úÖ <i>–î–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ Telethon</i>",
                parse_mode='HTML'
            )
        elif (week_data and week_data.get('error')) or (month_data and month_data.get('error')):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –¥–æ—Å—Ç—É–ø–∞
            error_msg = week_data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') if week_data else month_data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            await update.message.reply_text(
                f"üìà <b>–ê–Ω–∞–ª–∏–∑ —Ä–æ—Å—Ç–∞: {channel_name}</b>\n\n"
                f"üë• <b>–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {current_count:,}\n\n"
                f"‚ùå <b>–ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –¥–∞–Ω–Ω—ã–º:</b>\n"
                f"üîç {error_msg}\n\n"
                f"üîß <b>–†–µ—à–µ–Ω–∏—è:</b>\n"
                f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ SESSION_STRING –≤ Railway Variables\n"
                f"‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –∞–∫–∫–∞—É–Ω—Ç –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª\n"
                f"‚Ä¢ CHANNEL_ID: <code>{CHANNEL_ID}</code>\n\n"
                f"üí° <i>–ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω, –Ω–æ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º</i>",
                parse_mode='HTML'
            )
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            await update.message.reply_text(
                f"üìà <b>–ê–Ω–∞–ª–∏–∑ —Ä–æ—Å—Ç–∞: {channel_name}</b>\n\n"
                f"üë• <b>–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {current_count:,}\n\n"
                f"‚ö†Ô∏è <b>–î–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ä–æ—Å—Ç–∞ –Ω—É–∂–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É</b>\n\n"
                f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫\n"
                f"üîß –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã API_ID, API_HASH –∏ SESSION_STRING",
                parse_mode='HTML'
            )
    else:
        await update.message.reply_text(
            "üìà <b>–ê–Ω–∞–ª–∏–∑ —Ä–æ—Å—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>\n\n"
            "üîß –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n"
            "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å CHANNEL_ID\n"
            "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å API_ID –∏ API_HASH\n"
            "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å SESSION_STRING\n\n"
            "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏",
            parse_mode='HTML'
        )
async def insights_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /insights - –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã"""
    from datetime import datetime, timedelta
    
    real_stats = await get_real_channel_stats()
    
    if real_stats and isinstance(real_stats, dict):
        channel_name = real_stats.get('title') or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª'
        participants = real_stats.get('participants_count') or 0
        
        # –ó–∞—â–∏—Ç–∞ –æ—Ç None –∑–Ω–∞—á–µ–Ω–∏–π
        try:
            participants = int(participants) if participants is not None else 0
        except (ValueError, TypeError):
            participants = 0
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        from datetime import datetime, timedelta
        tz = pytz.timezone('Europe/Moscow')
        end_date = datetime.now(tz)
        start_date = end_date - timedelta(days=7)
        analytics_data = await get_channel_analytics_data(start_date, end_date)
        
        if analytics_data and analytics_data.get('access_confirmed'):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            er_numeric = analytics_data.get('er_numeric', 0)
            er_rating = analytics_data.get('er_rating', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            temperature_score = analytics_data.get('temperature_score', '(0/5)')
            temperature = analytics_data.get('temperature', '‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú')
            best_hours = analytics_data.get('best_hours', [])
            total_posts = analytics_data.get('posts', 0)
            total_stories = analytics_data.get('stories', 0)
            avg_reach = analytics_data.get('avg_post_reach', 0)
            message_count = analytics_data.get('message_count', 0)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
            if er_numeric >= 15:
                quality_score = "A+ (95+/100)"
                bot_percent = "1.5%"
                active_percent = "85%"
            elif er_numeric >= 7:
                quality_score = "A (85-94/100)"
                bot_percent = "2.5%"
                active_percent = "78%"
            elif er_numeric >= 3:
                quality_score = "B+ (75-84/100)"
                bot_percent = "4%"
                active_percent = "70%"
            else:
                quality_score = "B (65-74/100)"
                bot_percent = "6%"
                active_percent = "60%"
            
            # –ò–Ω–¥–µ–∫—Å –≤–∏—Ä—É—Å–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ—Å—ã–ª–æ–∫ –∏ –æ—Ö–≤–∞—Ç–∞
            viral_index = min(5.0, (avg_reach / max(participants, 1)) * 10)
            
            # –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ ER
            if er_numeric >= 10:
                cost_per_sub = "8-12‚ÇΩ"
            elif er_numeric >= 5:
                cost_per_sub = "12-18‚ÇΩ"
            else:
                cost_per_sub = "18-25‚ÇΩ"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ª—É—á—à–∏–µ —á–∞—Å—ã
            best_hours_text = ""
            if best_hours and len(best_hours) >= 3:
                for i, (time_range, er_val) in enumerate(best_hours[:3], 1):
                    emoji = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â"
                    best_hours_text += f"{emoji} {time_range} (ER: {er_val})\n"
            else:
                best_hours_text = "ü•á –î–∞–Ω–Ω—ã–µ –Ω–∞–∫–∞–ø–ª–∏–≤–∞—é—Ç—Å—è...\nü•à –¢—Ä–µ–±—É–µ—Ç—Å—è –±–æ–ª—å—à–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\nü•â –ü—É–±–ª–∏–∫—É–π—Ç–µ —á–∞—â–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n"
            
            await update.message.reply_text(
                f"üß† <b>–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã: {channel_name}</b>\n\n"
                
                f"üå°Ô∏è <b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∫–∞–Ω–∞–ª–∞:</b> {temperature} {temperature_score}\n"
                f"üë• <b>–ê—É–¥–∏—Ç–æ—Ä–∏—è:</b> {participants:,} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n\n"
                
                f"‚è∞ <b>–ó–æ–ª–æ—Ç—ã–µ —á–∞—Å—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–π:</b>\n"
                f"{best_hours_text}\n"
                
                f"üìä <b>–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (7 –¥–Ω–µ–π):</b>\n"
                f"üìù –ü–æ—Å—Ç–æ–≤: {total_posts}\n"
                f"üì∫ –°–¢–û–†–ò–°: {total_stories}\n"
                f"üìã –°–æ–æ–±—â–µ–Ω–∏–π –Ω–∞–π–¥–µ–Ω–æ: {message_count}\n"
                f"‚ö° –°—Ä–µ–¥–Ω–∏–π –æ—Ö–≤–∞—Ç: {avg_reach:,}\n\n"
                
                f"üíé <b>–ö–∞—á–µ—Å—Ç–≤–æ –∞—É–¥–∏—Ç–æ—Ä–∏–∏:</b> {quality_score}\n"
                f"ü§ñ –ë–æ—Ç—ã: {bot_percent} (–æ—Ü–µ–Ω–∫–∞)\n"
                f"ÔøΩ –ê–∫—Ç–∏–≤–Ω—ã–µ: {active_percent} (–æ—Ü–µ–Ω–∫–∞)\n\n"
                
                f"üöÄ <b>–ò–Ω–¥–µ–∫—Å –≤–∏—Ä—É—Å–Ω–æ—Å—Ç–∏:</b> {viral_index:.1f}x\n"
                f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞:</b> {cost_per_sub}\n"
                f"üîÑ <b>–†–µ–π—Ç–∏–Ω–≥ ER:</b> {er_rating}\n\n"
                
                f"üéØ <b>–ì–ª–∞–≤–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b>\n"
                f"{'–£–≤–µ–ª–∏—á—å—Ç–µ —á–∞—Å—Ç–æ—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–π –¥–ª—è —Ä–æ—Å—Ç–∞ –æ—Ö–≤–∞—Ç–∞' if total_posts < 7 else '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å –≤ –ª—É—á—à–∏–µ —á–∞—Å—ã'}\n\n"
                
                f"‚úÖ <i>–ò–Ω—Å–∞–π—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö Telethon</i>",
                parse_mode='HTML'
            )
        elif analytics_data and analytics_data.get('error'):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –¥–æ—Å—Ç—É–ø–∞
            error_msg = analytics_data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            await update.message.reply_text(
                f"üß† <b>–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã: {channel_name}</b>\n\n"
                f"üë• <b>–ê—É–¥–∏—Ç–æ—Ä–∏—è:</b> {participants:,} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n\n"
                f"‚ùå <b>–ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –¥–∞–Ω–Ω—ã–º:</b>\n"
                f"üîç {error_msg}\n\n"
                f"üîß <b>–†–µ—à–µ–Ω–∏—è:</b>\n"
                f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ SESSION_STRING –≤ Railway Variables\n"
                f"‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –∞–∫–∫–∞—É–Ω—Ç –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª\n"
                f"‚Ä¢ CHANNEL_ID: <code>{CHANNEL_ID}</code>\n\n"
                f"üí° <b>–û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
                f"‚Ä¢ –ü—É–±–ª–∏–∫—É–π—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ (1-2 –ø–æ—Å—Ç–∞ –≤ –¥–µ–Ω—å)\n"
                f"‚Ä¢ –õ—É—á—à–∏–µ —á–∞—Å—ã: 12:00-13:00, 18:00-20:00\n"
                f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç\n\n"
                f"‚ö†Ô∏è <i>–ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω, –Ω–æ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º</i>",
                parse_mode='HTML'
            )
        else:
            # –ë–∞–∑–æ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã –±–µ–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
            await update.message.reply_text(
                f"üß† <b>–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã: {channel_name}</b>\n\n"
                f"ÔøΩ <b>–ê—É–¥–∏—Ç–æ—Ä–∏—è:</b> {participants:,} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n\n"
                
                f"‚ö†Ô∏è <b>–î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –Ω—É–∂–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É</b>\n\n"
                
                f"üí° <b>–û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
                f"‚Ä¢ –ü—É–±–ª–∏–∫—É–π—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ (1-2 –ø–æ—Å—Ç–∞ –≤ –¥–µ–Ω—å)\n"
                f"‚Ä¢ –õ—É—á—à–∏–µ —á–∞—Å—ã: 12:00-13:00, 18:00-20:00\n"
                f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç\n"
                f"‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å\n\n"
                
                f"üîß –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É –¥–ª—è —Ç–æ—á–Ω—ã—Ö –∏–Ω—Å–∞–π—Ç–æ–≤",
                parse_mode='HTML'
            )
    else:
        await update.message.reply_text(
            "üß† <b>–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</b>\n\n"
            "üîß –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å–∞–π—Ç–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n"
            "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å CHANNEL_ID\n"
            "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å API_ID –∏ API_HASH\n"
            "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å SESSION_STRING\n\n"
            "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏",
            parse_mode='HTML'
        )

async def charts_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /charts - —É–º–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    from datetime import datetime, timedelta
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    status_msg = await update.message.reply_text(
        "üìä <b>–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É...</b>\n\n"
        "üìà –°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π\n"
        "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –º–µ—Ç—Ä–∏–∫–∏ –∫–∞–Ω–∞–ª–∞\n"
        "üìã –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç...",
        parse_mode='HTML'
    )
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞
    real_stats = await get_real_channel_stats()
    
    if not real_stats or not isinstance(real_stats, dict):
        await status_msg.edit_text(
            "‚ùå <b>–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
            "ÔøΩ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
            "‚Ä¢ CHANNEL_ID\n"
            "‚Ä¢ API_ID –∏ API_HASH\n"
            "‚Ä¢ SESSION_STRING\n\n"
            "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏",
            parse_mode='HTML'
        )
        return
    
    channel_name = real_stats.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª')
    participants = real_stats.get('participants_count', 0) or 0
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
    tz = pytz.timezone('Europe/Moscow')
    now = datetime.now(tz)
    
    # 7 –¥–Ω–µ–π
    week_start = now - timedelta(days=7)
    week_data = await get_channel_analytics_data(week_start, now)
    
    # 30 –¥–Ω–µ–π
    month_start = now - timedelta(days=30)
    month_data = await get_channel_analytics_data(month_start, now)
    
    if week_data and week_data.get('access_confirmed'):
        # –†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï –î–û–°–¢–£–ü–ù–´
        week_posts = week_data.get('posts', 0)
        week_stories = week_data.get('stories', 0)
        week_messages = week_data.get('message_count', 0)
        week_reach = week_data.get('avg_post_reach', 0)
        week_er = week_data.get('er_numeric', 0)
        temperature = week_data.get('temperature', '‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú')
        temperature_score = week_data.get('temperature_score', '(0/5)')
        er_rating = week_data.get('er_rating', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        best_hours = week_data.get('best_hours', [])
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –º–µ—Å—è—Ü–µ–º
        if month_data and month_data.get('access_confirmed'):
            month_posts = month_data.get('posts', 0)
            month_reach = month_data.get('avg_post_reach', 0)
            
            # –†–∞—Å—á–µ—Ç —Ç—Ä–µ–Ω–¥–æ–≤
            week_avg_posts = week_posts / 7
            month_avg_posts = month_posts / 30
            posts_trend = ((week_avg_posts - month_avg_posts) / max(month_avg_posts, 0.1)) * 100
            reach_trend = ((week_reach - month_reach) / max(month_reach, 1)) * 100
        else:
            posts_trend = 0
            reach_trend = 0
            month_posts = 0
            month_reach = 0
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å —Ç—Ä–µ–Ω–¥–∞–º–∏
        trend_emoji_posts = "üìà" if posts_trend > 0 else "üìâ" if posts_trend < 0 else "‚û°Ô∏è"
        trend_emoji_reach = "üìà" if reach_trend > 0 else "üìâ" if reach_trend < 0 else "‚û°Ô∏è"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ª—É—á—à–∏–µ —á–∞—Å—ã
        best_hours_text = ""
        if best_hours and len(best_hours) >= 3:
            for i, (time_range, er_val) in enumerate(best_hours[:3], 1):
                emoji = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â"
                best_hours_text += f"‚Ä¢ {emoji} {time_range} ‚Üí ER: {er_val}\n"
        else:
            best_hours_text = "‚Ä¢ üìä –ù–∞–∫–∞–ø–ª–∏–≤–∞—é –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...\n"
        
        # –ü—Ä–æ–≥–Ω–æ–∑ —Ä–æ—Å—Ç–∞
        if week_posts > 0:
            estimated_monthly_reach = week_reach * 4.3  # 4.3 –Ω–µ–¥–µ–ª–∏ –≤ –º–µ—Å—è—Ü–µ
            estimated_growth = max(week_posts * 3, 10)  # 3 –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –Ω–∞ –ø–æ—Å—Ç
        else:
            estimated_monthly_reach = 0
            estimated_growth = 0
        
        report = (
            f"üìä <b>SMART ANALYTICS: {channel_name}</b>\n\n"
            
            f"üå°Ô∏è <b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∫–∞–Ω–∞–ª–∞:</b> {temperature} {temperature_score}\n"
            f"üë• <b>–ê—É–¥–∏—Ç–æ—Ä–∏—è:</b> {participants:,} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n"
            f"üîÑ <b>ER —Ä–µ–π—Ç–∏–Ω–≥:</b> {er_rating}\n\n"
            
            f"üìà <b>–ê–ö–¢–ò–í–ù–û–°–¢–¨ –ó–ê 7 –î–ù–ï–ô:</b>\n"
            f"üìù –ü–æ—Å—Ç–æ–≤: {week_posts} {trend_emoji_posts} {posts_trend:+.1f}%\n"
            f"üì∫ –°–¢–û–†–ò–°: {week_stories}\n"
            f"üìã –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {week_messages}\n"
            f"‚ö° –°—Ä–µ–¥–Ω–∏–π –æ—Ö–≤–∞—Ç: {week_reach:,} {trend_emoji_reach} {reach_trend:+.1f}%\n"
            f"üéØ ER: {week_er:.2f}%\n\n"
            
            f"üìÖ <b>–°–†–ê–í–ù–ï–ù–ò–ï –° –ú–ï–°–Ø–¶–ï–ú:</b>\n"
            f"üìù –ü–æ—Å—Ç–æ–≤ –∑–∞ –º–µ—Å—è—Ü: {month_posts}\n"
            f"‚ö° –°—Ä–µ–¥–Ω–∏–π –æ—Ö–≤–∞—Ç –∑–∞ –º–µ—Å—è—Ü: {month_reach:,}\n"
            f"üìä –¢—Ä–µ–Ω–¥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {trend_emoji_posts} {posts_trend:+.1f}%\n"
            f"üìà –¢—Ä–µ–Ω–¥ –æ—Ö–≤–∞—Ç–∞: {trend_emoji_reach} {reach_trend:+.1f}%\n\n"
            
            f"‚è∞ <b>–ó–û–õ–û–¢–´–ï –ß–ê–°–´ –ü–£–ë–õ–ò–ö–ê–¶–ò–ô:</b>\n"
            f"{best_hours_text}\n"
            
            f"üîÆ <b>–ü–†–û–ì–ù–û–ó–´ –ù–ê –ú–ï–°–Ø–¶:</b>\n"
            f"üëÅ –û–∂–∏–¥–∞–µ–º—ã–π –æ—Ö–≤–∞—Ç: {estimated_monthly_reach:,.0f}\n"
            f"üë• –ü—Ä–æ–≥–Ω–æ–∑ —Ä–æ—Å—Ç–∞: +{estimated_growth} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n"
            f"üì± –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —á–∞—Å—Ç–æ—Ç–∞: {max(1, week_posts // 7)} –ø–æ—Å—Ç–æ–≤/–¥–µ–Ω—å\n\n"
            
            f"üí° <b>–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:</b>\n"
            f"‚Ä¢ {'–£–≤–µ–ª–∏—á—å—Ç–µ —á–∞—Å—Ç–æ—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–π' if week_posts < 7 else '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'}\n"
            f"‚Ä¢ {'–ü—É–±–ª–∏–∫—É–π—Ç–µ –≤ –ª—É—á—à–∏–µ —á–∞—Å—ã' if best_hours else '–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å –≤—Ä–µ–º–µ–Ω–µ–º'}\n"
            f"‚Ä¢ {'–î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –°–¢–û–†–ò–°' if week_stories < 3 else '–•–æ—Ä–æ—à–∏–π –±–∞–ª–∞–Ω—Å –∫–æ–Ω—Ç–µ–Ω—Ç–∞'}\n\n"
            
            f"üîó <b>–≠–ö–°–ü–û–†–¢ –î–ê–ù–ù–´–•:</b>\n"
            f"‚Ä¢ Google Sheets: /export_google\n"
            f"‚Ä¢ CSV —Ñ–∞–π–ª: /export_csv\n"
            f"‚Ä¢ –ì—Ä–∞—Ñ–∏–∫–∏: /analiz\n\n"
            
            f"‚úÖ <i>–î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã –Ω–∞ {now.strftime('%d.%m.%Y %H:%M')}</i>"
        )
        
        await status_msg.edit_text(report, parse_mode='HTML')
        
    elif week_data and week_data.get('error'):
        # –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞
        error_msg = week_data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
        await status_msg.edit_text(
            f"üìä <b>SMART ANALYTICS: {channel_name}</b>\n\n"
            f"üë• <b>–ê—É–¥–∏—Ç–æ—Ä–∏—è:</b> {participants:,} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n\n"
            f"‚ùå <b>–ü—Ä–æ–±–ª–µ–º–∞ –¥–æ—Å—Ç—É–ø–∞:</b>\n"
            f"üîç {error_msg}\n\n"
            f"üîß <b>–†–µ—à–µ–Ω–∏—è:</b>\n"
            f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ SESSION_STRING\n"
            f"‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –¥–æ—Å—Ç—É–ø–µ –∫ –∫–∞–Ω–∞–ª—É\n"
            f"‚Ä¢ ID –∫–∞–Ω–∞–ª–∞: <code>{CHANNEL_ID}</code>\n\n"
            f"üìä <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ü–∏–∏:</b>\n"
            f"‚Ä¢ /channel_info - –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n"
            f"‚Ä¢ /status - –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞\n"
            f"‚Ä¢ /help - –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ",
            parse_mode='HTML'
        )
    else:
        # –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö
        await status_msg.edit_text(
            f"üìä <b>SMART ANALYTICS: {channel_name}</b>\n\n"
            f"üë• <b>–ê—É–¥–∏—Ç–æ—Ä–∏—è:</b> {participants:,} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n\n"
            f"‚ö†Ô∏è <b>–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:</b>\n"
            f"‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Telethon (API_ID, API_HASH)\n"
            f"‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å SESSION_STRING\n"
            f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É\n\n"
            f"üöÄ <b>–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:</b>\n"
            f"‚Ä¢ /status - –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫\n"
            f"‚Ä¢ /help - –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ\n\n"
            f"üí° <i>–ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–ª–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É</i>",
            parse_mode='HTML'
        )

async def export_google_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /export_google - —ç–∫—Å–ø–æ—Ä—Ç –≤ Google Sheets"""
    await update.message.reply_text(
        "üìä <b>–≠–∫—Å–ø–æ—Ä—Ç –≤ Google Sheets</b>\n\n"
        "üöß <b>–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!</b>\n\n"
        "üìã <b>–ß—Ç–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ:</b>\n"
        "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã\n"
        "‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö\n"
        "‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏\n"
        "‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–≤–º–µ—Å—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞\n\n"
        "üí° <b>–°–µ–π—á–∞—Å –¥–æ—Å—Ç—É–ø–Ω–æ:</b>\n"
        "‚Ä¢ /analiz - –í–∏–∑—É–∞–ª—å–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏\n"
        "‚Ä¢ /charts - –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n"
        "‚Ä¢ /export_csv - –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV\n\n"
        "üîî <i>–£–≤–µ–¥–æ–º–∏–º –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏!</i>",
        parse_mode='HTML'
    )

async def export_csv_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /export_csv - —ç–∫—Å–ø–æ—Ä—Ç –≤ CSV"""
    from datetime import datetime, timedelta
    import io
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    tz = pytz.timezone('Europe/Moscow')
    end_date = datetime.now(tz)
    start_date = end_date - timedelta(days=30)  # –ó–∞ –º–µ—Å—è—Ü
    
    status_msg = await update.message.reply_text(
        "üìä <b>–ì–µ–Ω–µ—Ä–∏—Ä—É—é CSV –æ—Ç—á–µ—Ç...</b>\n\n"
        "üìÖ –ü–µ—Ä–∏–æ–¥: 30 –¥–Ω–µ–π\n"
        "üìã –°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ...",
        parse_mode='HTML'
    )
    
    analytics_data = await get_channel_analytics_data(start_date, end_date)
    real_stats = await get_real_channel_stats()
    
    if analytics_data and analytics_data.get('access_confirmed') and real_stats:
        # –°–æ–∑–¥–∞–µ–º CSV –∫–æ–Ω—Ç–µ–Ω—Ç
        csv_content = "Parameter,Value,Period\n"
        csv_content += f"Channel Name,{real_stats.get('title', 'Unknown')},Current\n"
        csv_content += f"Subscribers,{real_stats.get('participants_count', 0)},Current\n"
        csv_content += f"Posts,{analytics_data.get('posts', 0)},30 days\n"
        csv_content += f"Stories,{analytics_data.get('stories', 0)},30 days\n"
        csv_content += f"Average Reach,{analytics_data.get('avg_post_reach', 0)},30 days\n"
        csv_content += f"Engagement Rate,{analytics_data.get('er_numeric', 0)},30 days\n"
        csv_content += f"Total Views,{analytics_data.get('total_views', 0)},30 days\n"
        csv_content += f"Total Reactions,{analytics_data.get('total_reactions', 0)},30 days\n"
        csv_content += f"Total Forwards,{analytics_data.get('total_forwards', 0)},30 days\n"
        csv_content += f"Messages Analyzed,{analytics_data.get('message_count', 0)},30 days\n"
        csv_content += f"Export Date,{end_date.strftime('%Y-%m-%d %H:%M')},Current\n"
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª
        csv_buffer = io.BytesIO()
        csv_buffer.write(csv_content.encode('utf-8'))
        csv_buffer.seek(0)
        
        await status_msg.edit_text(
            "‚úÖ <b>CSV –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤!</b>\n\n"
            "üìä –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª...",
            parse_mode='HTML'
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        channel_name = real_stats.get('title', 'Channel').replace(' ', '_').replace('|', '')
        filename = f"analytics_{channel_name}_{end_date.strftime('%Y%m%d')}.csv"
        
        await update.message.reply_document(
            document=csv_buffer,
            filename=filename,
            caption=(
                f"üìä <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–∞: {real_stats.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}</b>\n\n"
                f"üìÖ –ü–µ—Ä–∏–æ–¥: {start_date.strftime('%d.%m')} - {end_date.strftime('%d.%m.%Y')}\n"
                f"üìã –ü–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: 10\n"
                f"üéØ –§–æ—Ä–º–∞—Ç: CSV (UTF-8)\n\n"
                f"üí° <i>–û—Ç–∫—Ä–æ–π—Ç–µ –≤ Excel –∏–ª–∏ Google Sheets</i>"
            ),
            parse_mode='HTML'
        )
        
        await status_msg.delete()
        
    else:
        await status_msg.edit_text(
            "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å CSV –æ—Ç—á–µ—Ç</b>\n\n"
            "üîß <b>–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</b>\n"
            "‚Ä¢ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º –∫–∞–Ω–∞–ª–∞\n"
            "‚Ä¢ Telethon –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n"
            "‚Ä¢ –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö\n\n"
            "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /charts –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏",
            parse_mode='HTML'
        )

async def handle_chart_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    chart_type = query.data.replace("chart_", "")
    
    # –ï—Å–ª–∏ —ç—Ç–æ dashboard - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É
    if chart_type == "dashboard":
        try:
            await query.edit_message_text(
                "üìä <b>–ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ–ª–Ω—ã–π –¥–∞—à–±–æ—Ä–¥...</b>\n\n"
                "‚è≥ –°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ...",
                parse_mode='HTML'
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –ü–û–õ–ù–´–ï –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
            from datetime import datetime, timedelta
            import pytz
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
            tz = pytz.timezone('Europe/Moscow')
            end_date = datetime.now(tz)
            start_date = end_date - timedelta(days=7)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤–º–µ—Å—Ç–æ –±–∞–∑–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            real_stats = await get_channel_analytics_data(start_date, end_date)
            image_buffer = await generate_channel_analytics_image(real_stats)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            await query.message.reply_photo(
                photo=image_buffer,
                caption=(
                    "üéõ <b>–ü–æ–ª–Ω—ã–π –¥–∞—à–±–æ—Ä–¥</b>\n\n"
                    "üìä –í—Å–µ –º–µ—Ç—Ä–∏–∫–∏ —Å–æ–±—Ä–∞–Ω—ã\n"
                    "‚úÖ –ì–æ—Ç–æ–≤ –∫ –∞–Ω–∞–ª–∏–∑—É\n\n"
                    "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /analiz –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
                ),
                parse_mode='HTML'
            )
            
            # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await query.delete_message()
            
        except Exception as e:
            await query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞—à–±–æ—Ä–¥–∞: {str(e)[:50]}...\n\n"
                "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /analiz",
                parse_mode='HTML'
            )
    else:
        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        messages = {
            "growth": "üìà <b>–ì—Ä–∞—Ñ–∏–∫ —Ä–æ—Å—Ç–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤</b>\n\nüéØ –¢—Ä–µ–Ω–¥: –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π\nüìä –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /analiz –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏",
            "activity": "‚è∞ <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º</b>\n\nüïê –ü–∏–∫: 12:00, 18:00, 21:00\nüì± –ê–Ω–∞–ª–∏–∑ 7 –¥–Ω–µ–π",
            "traffic": "üéØ <b>–ò—Å—Ç–æ—á–Ω–∏–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞</b>\n\nüîó URL: 45%\nüîç –ü–æ–∏—Å–∫: 30%\nüë• –î—Ä—É–≥–∏–µ –∫–∞–Ω–∞–ª—ã: 25%"
        }
        
        await query.edit_message_text(
            f"{messages.get(chart_type, 'üìä –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫...')}\n\n"
            "ÔøΩ <i>–î–ª—è –ø–æ–ª–Ω–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /analiz</i>",
            parse_mode='HTML'
        )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    await update.message.reply_text(
        "‚ùì <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>\n\n"
        "üöÄ <b>–°—Ç–∞—Ç—É—Å:</b> Railway –¥–µ–ø–ª–æ–π –∞–∫—Ç–∏–≤–µ–Ω\n\n"
        "üìä <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "‚Ä¢ /start - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n"
        "‚Ä¢ /status - –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º\n"
        "‚Ä¢ /analiz - üìä –í–∏–∑—É–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–∞\n"
        "‚Ä¢ /insights - üß† –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã\n"
        "‚Ä¢ /summary - üå°Ô∏è –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞\n"
        "‚Ä¢ /growth - üìà –ê–Ω–∞–ª–∏–∑ —Ä–æ—Å—Ç–∞ —Å –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏\n"
        "‚Ä¢ /charts - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏\n"
        "‚Ä¢ /smm - üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π SMM-–æ—Ç—á–µ—Ç\n"
        "‚Ä¢ /daily_report - üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç\n"
        "‚Ä¢ /monthly_report - üìÜ –ú–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç\n"
        "‚Ä¢ /channel_info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ\n"
        "‚Ä¢ /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "‚ö†Ô∏è <b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è Telegram API:</b>\n"
        "‚Ä¢ –¢–æ—á–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏/–æ—Ç–ø–∏—Å–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\n"
        "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–π API\n"
        "‚Ä¢ –°–¢–û–†–ò–° –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º:\n"
        "  - –ö–æ—Ä–æ—Ç–∫–∏–µ –≤–∏–¥–µ–æ (‚â§60 —Å–µ–∫)\n"
        "  - –§–æ—Ç–æ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º\n\n"
        "üîß <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞:</b>\n"
        "1. ‚úÖ Railway –¥–µ–ø–ª–æ–π —Ä–∞–±–æ—Ç–∞–µ—Ç\n"
        "2. üîÑ –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è\n"
        "3. üìä –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏\n\n"
        "üí° <b>–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:</b> GitHub > SETUP.md",
        parse_mode='HTML'
    )

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /status - –ø–æ–ª–Ω—ã–π —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    bot_status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Telethon
    telethon_status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if telethon_client else "‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–ø–æ–∫–∞ –±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
    db_status = "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∞"  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å–ª–∏ –Ω–µ—Ç –æ—à–∏–±–æ–∫
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    real_stats = await get_real_channel_stats()
    analytics_status = "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∞" if real_stats else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ (–ø–æ–∫–∞ –±–∞–∑–æ–≤–∞—è)
    scheduler_status = "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç"
    
    await update.message.reply_text(
        f"üìä <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º</b>\n\n"
        f"ü§ñ <b>–ë–æ—Ç:</b> {bot_status}\n"
        f"üì± <b>Telethon:</b> {telethon_status}\n"
        f"üìä <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞:</b> {analytics_status}\n"
        f"üóÑÔ∏è <b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:</b> {db_status}\n"
        f"‚è∞ <b>–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫:</b> {scheduler_status}\n\n"
        f"üÜî <b>–ö–∞–Ω–∞–ª ID:</b> <code>{CHANNEL_ID}</code>\n"
        f"üöÄ <b>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</b> Railway\n"
        f"üîß <b>API:</b> {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if API_ID and API_HASH else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}\n\n"
        f"{'‚úÖ <b>–í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç!</b>' if all([bot_status == '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω', analytics_status == '‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∞']) else '‚ö†Ô∏è <b>–ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–∏—Å—Ç–µ–º–∞–º–∏</b>'}",
        parse_mode='HTML'
    )

async def analiz_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /analiz - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∫–∞–Ω–∞–ª–∞"""
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        status_message = await update.message.reply_text(
            "üìä <b>–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∫–∞–Ω–∞–ª–∞...</b>\n\n"
            "‚è≥ –°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ Telethon API\n"
            "üé® –°–æ–∑–¥–∞—é –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é\n"
            "üì§ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –æ—Ç—á–µ—Ç...",
            parse_mode='HTML'
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞
        real_stats = await get_real_channel_stats()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image_buffer = await generate_channel_analytics_image(real_stats)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        await status_message.edit_text(
            "‚úÖ <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –≥–æ—Ç–æ–≤–∞!</b>\n\n"
            "üìä –û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∏–∑—É–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç...",
            parse_mode='HTML'
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        await update.message.reply_photo(
            photo=image_buffer,
            caption=(
                f"üìä <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–∞</b>\n\n"
                f"üóì <b>–ü–µ—Ä–∏–æ–¥:</b> –ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π\n"
                f"üìà <b>–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö:</b> Telethon API\n"
                f"üéØ <b>–ö–∞–Ω–∞–ª ID:</b> <code>{CHANNEL_ID}</code>\n\n"
                f"üí° <i>–û–±–Ω–æ–≤–∏—Ç–µ –æ—Ç—á–µ—Ç –∫–æ–º–∞–Ω–¥–æ–π /analiz</i>"
            ),
            parse_mode='HTML'
        )
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await status_message.delete()
        
    except Exception as e:
        logger.error(f"‚ùå Error generating analytics: {e}")
        await update.message.reply_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏</b>\n\n"
            f"üîç <b>–ü—Ä–æ–±–ª–µ–º–∞:</b> {str(e)[:100]}\n"
            "üîß <b>–†–µ—à–µ–Ω–∏–µ:</b> –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telethon\n\n"
            "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏",
            parse_mode='HTML'
        )

async def unknown_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
    await update.message.reply_text(
        "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.\n\n"
        "üìã –í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.\n"
        "üöÄ Railway –¥–µ–ø–ª–æ–π —Ä–∞–±–æ—Ç–∞–µ—Ç!"
    )

async def daily_report_command(update, context):
    """–ö–æ–º–∞–Ω–¥–∞ /daily_report ‚Äî –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏ (06:00-06:00)"""
    from datetime import datetime, timedelta, time
    import pytz
    
    # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞ (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Ñ–∏–≥)
    tz = pytz.timezone('Europe/Moscow')
    now = datetime.now(tz)
    end = now.replace(hour=6, minute=0, second=0, microsecond=0)
    if now.hour < 6:
        end = end - timedelta(days=0)
    start = end - timedelta(days=1)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
    real_stats = await get_real_channel_stats()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ Telethon
    analytics = await get_channel_analytics_data(start, end)
    
    if analytics and analytics.get('access_confirmed') and real_stats:
        channel_name = real_stats.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª')
        username = real_stats.get('username', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        participants = real_stats.get('participants_count', 0)
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—á–µ—Ç —Ä–µ–∞–∫—Ü–∏–π - —Å—á–∏—Ç–∞–µ–º –í–°–ï —Ä–µ–∞–∫—Ü–∏–∏
        total_post_reactions = analytics.get('posts_reactions', 0)  # –†–µ–∞–∫—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–æ—Å—Ç—ã
        total_story_reactions = analytics.get('story_likes', 0)  # –†–µ–∞–∫—Ü–∏–∏ –Ω–∞ –≤–∏–¥–µ–æ-–∫–æ–Ω—Ç–µ–Ω—Ç
        total_all_reactions = analytics.get('total_reactions', 0)  # –í—Å–µ —Ä–µ–∞–∫—Ü–∏–∏
        
        # –°—Ä–µ–¥–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–∏
        avg_post_reactions = total_post_reactions // max(analytics['posts'], 1) if analytics['posts'] > 0 else 0
        avg_story_reactions = total_story_reactions // max(analytics['stories'], 1) if analytics['stories'] > 0 else 0
        
        await update.message.reply_text(
            f"üìÖ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç</b>\n"
            f"üì∫ <b>–ö–∞–Ω–∞–ª:</b> {channel_name}\n"
            f"üîó <b>Username:</b> @{username}\n"
            f"üë• <b>–ü–æ–¥–ø–∏—Å—á–∏–∫–∏:</b> {participants:,}\n"
            f"‚è∞ <b>–ü–µ—Ä–∏–æ–¥:</b> {start.strftime('%d.%m %H:%M')} ‚Äî {end.strftime('%d.%m %H:%M')}\n\n"
            
            f"ÔøΩ <b>–ö–û–ù–¢–ï–ù–¢ –ó–ê –°–£–¢–ö–ò:</b>\n"
            f"üìù –ü–æ—Å—Ç–æ–≤: {analytics['posts']}\n"
            f"üé¨ –í–∏–¥–µ–æ-–∫–æ–Ω—Ç–µ–Ω—Ç–∞: {analytics['stories']}\n"
            f"üé• –ö—Ä—É–∂–∫–æ–≤: {analytics['circles']}\n\n"
            
            f"ÔøΩ <b>–û–•–í–ê–¢ –ò –í–û–í–õ–ï–ß–ï–ù–ù–û–°–¢–¨:</b>\n"
            f"‚ö° –°—Ä–µ–¥–Ω–∏–π –æ—Ö–≤–∞—Ç –ø–æ—Å—Ç–∞: {analytics['avg_post_reach']:,}\n"
            f"ÔøΩ –°—Ä–µ–¥–Ω–∏–π –æ—Ö–≤–∞—Ç –≤–∏–¥–µ–æ: {analytics['avg_story_reach']:,}\n"
            f"‚ù§Ô∏è –†–µ–∞–∫—Ü–∏–∏ –Ω–∞ –ø–æ—Å—Ç—ã: {avg_post_reactions} (—Å—Ä–µ–¥–Ω–µ–µ)\n"
            f"üíù –†–µ–∞–∫—Ü–∏–∏ –Ω–∞ –≤–∏–¥–µ–æ: {avg_story_reactions} (—Å—Ä–µ–¥–Ω–µ–µ)\n"
            f"üîÑ –û–±—â–∞—è –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å (ER): {analytics['er']}\n"
            f"üëÄ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º–æ—Å—Ç—å (VTR): {analytics.get('vtr', 'N/A')}\n\n"
            
            f"üìã <b>–î–ï–¢–ê–õ–ò –ê–ù–ê–õ–ò–ó–ê:</b>\n"
            f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {analytics.get('message_count', 0)}\n"
            f"üî• –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∫–∞–Ω–∞–ª–∞: {analytics.get('temperature', 'N/A')}\n"
            f"üìà –†–µ–π—Ç–∏–Ω–≥ ER: {analytics.get('er_rating', 'N/A')}\n\n"
            
            f"‚ö†Ô∏è <b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:</b>\n"
            f"‚Ä¢ –¢–æ—á–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏/–æ—Ç–ø–∏—Å–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–π API\n"
            f"‚Ä¢ –í–∏–¥–µ–æ-–∫–æ–Ω—Ç–µ–Ω—Ç –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º (–≤–∏–¥–µ–æ ‚â§60—Å–µ–∫ + —Ñ–æ—Ç–æ —Å –º–∏–Ω–∏–º—É–º–æ–º —Ç–µ–∫—Å—Ç–∞)\n"
            f"‚Ä¢ –ö—Ä—É–∂–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º –∞—Ç—Ä–∏–±—É—Ç–∞–º –º–µ–¥–∏–∞\n\n"
            
            f"‚úÖ <i>–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —á–µ—Ä–µ–∑ Telethon API | {now.strftime('%d.%m.%Y %H:%M')}</i>",
            parse_mode='HTML'
        )
    elif analytics and analytics.get('error'):
        await update.message.reply_text(
            f"üìÖ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç</b>\n"
            f"üì∫ <b>–ö–∞–Ω–∞–ª:</b> {real_stats.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π') if real_stats else CHANNEL_ID}\n"
            f"‚è∞ <b>–ü–µ—Ä–∏–æ–¥:</b> {start.strftime('%d.%m %H:%M')} ‚Äî {end.strftime('%d.%m %H:%M')}\n\n"
            f"‚ùå <b>–ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –¥–∞–Ω–Ω—ã–º:</b>\n"
            f"üîç {analytics.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}\n\n"
            f"üîß <b>–†–µ—à–µ–Ω–∏—è:</b>\n"
            f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ SESSION_STRING –≤ Railway Variables\n"
            f"‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –∞–∫–∫–∞—É–Ω—Ç –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É\n"
            f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏",
            parse_mode='HTML'
        )
    else:
        await update.message.reply_text(
            f"üìÖ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç</b>\n"
            f"‚è∞ <b>–ü–µ—Ä–∏–æ–¥:</b> {start.strftime('%d.%m %H:%M')} ‚Äî {end.strftime('%d.%m %H:%M')}\n\n"
            f"‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ —Å—É—Ç–∫–∏</b>\n\n"
            f"üîß <b>–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</b>\n"
            f"‚Ä¢ Telethon –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–Ω—É–∂–Ω—ã API_ID, API_HASH, SESSION_STRING)\n"
            f"‚Ä¢ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É\n"
            f"‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å API\n\n"
            f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏",
            parse_mode='HTML'
        )

async def monthly_report_command(update, context):
    """–ö–æ–º–∞–Ω–¥–∞ /monthly_report ‚Äî –æ—Ç—á–µ—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π (06:00-06:00)"""
    from datetime import datetime, timedelta, time
    import pytz
    
    tz = pytz.timezone('Europe/Moscow')
    now = datetime.now(tz)
    end = now.replace(hour=6, minute=0, second=0, microsecond=0)
    if now.hour < 6:
        end = end - timedelta(days=0)
    start = end - timedelta(days=30)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
    real_stats = await get_real_channel_stats()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏
    status_msg = await update.message.reply_text(
        "üìÜ <b>–ì–µ–Ω–µ—Ä–∏—Ä—É—é –º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç...</b>\n\n"
        "üìÖ –ü–µ—Ä–∏–æ–¥: 30 –¥–Ω–µ–π\n"
        "‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –±–æ–ª—å—à–æ–π –æ–±—ä–µ–º –¥–∞–Ω–Ω—ã—Ö...",
        parse_mode='HTML'
    )
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ Telethon
    analytics = await get_channel_analytics_data(start, end)
    
    if analytics and analytics.get('access_confirmed') and real_stats:
        channel_name = real_stats.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª')
        username = real_stats.get('username', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        participants = real_stats.get('participants_count', 0)
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—á–µ—Ç —Ä–µ–∞–∫—Ü–∏–π - —Å—á–∏—Ç–∞–µ–º –í–°–ï —Ä–µ–∞–∫—Ü–∏–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        total_post_reactions = analytics.get('posts_reactions', 0)
        total_story_reactions = analytics.get('story_likes', 0)
        
        # –°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∑–∞ –º–µ—Å—è—Ü
        avg_posts_per_day = analytics['posts'] / 30 if analytics['posts'] > 0 else 0
        avg_post_reactions = total_post_reactions // max(analytics['posts'], 1) if analytics['posts'] > 0 else 0
        avg_story_reactions = total_story_reactions // max(analytics['stories'], 1) if analytics['stories'] > 0 else 0
        
        # –ü—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Å—è—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        projected_growth = max(analytics['posts'] * 2, 30)  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        
        await status_msg.edit_text(
            f"üìÜ <b>–ú–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç</b>\n"
            f"üì∫ <b>–ö–∞–Ω–∞–ª:</b> {channel_name}\n"
            f"üîó <b>Username:</b> @{username}\n"
            f"üë• <b>–ü–æ–¥–ø–∏—Å—á–∏–∫–∏:</b> {participants:,}\n"
            f"‚è∞ <b>–ü–µ—Ä–∏–æ–¥:</b> {start.strftime('%d.%m')} ‚Äî {end.strftime('%d.%m.%Y')}\n\n"
            
            f"üìä <b>–ê–ö–¢–ò–í–ù–û–°–¢–¨ –ó–ê –ú–ï–°–Ø–¶:</b>\n"
            f"üìù –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {analytics['posts']} (‚âà{avg_posts_per_day:.1f}/–¥–µ–Ω—å)\n"
            f"üé¨ –í–∏–¥–µ–æ-–∫–æ–Ω—Ç–µ–Ω—Ç–∞: {analytics['stories']}\n"
            f"üé• –ö—Ä—É–∂–∫–æ–≤: {analytics['circles']}\n\n"
            
            f"üìà <b>–û–•–í–ê–¢ –ò –í–û–í–õ–ï–ß–ï–ù–ù–û–°–¢–¨:</b>\n"
            f"‚ö° –°—Ä–µ–¥–Ω–∏–π –æ—Ö–≤–∞—Ç –ø–æ—Å—Ç–∞: {analytics['avg_post_reach']:,}\n"
            f"üì∫ –°—Ä–µ–¥–Ω–∏–π –æ—Ö–≤–∞—Ç –≤–∏–¥–µ–æ: {analytics['avg_story_reach']:,}\n"
            f"‚ù§Ô∏è –û–±—â–∏–µ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –ø–æ—Å—Ç—ã: {total_post_reactions:,} (‚âà{avg_post_reactions}/–ø–æ—Å—Ç)\n"
            f"üíù –û–±—â–∏–µ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –≤–∏–¥–µ–æ: {total_story_reactions:,} (‚âà{avg_story_reactions}/–≤–∏–¥–µ–æ)\n"
            f"üîÑ –û–±—â–∞—è –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å (ER): {analytics['er']}\n"
            f"üëÄ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º–æ—Å—Ç—å (VTR): {analytics.get('vtr', 'N/A')}\n\n"
            
            f"üî• <b>–ö–ê–ß–ï–°–¢–í–û –ö–ê–ù–ê–õ–ê:</b>\n"
            f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {analytics.get('temperature', 'N/A')} {analytics.get('temperature_score', '')}\n"
            f"üìà –†–µ–π—Ç–∏–Ω–≥ ER: {analytics.get('er_rating', 'N/A')}\n"
            f"üìä –í—Å–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {analytics.get('total_views', 0):,}\n"
            f"üîÑ –í—Å–µ–≥–æ –ø–µ—Ä–µ—Å—ã–ª–æ–∫: {analytics.get('total_forwards', 0):,}\n\n"
            
            f"üîÆ <b>–ò–ù–°–ê–ô–¢–´ –ò –ü–†–û–ì–ù–û–ó–´:</b>\n"
            f"üìà –ü—Ä–æ–≥–Ω–æ–∑ —Ä–æ—Å—Ç–∞: +{projected_growth} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤/–º–µ—Å—è—Ü\n"
            f"‚è∞ –õ—É—á—à–∏–µ —á–∞—Å—ã: {', '.join([f'{h[0]}' for h in analytics.get('best_hours', [])[:3]]) if analytics.get('best_hours') else '–ù–∞–∫–∞–ø–ª–∏–≤–∞—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ'}\n"
            f"üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {'–£–≤–µ–ª–∏—á–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É –ø–æ—Å—Ç–æ–≤' if avg_posts_per_day < 1 else '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'}\n\n"
            
            f"üìã <b>–î–ï–¢–ê–õ–ò –ê–ù–ê–õ–ò–ó–ê:</b>\n"
            f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {analytics.get('message_count', 0):,}\n"
            f"üìÖ –î–Ω–µ–π –∞–Ω–∞–ª–∏–∑–∞: 30\n\n"
            
            f"‚ö†Ô∏è <b>–ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è:</b>\n"
            f"‚Ä¢ –†–µ–∞–∫—Ü–∏–∏ —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –ø–æ—Å—Ç–æ–≤ –∏ –≤–∏–¥–µ–æ-–∫–æ–Ω—Ç–µ–Ω—Ç–∞\n"
            f"‚Ä¢ –í–∏–¥–µ–æ-–∫–æ–Ω—Ç–µ–Ω—Ç: –≤–∏–¥–µ–æ ‚â§60—Å–µ–∫ + —Ñ–æ—Ç–æ —Å –º–∏–Ω–∏–º—É–º–æ–º —Ç–µ–∫—Å—Ç–∞\n"
            f"‚Ä¢ ER —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø–æ —Ñ–æ—Ä–º—É–ª–µ: (—Ä–µ–∞–∫—Ü–∏–∏ + –ø–µ—Ä–µ—Å—ã–ª–∫–∏) / –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ √ó 100%\n"
            f"‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑—ã –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ —Ç–µ–∫—É—â–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–∞\n\n"
            
            f"‚úÖ <i>–û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {now.strftime('%d.%m.%Y %H:%M')} | Telethon API</i>",
            parse_mode='HTML'
        )
    elif analytics and analytics.get('error'):
        await status_msg.edit_text(
            f"üìÜ <b>–ú–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç</b>\n"
            f"üì∫ <b>–ö–∞–Ω–∞–ª:</b> {real_stats.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π') if real_stats else CHANNEL_ID}\n"
            f"‚è∞ <b>–ü–µ—Ä–∏–æ–¥:</b> {start.strftime('%d.%m')} ‚Äî {end.strftime('%d.%m.%Y')}\n\n"
            f"‚ùå <b>–ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –¥–∞–Ω–Ω—ã–º:</b>\n"
            f"üîç {analytics.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}\n\n"
            f"üîß <b>–†–µ—à–µ–Ω–∏—è:</b>\n"
            f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ SESSION_STRING (–≤–æ–∑–º–æ–∂–Ω–æ —É—Å—Ç–∞—Ä–µ–ª)\n"
            f"‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –∞–∫–∫–∞—É–Ω—Ç –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É\n"
            f"‚Ä¢ –î–ª—è –±–æ–ª—å—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –≤—Ä–µ–º—è\n"
            f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏",
            parse_mode='HTML'
        )
    else:
        await status_msg.edit_text(
            f"üìÜ <b>–ú–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç</b>\n"
            f"‚è∞ <b>–ü–µ—Ä–∏–æ–¥:</b> {start.strftime('%d.%m')} ‚Äî {end.strftime('%d.%m.%Y')}\n\n"
            f"‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ –º–µ—Å—è—Ü</b>\n\n"
            f"üîß <b>–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</b>\n"
            f"‚Ä¢ Telethon –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n"
            f"‚Ä¢ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É\n"
            f"‚Ä¢ –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –æ–±—ä–µ–º –¥–∞–Ω–Ω—ã—Ö\n"
            f"‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è API\n\n"
            f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /daily_report –∏–ª–∏ /charts –¥–ª—è –º–µ–Ω—å—à–∏—Ö –ø–µ—Ä–∏–æ–¥–æ–≤",
            parse_mode='HTML'
        )

async def main():
    """Main function to run the bot."""
    if not TELEGRAM_AVAILABLE:
        logger.error("‚ùå Telegram libraries not available. Please install python-telegram-bot")
        return

    if not BOT_TOKEN:
        logger.error("‚ùå BOT_TOKEN not set. Please configure your environment variables.")
        return

    # Initialize Telethon for advanced analytics
    telethon_init_success = await init_telethon()
    if telethon_init_success:
        logger.info("‚úÖ Telethon initialized successfully")
    else:
        logger.warning("‚ö†Ô∏è Telethon initialization failed - using limited analytics")

    # Create the Application
    application = Application.builder().token(BOT_TOKEN).build()

    # Add command handlers
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("status", status_command))
    application.add_handler(CommandHandler("channel_info", channel_info_command))
    application.add_handler(CommandHandler("summary", summary_command))
    application.add_handler(CommandHandler("growth", growth_command))
    application.add_handler(CommandHandler("insights", insights_command))
    application.add_handler(CommandHandler("charts", charts_command))
    application.add_handler(CommandHandler("analiz", analiz_command))
    application.add_handler(CommandHandler("daily_report", daily_report_command))
    application.add_handler(CommandHandler("monthly_report", monthly_report_command))
    application.add_handler(CommandHandler("smm", smm_command))
    application.add_handler(CommandHandler("export_csv", export_csv_command))
    application.add_handler(CommandHandler("export_google", export_google_command))
    
    # Add callback query handler for chart interactions
    application.add_handler(CallbackQueryHandler(handle_chart_callback))
    
    # Add handler for unknown commands
    application.add_handler(MessageHandler(filters.COMMAND, unknown_command))

    # Start HTTP server in a separate thread for Railway health checks
    # –ö–†–ò–¢–ò–ß–ù–û: HTTP —Å–µ—Ä–≤–µ—Ä –¥–æ–ª–∂–µ–Ω —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å –ü–ï–†–í–´–ú –¥–ª—è Railway healthcheck
    try:
        http_thread = threading.Thread(target=start_http_server, daemon=True)
        http_thread.start()
        
        # –î–∞–µ–º –≤—Ä–µ–º—è HTTP —Å–µ—Ä–≤–µ—Ä—É –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
        import time
        time.sleep(2)
        logger.info("‚úÖ HTTP health server started and ready")
    except Exception as e:
        logger.error(f"‚ùå CRITICAL: HTTP server failed to start: {e}")
        logger.error("üíÄ Railway healthcheck will FAIL without HTTP server")
        raise  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –µ—Å–ª–∏ HTTP —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è

    # Run the bot
    logger.info("üöÄ Starting Telegram bot...")
    
    # NEW APPROACH: Manual start/stop to avoid event loop conflicts
    try:
        # Initialize application manually
        await application.initialize()
        await application.start()
        
        # Start polling with updater (this doesn't create event loop)
        await application.updater.start_polling(drop_pending_updates=True)
        
        logger.info("‚úÖ Bot started successfully!")
        
        # Keep running forever (until process killed or exception)
        while True:
            await asyncio.sleep(1)
            
    except KeyboardInterrupt:
        logger.info("üëã Received shutdown signal")
    except Exception as e:
        logger.error(f"‚ùå Bot error: {e}")
        raise
    finally:
        # Clean shutdown
        logger.info("üîå Shutting down bot...")
        try:
            if application.updater.running:
                await application.updater.stop()
            await application.stop()
            await application.shutdown()
        except Exception as e:
            logger.error(f"‚ùå Shutdown error: {e}")
        logger.info("‚úÖ Bot stopped cleanly")

def run_bot():
    """Run the bot with Railway/Docker compatibility."""
    logger.info("üöÄ Starting TG-analiz bot...")
    
    try:
        # Simply use asyncio.run - this should work in Railway
        asyncio.run(main())
        
    except RuntimeError as e:
        if "cannot be called from a running event loop" in str(e) or "This event loop is already running" in str(e):
            logger.warning("‚ö†Ô∏è Event loop conflict detected - using alternative approach")
            
            # Alternative: get current loop or create new one
            try:
                loop = asyncio.get_event_loop()
                if loop.is_running():
                    logger.error("‚ùå Loop already running - this should not happen in Railway")
                    logger.error("üí° Try restarting Railway deployment")
                    raise
                else:
                    loop.run_until_complete(main())
            except RuntimeError:
                # Last resort: create completely new loop
                logger.warning("üîÑ Creating new event loop...")
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                try:
                    loop.run_until_complete(main())
                finally:
                    loop.close()
        else:
            raise
            
    except Exception as e:
        logger.error(f"‚ùå Critical error: {e}")
        raise

if __name__ == "__main__":
    run_bot()
