#!/usr/bin/env python3
"""
Telegram Analytics Bot - –®–∞–≥ 1: –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã + HTTP —Å–µ—Ä–≤–µ—Ä
"""
import os
import http.server
import socketserver
import logging
import threading
import asyncio
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class HealthHandler(http.server.BaseHTTPRequestHandler):
    def do_GET(self):
        logger.info(f"HTTP –∑–∞–ø—Ä–æ—Å: {self.path}")
        
        if self.path in ['/health', '/']:
            self.send_response(200)
            self.send_header('Content-Type', 'text/plain')
            self.end_headers()
            self.wfile.write(b'OK')
            logger.info("Health check —É—Å–ø–µ—à–Ω–æ")
        else:
            self.send_response(404)
            self.end_headers()
    
    def log_message(self, format, *args):
        logger.info(f"HTTP: {format % args}")

def start_health_server():
    """–ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è Railway health checks"""
    PORT = int(os.environ.get('PORT', 8000))
    logger.info(f"–ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
    
    def run_server():
        with socketserver.TCPServer(("", PORT), HealthHandler) as httpd:
            logger.info(f"HTTP —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –Ω–∞ 0.0.0.0:{PORT}")
            httpd.serve_forever()
    
    server_thread = threading.Thread(target=run_server, daemon=True)
    server_thread.start()
    return server_thread

async def start_telegram_bot():
    """–ó–∞–ø—É—Å–∫ –±–∞–∑–æ–≤–æ–≥–æ Telegram –±–æ—Ç–∞"""
    try:
        from telegram.ext import Application, CommandHandler
        from telegram import Update
        from telegram.ext import ContextTypes
        
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
        BOT_TOKEN = os.getenv('BOT_TOKEN')
        if not BOT_TOKEN:
            logger.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
            return
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞
        app = Application.builder().token(BOT_TOKEN).build()
        
        # –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
        async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            user_id = update.effective_user.id
            username = update.effective_user.username or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            
            welcome_text = f"""
üöÄ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Telegram Analytics Bot!**

–ü—Ä–∏–≤–µ—Ç, {username}! 

üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É –ø–æ–º–æ—â—å
/status - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
/ping - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏

üîß –°—Ç–∞—Ç—É—Å: **–ë–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è** (–®–∞–≥ 1/4)
‚úÖ HTTP —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç
‚úÖ Telegram –±–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω
‚è≥ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö - —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
‚è≥ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
‚è≥ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ - –≤ –ø–ª–∞–Ω–∞—Ö
            """
            
            await update.message.reply_text(welcome_text, parse_mode='Markdown')
            logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} ({username})")

        async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            await start_command(update, context)

        async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            status_text = """
ü§ñ **–°—Ç–∞—Ç—É—Å Telegram Analytics Bot**

‚úÖ HTTP —Å–µ—Ä–≤–µ—Ä: –†–∞–±–æ—Ç–∞–µ—Ç
‚úÖ Telegram API: –ü–æ–¥–∫–ª—é—á–µ–Ω  
‚úÖ Railway –¥–µ–ø–ª–æ–π: –ê–∫—Ç–∏–≤–µ–Ω
‚è≥ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞
‚è≥ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞: –ù–µ –∞–∫—Ç–∏–≤–Ω–∞
‚è≥ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: –ù–µ –∑–∞–ø—É—â–µ–Ω

üèóÔ∏è **–¢–µ–∫—É—â–∞—è —Å—Ç–∞–¥–∏—è**: –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã (1/4)
            """
            await update.message.reply_text(status_text, parse_mode='Markdown')

        async def ping_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            await update.message.reply_text("üèì Pong! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!")

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        app.add_handler(CommandHandler("start", start_command))
        app.add_handler(CommandHandler("help", help_command))
        app.add_handler(CommandHandler("status", status_command))
        app.add_handler(CommandHandler("ping", ping_command))
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        await app.initialize()
        await app.start()
        await app.updater.start_polling()
        
        logger.info("‚úÖ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
        # –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
        while True:
            await asyncio.sleep(60)
            
    except ImportError as e:
        logger.warning(f"Telegram –±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–Ω–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π): {e}")
        logger.info("–†–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ –∫–∞–∫ HTTP —Å–µ—Ä–≤–µ—Ä")
        while True:
            await asyncio.sleep(60)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        logger.info("–ü—Ä–æ–¥–æ–ª–∂–∞—é —Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ HTTP —Å–µ—Ä–≤–µ—Ä")
        while True:
            await asyncio.sleep(60)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("=== üöÄ –ó–∞–ø—É—Å–∫ Telegram Analytics Bot (–®–∞–≥ 1/4) ===")
    
    # 1. HTTP —Å–µ—Ä–≤–µ—Ä –ü–ï–†–í–´–ú (–∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è Railway)
    start_health_server()
    logger.info("‚úÖ HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
    
    # –ü–∞—É–∑–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    await asyncio.sleep(2)
    
    # 2. Telegram –±–æ—Ç
    await start_telegram_bot()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.info("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é HTTP —Å–µ—Ä–≤–µ—Ä...")
import os
import http.server
import socketserver
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class HealthOnlyHandler(http.server.BaseHTTPRequestHandler):
    def do_GET(self):
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: {self.path}")
        
        # –û—Ç–≤–µ—á–∞–µ–º OK –Ω–∞ –ª—é–±–æ–π –∑–∞–ø—Ä–æ—Å
        self.send_response(200)
        self.send_header('Content-Type', 'text/plain')
        self.end_headers()
        self.wfile.write(b'OK')
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç 200 OK")
    
    def log_message(self, format, *args):
        logger.info(format % args)

if __name__ == "__main__":
    PORT = int(os.environ.get('PORT', 8000))
    
    logger.info(f"–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
    logger.info(f"–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è PORT –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {os.environ.get('PORT', '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê')}")
    
    with socketserver.TCPServer(("", PORT), HealthOnlyHandler) as httpd:
        logger.info(f"–°–µ—Ä–≤–µ—Ä —Å–ª—É—à–∞–µ—Ç –Ω–∞ 0.0.0.0:{PORT}")
        try:
            httpd.serve_forever()
        except KeyboardInterrupt:
            logger.info("–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
