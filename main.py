import asyncio
import logging
import os
from datetime import datetime, timedelta
from telegram.ext import Application, CommandHandler, MessageHandler, filters
from telegram import Update
from telegram.ext import ContextTypes
import schedule
import time
import threading
from aiohttp import web
import aiohttp_cors

from config import Config
from database import Database, TelegramGroup, UserSubscription
from analytics import AnalyticsCollector
from reports import ReportGenerator

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class TelegramAnalyticsBot:
    def __init__(self):
        self.config = Config()
        self.db = Database(self.config.database_url)
        self.analytics = AnalyticsCollector(self.config, self.db)
        self.reports = ReportGenerator(self.db)
        self.app = None
        
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = update.effective_user.id
        welcome_text = """
üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Telegram Analytics Bot!

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/help - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å
/daily - –ø–æ–ª—É—á–∏—Ç—å –¥–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç
/weekly - –ø–æ–ª—É—á–∏—Ç—å –Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
/monthly - –ø–æ–ª—É—á–∏—Ç—å –º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç
/subscribe daily|weekly|monthly - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ—Ç—á–µ—Ç—ã
/unsubscribe daily|weekly|monthly - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –æ—Ç—á–µ—Ç–æ–≤
/groups - –ø–æ–∫–∞–∑–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –≥—Ä—É–ø–ø—ã
        """
        
        if user_id in self.config.admin_users:
            welcome_text += """
üëë –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:
/add_group <group_id> - –¥–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
/remove_group <group_id> - —É–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
/stats - –ø–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            """
        
        await update.message.reply_text(welcome_text)

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        await self.start_command(update, context)

    async def daily_report(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        try:
            report = await self.reports.generate_daily_report()
            await update.message.reply_text(report, parse_mode='HTML')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞")

    async def weekly_report(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        try:
            report = await self.reports.generate_weekly_report()
            await update.message.reply_text(report, parse_mode='HTML')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞")

    async def monthly_report(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        try:
            report = await self.reports.generate_monthly_report()
            await update.message.reply_text(report, parse_mode='HTML')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞")

    async def subscribe_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ—Ç—á–µ—Ç—ã"""
        if not context.args:
            await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞: daily, weekly –∏–ª–∏ monthly")
            return
            
        report_type = context.args[0].lower()
        if report_type not in ['daily', 'weekly', 'monthly']:
            await update.message.reply_text("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã: daily, weekly, monthly")
            return
            
        user_id = update.effective_user.id
        await self.db.subscribe_user(user_id, report_type)
        await update.message.reply_text(f"–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ {report_type} –æ—Ç—á–µ—Ç—ã!")

    async def unsubscribe_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø–∏—Å–∫–∞ –æ—Ç –æ—Ç—á–µ—Ç–æ–≤"""
        if not context.args:
            await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞: daily, weekly –∏–ª–∏ monthly")
            return
            
        report_type = context.args[0].lower()
        user_id = update.effective_user.id
        await self.db.unsubscribe_user(user_id, report_type)
        await update.message.reply_text(f"–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç {report_type} –æ—Ç—á–µ—Ç–æ–≤!")

    async def error_handler(self, update: object, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"Exception while handling an update: {context.error}")

    def collect_analytics_job(self):
        """–ó–∞–¥–∞—á–∞ –¥–ª—è —Å–±–æ—Ä–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        asyncio.run(self.analytics.collect_all_data())

    def send_daily_reports_job(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
        asyncio.run(self.send_scheduled_reports('daily'))

    def send_weekly_reports_job(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
        asyncio.run(self.send_scheduled_reports('weekly'))

    def send_monthly_reports_job(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ—Å—è—á–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
        asyncio.run(self.send_scheduled_reports('monthly'))

    async def send_scheduled_reports(self, report_type: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤"""
        try:
            subscribers = await self.db.get_subscribers(report_type)
            
            if report_type == 'daily':
                report = await self.reports.generate_daily_report()
            elif report_type == 'weekly':
                report = await self.reports.generate_weekly_report()
            else:
                report = await self.reports.generate_monthly_report()
            
            for user_id in subscribers:
                try:
                    await self.app.bot.send_message(
                        chat_id=user_id,
                        text=report,
                        parse_mode='HTML'
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {report_type} –æ—Ç—á–µ—Ç–æ–≤: {e}")

    def schedule_jobs(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á"""
        # –°–±–æ—Ä –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∫–∞–∂–¥—ã–π —á–∞—Å
        schedule.every().hour.do(self.collect_analytics_job)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–æ–≤
        schedule.every().day.at("09:00").do(self.send_daily_reports_job)
        schedule.every().monday.at("09:00").do(self.send_weekly_reports_job)
        schedule.every().month.do(self.send_monthly_reports_job)
        
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

    def run_scheduler(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        while True:
            schedule.run_pending()
            time.sleep(60)

    async def health_check(self, request):
        """Health check endpoint –¥–ª—è Railway"""
        return web.json_response({
            'status': 'healthy',
            'timestamp': datetime.now().isoformat(),
            'bot_running': True
        })

    async def root_handler(self, request):
        """Root endpoint"""
        return web.Response(text="Telegram Analytics Bot is running")

    async def start_web_server(self):
        """–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è health checks"""
        app = web.Application()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
        cors = aiohttp_cors.setup(app, defaults={
            "*": aiohttp_cors.ResourceOptions(
                allow_credentials=True,
                expose_headers="*",
                allow_headers="*",
                allow_methods="*"
            )
        })
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤
        app.router.add_get('/', self.root_handler)
        app.router.add_get('/health', self.health_check)
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ CORS
        for route in list(app.router.routes()):
            cors.add(route)
        
        # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
        port = int(os.getenv('PORT', 8000))
        runner = web.AppRunner(app)
        await runner.setup()
        site = web.TCPSite(runner, '0.0.0.0', port)
        await site.start()
        logger.info(f"HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")

    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            await self.db.init_db()
            logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞
            self.app = Application.builder().token(self.config.bot_token).build()
            
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
            self.app.add_handler(CommandHandler("start", self.start_command))
            self.app.add_handler(CommandHandler("help", self.help_command))
            self.app.add_handler(CommandHandler("daily", self.daily_report))
            self.app.add_handler(CommandHandler("weekly", self.weekly_report))
            self.app.add_handler(CommandHandler("monthly", self.monthly_report))
            self.app.add_handler(CommandHandler("subscribe", self.subscribe_command))
            self.app.add_handler(CommandHandler("unsubscribe", self.unsubscribe_command))
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
            self.app.add_error_handler(self.error_handler)
            
            logger.info("–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
            self.schedule_jobs()
            scheduler_thread = threading.Thread(target=self.run_scheduler, daemon=True)
            scheduler_thread.start()
            logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
            
            # –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
            await self.start_web_server()
            
            # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
            await self.app.initialize()
            await self.app.start()
            await self.app.updater.start_polling()
            
            logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
            while True:
                await asyncio.sleep(1)
                
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            raise

async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    bot = TelegramAnalyticsBot()
    await bot.run()

if __name__ == "__main__":
    asyncio.run(main())
        await self.application.updater.start_polling()
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç...")
        
        try:
            # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            await asyncio.Event().wait()
        except KeyboardInterrupt:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
        finally:
            await self.shutdown()

    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")
        
        try:
            if self.application:
                await self.application.updater.stop()
                await self.application.stop()
                await self.application.shutdown()
            
            if self.telethon_client:
                await self.telethon_client.disconnect()
            
            if self.web_runner:
                await self.web_runner.cleanup()
                
        except Exception as e:
            ErrorHandler.log_error(e, "Bot shutdown")
        
        logger.info("–ë–æ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    bot = TelegramAnalyticsBot()
    
    try:
        asyncio.run(bot.run())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
