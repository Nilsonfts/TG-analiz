#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–æ—Ç–∞
"""
import sys
import os

def test_imports():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã –≤—Å–µ—Ö –∫–ª—é—á–µ–≤—ã—Ö –º–æ–¥—É–ª–µ–π"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã...")
    
    try:
        import aiogram
        print("‚úÖ aiogram")
    except ImportError as e:
        print(f"‚ùå aiogram: {e}")
        return False
    
    try:
        import telegram
        print("‚úÖ python-telegram-bot")
    except ImportError as e:
        print(f"‚ùå python-telegram-bot: {e}")
        return False
    
    try:
        import apscheduler
        print("‚úÖ apscheduler")
    except ImportError as e:
        print(f"‚ùå apscheduler: {e}")
        return False
    
    try:
        import telethon
        print("‚úÖ telethon")
    except ImportError as e:
        print(f"‚ùå telethon: {e}")
        return False
    
    try:
        import sqlalchemy
        print("‚úÖ sqlalchemy")
    except ImportError as e:
        print(f"‚ùå sqlalchemy: {e}")
        return False
    
    try:
        import matplotlib
        print("‚úÖ matplotlib")
    except ImportError as e:
        print(f"‚ùå matplotlib: {e}")
        return False
    
    return True

def test_env_variables():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("\nüîß –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    required_vars = [
        'BOT_TOKEN',
        'API_ID', 
        'API_HASH',
        'CHANNEL_ID',
        'ADMIN_USERS'
    ]
    
    missing_vars = []
    
    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å .env —Ñ–∞–π–ª
    try:
        from dotenv import load_dotenv
        load_dotenv()
        print("‚úÖ .env —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .env: {e}")
    
    for var in required_vars:
        value = os.getenv(var)
        if not value or value == "**ACTION_REQUIRED**":
            print(f"‚ùå {var}: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
            missing_vars.append(var)
        else:
            # –°–∫—Ä—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            if 'TOKEN' in var or 'HASH' in var:
                print(f"‚úÖ {var}: –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ (***)")
            else:
                print(f"‚úÖ {var}: {value}")
    
    return len(missing_vars) == 0, missing_vars

def test_file_structure():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–æ–≤"""
    print("\nüìÅ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–æ–≤...")
    
    required_files = [
        'main.py',
        'requirements.txt', 
        'Dockerfile',
        'Procfile',
        '.env'
    ]
    
    missing_files = []
    
    for file in required_files:
        if os.path.exists(file):
            print(f"‚úÖ {file}")
        else:
            print(f"‚ùå {file}")
            missing_files.append(file)
    
    return len(missing_files) == 0, missing_files

def main():
    print("üöÄ –¢–ï–°–¢ –ö–û–ú–ü–û–ù–ï–ù–¢–û–í TG-ANALIZ –ë–û–¢–ê\n")
    
    # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤
    imports_ok = test_imports()
    
    # –¢–µ—Å—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    env_ok, missing_vars = test_env_variables()
    
    # –¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤
    files_ok, missing_files = test_file_structure()
    
    print("\n" + "="*50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("="*50)
    
    if imports_ok:
        print("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è")
    else:
        print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–º–ø–æ—Ä—Ç–∞–º–∏ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ requirements.txt")
    
    if files_ok:
        print("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –Ω–∞ –º–µ—Å—Ç–µ")
    else:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {', '.join(missing_files)}")
    
    if env_ok:
        print("‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    else:
        print(f"‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã: {', '.join(missing_vars)}")
        print("\nüí° –î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
        print("1. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω —É @BotFather")
        print("2. –ü–æ–ª—É—á–∏—Ç–µ API –¥–∞–Ω–Ω—ã–µ –Ω–∞ https://my.telegram.org")
        print("3. –û–±–Ω–æ–≤–∏—Ç–µ —Ñ–∞–π–ª .env")
    
    print("\n" + "="*50)
    
    if imports_ok and files_ok and env_ok:
        print("üéâ –í–°–ï –ì–û–¢–û–í–û! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É!")
        return 0
    else:
        print("‚ö†Ô∏è –¢–†–ï–ë–£–Æ–¢–°–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º")
        return 1

if __name__ == "__main__":
    sys.exit(main())
