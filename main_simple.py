#!/usr/bin/env python3
"""
–°–£–ü–ï–†-–ü–†–û–°–¢–û–ô HTTP –±–æ—Ç –¥–ª—è Railway (–±–µ–∑ telegram –±–∏–±–ª–∏–æ—Ç–µ–∫–∏)
"""
import asyncio
import json
import logging
import os
import sys
import urllib.request
import urllib.parse
from http.server import HTTPServer, BaseHTTPRequestHandler

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

PORT = int(os.getenv("PORT", "8080"))
BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()

logger.info("üöÄ –°–£–ü–ï–†-–ü–†–û–°–¢–û–ô –ë–û–¢ –°–¢–ê–†–¢!")
logger.info(f"PORT: {PORT}")
logger.info(f"BOT_TOKEN: {'–î–ê' if BOT_TOKEN else '–ù–ï–¢'}")

class SimpleBot:
    def __init__(self, token):
        self.token = token
        self.api_url = f"https://api.telegram.org/bot{token}"
    
    def send_message(self, chat_id, text):
        try:
            data = {
                'chat_id': chat_id,
                'text': text,
                'parse_mode': 'HTML'
            }
            
            post_data = urllib.parse.urlencode(data).encode()
            req = urllib.request.Request(
                f"{self.api_url}/sendMessage",
                data=post_data,
                headers={'Content-Type': 'application/x-www-form-urlencoded'}
            )
            
            with urllib.request.urlopen(req, timeout=10) as response:
                result = json.loads(response.read().decode())
                logger.info(f"‚úÖ Message sent: {result.get('ok', False)}")
                return result
                
        except Exception as e:
            logger.error(f"‚ùå Send error: {e}")
            return None
    
    def get_updates(self, offset=None):
        try:
            url = f"{self.api_url}/getUpdates"
            if offset:
                url += f"?offset={offset}"
            
            with urllib.request.urlopen(url, timeout=10) as response:
                result = json.loads(response.read().decode())
                return result.get('result', [])
                
        except Exception as e:
            logger.error(f"‚ùå Updates error: {e}")
            return []

class BotHandler(BaseHTTPRequestHandler):
    def log_message(self, format, *args):
        pass
    
    def do_GET(self):
        if self.path == '/':
            self.send_response(200)
            self.send_header("Content-Type", "application/json")
            self.end_headers()
            
            data = {
                "status": "ok", 
                "healthy": True, 
                "bot": "simple",
                "token_set": bool(BOT_TOKEN)
            }
            self.wfile.write(json.dumps(data, indent=2).encode())
            
        elif self.path == '/test':
            self.send_response(200)
            self.send_header("Content-Type", "text/html")
            self.end_headers()
            
            html = """
            <h1>ü§ñ TG-analiz Bot Test</h1>
            <p>‚úÖ Health server —Ä–∞–±–æ—Ç–∞–µ—Ç</p>
            <p>‚úÖ Railway –¥–µ–ø–ª–æ–π —É—Å–ø–µ—à–µ–Ω</p>
            <p>‚úÖ –ü–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ</p>
            <h2>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:</h2>
            <ol>
                <li>–£–¥–∞–ª–∏—Ç–µ webhook: <a href="https://api.telegram.org/bot{}/deleteWebhook" target="_blank">–£–¥–∞–ª–∏—Ç—å</a></li>
                <li>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É /start</li>
                <li>–ï—Å–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –ø—Ä–æ–±–ª–µ–º–∞ –≤ —Ç–æ–∫–µ–Ω–µ</li>
            </ol>
            """.format(BOT_TOKEN if BOT_TOKEN else "YOUR_TOKEN")
            
            self.wfile.write(html.encode())
        else:
            self.send_response(404)
            self.end_headers()

async def bot_polling():
    if not BOT_TOKEN:
        logger.error("‚ùå NO BOT_TOKEN - —Ç–æ–ª—å–∫–æ health —Å–µ—Ä–≤–µ—Ä")
        return
    
    bot = SimpleBot(BOT_TOKEN)
    offset = None
    
    logger.info("ü§ñ POLLING START - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è...")
    
    while True:
        try:
            updates = bot.get_updates(offset)
            
            for update in updates:
                offset = update['update_id'] + 1
                
                if 'message' in update:
                    message = update['message']
                    chat_id = message['chat']['id']
                    text = message.get('text', '')
                    user_id = message['from']['id']
                    
                    logger.info(f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {text}")
                    
                    if text == '/start':
                        response = (
                            "üéâ <b>–°–£–ü–ï–†-–ü–†–û–°–¢–û–ô –ë–û–¢ –†–ê–ë–û–¢–ê–ï–¢!</b>\n\n"
                            "‚úÖ Railway –¥–µ–ø–ª–æ–π: –û–ö\n"
                            "‚úÖ HTTP —Å–µ—Ä–≤–µ—Ä: –û–ö\n"
                            "‚úÖ Telegram API: –û–ö\n"
                            "‚úÖ Polling: –û–ö\n\n"
                            f"üë§ –í–∞—à ID: {user_id}\n"
                            f"üí¨ –ß–∞—Ç ID: {chat_id}\n\n"
                            "üöÄ <b>–ü–†–û–ë–õ–ï–ú–ê –†–ï–®–ï–ù–ê!</b>"
                        )
                        bot.send_message(chat_id, response)
                        
                    elif text == '/test':
                        response = (
                            "üß™ <b>–¢–ï–°–¢ –£–°–ü–ï–®–ï–ù!</b>\n\n"
                            "‚úÖ –ë–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω–æ\n"
                            "‚úÖ HTTP polling —Ä–∞–±–æ—Ç–∞–µ—Ç\n"
                            "‚úÖ Railway —Å—Ç–∞–±–∏–ª–µ–Ω\n\n"
                            "üéØ <b>–í–°–ï –û–¢–õ–ò–ß–ù–û!</b>"
                        )
                        bot.send_message(chat_id, response)
                        
                    elif text == '/help':
                        response = (
                            "üìã <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n\n"
                            "‚Ä¢ /start - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã\n"
                            "‚Ä¢ /test - –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞\n"
                            "‚Ä¢ /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
                            "‚úÖ <b>–í—Å–µ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç!</b>"
                        )
                        bot.send_message(chat_id, response)
            
            await asyncio.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            
        except Exception as e:
            logger.error(f"‚ùå Polling error: {e}")
            await asyncio.sleep(5)

async def main():
    logger.info("üöÄ –ó–ê–ü–£–°–ö –ì–õ–ê–í–ù–û–ô –§–£–ù–ö–¶–ò–ò")
    
    # HTTP —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ
    import threading
    server = HTTPServer(("0.0.0.0", PORT), BotHandler)
    server_thread = threading.Thread(target=server.serve_forever, daemon=True)
    server_thread.start()
    logger.info(f"üåê HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
    
    # Telegram polling
    await bot_polling()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("‚õî –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    except Exception as e:
        logger.error(f"üí• –û–®–ò–ë–ö–ê: {e}")
        sys.exit(1)

def start_health_server():
    """–ó–∞–ø—É—Å–∫ health check —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        server = HTTPServer(("0.0.0.0", PORT), HealthHandler)
        logger.info(f"‚úÖ Health server running on port {PORT}")
        server.serve_forever()
    except Exception as e:
        logger.error(f"‚ùå Health server error: {e}")

async def init_telegram_bot():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞ —Å –ü–û–õ–ù–´–ú–ò –∫–æ–º–∞–Ω–¥–∞–º–∏"""
    try:
        from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
        from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
        
        if not BOT_TOKEN:
            logger.warning("‚ö†Ô∏è BOT_TOKEN not set!")
            return None
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app = Application.builder().token(BOT_TOKEN).build()
        
        # /start –∫–æ–º–∞–Ω–¥–∞
        async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            await update.message.reply_text(
                "üöÄ <b>TG-analiz Bot - –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è!</b>\n\n"
                "‚úÖ Railway –¥–µ–ø–ª–æ–π —Ä–∞–±–æ—Ç–∞–µ—Ç\n"
                "ü§ñ –í—Å–µ –∫–æ–º–∞–Ω–¥—ã –∞–∫—Ç–∏–≤–Ω—ã\n"
                "üìä –ì–æ—Ç–æ–≤ –∫ –∞–Ω–∞–ª–∏–∑—É –∫–∞–Ω–∞–ª–æ–≤\n\n"
                "üìã –ö–æ–º–∞–Ω–¥—ã:\n"
                "‚Ä¢ /summary - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–∞\n"
                "‚Ä¢ /growth - –†–æ—Å—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n" 
                "‚Ä¢ /charts - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏\n"
                "‚Ä¢ /help - –°–ø—Ä–∞–≤–∫–∞\n\n"
                "üéâ –ë–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω!",
                parse_mode='HTML'
            )
        
        # /summary –∫–æ–º–∞–Ω–¥–∞
        async def summary_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            await update.message.reply_text(
                "üìä <b>–°–≤–æ–¥–∫–∞ –ø–æ –∫–∞–Ω–∞–ª—É</b>\n\n"
                "üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: 15,247 (+127 –∑–∞ –¥–µ–Ω—å)\n"
                "üìà –†–æ—Å—Ç: +0.8% –∑–∞ –Ω–µ–¥–µ–ª—é\n"
                "‚ö° –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: 45,230 (—Å—Ä–µ–¥–Ω–∏–µ)\n"
                "üéØ –û—Ö–≤–∞—Ç: 78.5% –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n"
                "üîÑ –í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å: 12.3%\n\n"
                "üìà <i>–î–µ–º–æ –¥–∞–Ω–Ω—ã–µ. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.</i>",
                parse_mode='HTML'
            )
        
        # /growth –∫–æ–º–∞–Ω–¥–∞ 
        async def growth_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            await update.message.reply_text(
                "üìà <b>–†–æ—Å—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ (7 –¥–Ω–µ–π)</b>\n\n"
                "üìÖ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
                "‚Ä¢ –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫: +45 üë•\n"
                "‚Ä¢ –í—Ç–æ—Ä–Ω–∏–∫: +38 üìä\n"
                "‚Ä¢ –°—Ä–µ–¥–∞: +52 üöÄ\n"
                "‚Ä¢ –ß–µ—Ç–≤–µ—Ä–≥: +41 üìà\n"
                "‚Ä¢ –ü—è—Ç–Ω–∏—Ü–∞: +67 üéâ\n"
                "‚Ä¢ –°—É–±–±–æ—Ç–∞: +34 üì±\n"
                "‚Ä¢ –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ: +28 ‚≠ê\n\n"
                "üìä <b>–ò—Ç–æ–≥–æ:</b> +305 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n"
                "üèÜ <b>–õ—É—á—à–∏–π –¥–µ–Ω—å:</b> –ü—è—Ç–Ω–∏—Ü–∞ (+67)",
                parse_mode='HTML'
            )
        
        # /charts –∫–æ–º–∞–Ω–¥–∞ —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
        async def charts_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            keyboard = [
                [InlineKeyboardButton("üìà –†–æ—Å—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤", callback_data="chart_growth")],
                [InlineKeyboardButton("‚è∞ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º", callback_data="chart_activity")],
                [InlineKeyboardButton("üéØ –ò—Å—Ç–æ—á–Ω–∏–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞", callback_data="chart_traffic")],
                [InlineKeyboardButton("üìä –ü–æ–ª–Ω—ã–π –¥–∞—à–±–æ—Ä–¥", callback_data="chart_dashboard")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "üìä <b>–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏:",
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
        async def handle_chart_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
            query = update.callback_query
            await query.answer()
            
            chart_type = query.data.replace("chart_", "")
            
            messages = {
                "growth": "üìà <b>–ì—Ä–∞—Ñ–∏–∫ —Ä–æ—Å—Ç–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤</b>\n\nüéØ –¢—Ä–µ–Ω–¥: –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π\nüìä 30-–¥–Ω–µ–≤–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ –≥–æ—Ç–æ–≤–∞",
                "activity": "‚è∞ <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º</b>\n\nüïê –ü–∏–∫: 12:00, 18:00, 21:00\nüì± –ê–Ω–∞–ª–∏–∑ 7 –¥–Ω–µ–π", 
                "traffic": "üéØ <b>–ò—Å—Ç–æ—á–Ω–∏–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞</b>\n\nüîó URL: 45%\nüîç –ü–æ–∏—Å–∫: 30%\nüë• –î—Ä—É–≥–∏–µ –∫–∞–Ω–∞–ª—ã: 25%",
                "dashboard": "üéõ <b>–ü–æ–ª–Ω—ã–π –¥–∞—à–±–æ—Ä–¥</b>\n\nüìä –í—Å–µ –º–µ—Ç—Ä–∏–∫–∏ —Å–æ–±—Ä–∞–Ω—ã\n‚úÖ –ì–æ—Ç–æ–≤ –∫ –∞–Ω–∞–ª–∏–∑—É"
            }
            
            await query.edit_message_text(
                f"{messages.get(chart_type, 'üìä –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫...')}\n\n"
                "üöÄ <i>Railway –¥–µ–ø–ª–æ–π —É—Å–ø–µ—à–µ–Ω! –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç.</i>",
                parse_mode='HTML'
            )
        
        # /help –∫–æ–º–∞–Ω–¥–∞
        async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            await update.message.reply_text(
                "‚ùì <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ TG-analiz Bot</b>\n\n"
                "üöÄ <b>–°—Ç–∞—Ç—É—Å:</b> Railway –¥–µ–ø–ª–æ–π –∞–∫—Ç–∏–≤–µ–Ω\n\n"
                "üìä <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
                "‚Ä¢ /start - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n"
                "‚Ä¢ /summary - –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                "‚Ä¢ /growth - –ê–Ω–∞–ª–∏–∑ —Ä–æ—Å—Ç–∞\n"
                "‚Ä¢ /charts - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏\n"
                "‚Ä¢ /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
                "üîß <b>–î–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π:</b>\n"
                "–î–æ–±–∞–≤—å—Ç–µ –≤ Railway Variables:\n"
                "‚Ä¢ CHANNEL_ID - ID –∫–∞–Ω–∞–ª–∞\n"
                "‚Ä¢ API_ID - Telegram API\n"
                "‚Ä¢ API_HASH - Telegram API Hash\n\n"
                "üí° <b>–í—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!</b> üéâ",
                parse_mode='HTML'
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã
        app.add_handler(CommandHandler("start", start_command))
        app.add_handler(CommandHandler("summary", summary_command))
        app.add_handler(CommandHandler("growth", growth_command))
        app.add_handler(CommandHandler("charts", charts_command))
        app.add_handler(CommandHandler("help", help_command))
        app.add_handler(CallbackQueryHandler(handle_chart_callback, pattern="^chart_"))
        
        logger.info("‚úÖ Telegram bot initialized with ALL commands")
        return app
        
    except ImportError as e:
        logger.error(f"‚ùå Telegram import error: {e}")
        return None
    except Exception as e:
        logger.error(f"‚ùå Bot initialization error: {e}")
        return None

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ Starting TG-analiz bot...")
    logger.info(f"üîß Port: {PORT}")
    logger.info(f"ü§ñ Bot token: {'‚úÖ Set' if BOT_TOKEN else '‚ùå Missing'}")
    
    # –í–°–ï–ì–î–ê –∑–∞–ø—É—Å–∫–∞–µ–º health server –ø–µ—Ä–≤—ã–º
    health_thread = threading.Thread(target=start_health_server, daemon=True)
    health_thread.start()
    logger.info("üåê Health check server started")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram bot
    bot_app = await init_telegram_bot()
    
    if bot_app and BOT_TOKEN:
        logger.info("ü§ñ Starting Telegram bot with ALL commands...")
        await bot_app.run_polling(allowed_updates=["message", "callback_query"])
    else:
        logger.warning("üè• Running in health-check-only mode")
        try:
            await asyncio.sleep(float('inf'))
        except KeyboardInterrupt:
            logger.info("üëã Graceful shutdown")

if __name__ == "__main__":
    asyncio.run(main())
