#!/usr/bin/env python3
"""
–ü–û–õ–ù–´–ô TG-BOT + HEALTH CHECK –¥–ª—è Railway
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç health server –∏ Telegram bot –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ
"""
import asyncio
import json
import logging
import os
import threading
from http.server import HTTPServer, BaseHTTPRequestHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

PORT = int(os.getenv("PORT", "8080"))
BOT_TOKEN = os.getenv("BOT_TOKEN")

# Health Check Handler
class HealthHandler(BaseHTTPRequestHandler):
    def log_message(self, format, *args):
        pass
    
    def do_GET(self):
        self.send_response(200)
        self.send_header("Content-Type", "application/json")
        self.send_header("Access-Control-Allow-Origin", "*")
        self.end_headers()
        
        response = {
            "status": "ok", 
            "healthy": True, 
            "service": "tg-bot",
            "bot_token_set": bool(BOT_TOKEN),
            "telegram_ready": True
        }
        self.wfile.write(json.dumps(response).encode())

def start_health_server():
    """–ó–∞–ø—É—Å–∫ health check —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    try:
        server = HTTPServer(("0.0.0.0", PORT), HealthHandler)
        logger.info(f"‚úÖ Health server running on port {PORT}")
        logger.info(f"üè• Health check: http://0.0.0.0:{PORT}/")
        server.serve_forever()
    except Exception as e:
        logger.error(f"‚ùå Health server error: {e}")

# Telegram Bot —Ñ—É–Ω–∫—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏)
async def init_telegram_bot():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞"""
    try:
        from telegram import Update
        from telegram.ext import Application, CommandHandler, ContextTypes
        
        if not BOT_TOKEN:
            logger.warning("‚ö†Ô∏è BOT_TOKEN not set, running health check only")
            return None
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app = Application.builder().token(BOT_TOKEN).build()
        
        # –ö–æ–º–∞–Ω–¥–∞ /start
        async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            await update.message.reply_text(
                "üöÄ TG-analiz Bot —Ä–∞–±–æ—Ç–∞–µ—Ç!\n\n"
                "‚úÖ Railway –¥–µ–ø–ª–æ–π —É—Å–ø–µ—à–µ–Ω\n"
                "üè• Health check –∞–∫—Ç–∏–≤–µ–Ω\n"
                "üìä –ì–æ—Ç–æ–≤ –∫ –∞–Ω–∞–ª–∏–∑—É –∫–∞–Ω–∞–ª–æ–≤\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥"
            )
        
        # –ö–æ–º–∞–Ω–¥–∞ /help
        async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            await update.message.reply_text(
                "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
                "‚Ä¢ /start - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n"
                "‚Ä¢ /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
                "‚Ä¢ /status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n\n"
                "üöÄ Railway –¥–µ–ø–ª–æ–π —Ä–∞–±–æ—Ç–∞–µ—Ç!"
            )
        
        # –ö–æ–º–∞–Ω–¥–∞ /status
        async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            await update.message.reply_text(
                "üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:\n\n"
                "‚úÖ Railway: –ê–∫—Ç–∏–≤–µ–Ω\n"
                "‚úÖ Health Check: –†–∞–±–æ—Ç–∞–µ—Ç\n"
                "‚úÖ Telegram Bot: –û–Ω–ª–∞–π–Ω\n"
                f"üîß Port: {PORT}\n\n"
                "üéâ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –≤ –Ω–æ—Ä–º–µ!"
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        app.add_handler(CommandHandler("start", start_command))
        app.add_handler(CommandHandler("help", help_command))
        app.add_handler(CommandHandler("status", status_command))
        
        logger.info("‚úÖ Telegram bot initialized")
        return app
        
    except ImportError:
        logger.warning("‚ö†Ô∏è Telegram libraries not available, health check only")
        return None
    except Exception as e:
        logger.error(f"‚ùå Telegram bot error: {e}")
        return None

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ Starting TG-analiz with health check...")
    
    # –í–°–ï–ì–î–ê –∑–∞–ø—É—Å–∫–∞–µ–º health server –ø–µ—Ä–≤—ã–º
    health_thread = threading.Thread(target=start_health_server, daemon=True)
    health_thread.start()
    
    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å Telegram bot
    bot_app = await init_telegram_bot()
    
    if bot_app:
        logger.info("ü§ñ Starting Telegram bot...")
        await bot_app.run_polling(allowed_updates=["message"])
    else:
        logger.info("üè• Running in health-check-only mode")
        # –î–µ—Ä–∂–∏–º –ø—Ä–æ—Ü–µ—Å—Å –∂–∏–≤—ã–º –¥–ª—è health check
        try:
            await asyncio.sleep(float('inf'))
        except KeyboardInterrupt:
            logger.info("üëã Graceful shutdown")

if __name__ == "__main__":
    asyncio.run(main())
