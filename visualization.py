import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import io
import logging
from typing import Dict, List, Any, Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ GUI
import matplotlib
matplotlib.use('Agg')

logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è
plt.style.use('seaborn-v0_8')
sns.set_palette("husl")

class ChartGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≥—Ä–∞—Ñ–∏–∫–æ–≤ –¥–ª—è Telegram –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    
    def __init__(self):
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à—Ä–∏—Ñ—Ç–æ–≤ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
        plt.rcParams['font.family'] = ['DejaVu Sans', 'Arial Unicode MS', 'sans-serif']
        plt.rcParams['axes.unicode_minus'] = False
        
    def create_activity_chart(self, hourly_data: Dict[str, int], title: str = "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º") -> io.BytesIO:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ —á–∞—Å–∞–º"""
        try:
            fig, ax = plt.subplots(figsize=(12, 6))
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            hours = list(range(24))
            activity = [hourly_data.get(str(h), 0) for h in hours]
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
            bars = ax.bar(hours, activity, color='skyblue', alpha=0.7, edgecolor='navy', linewidth=0.5)
            
            # –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
            ax.set_title(title, fontsize=16, fontweight='bold', pad=20)
            ax.set_xlabel('–ß–∞—Å –¥–Ω—è', fontsize=12)
            ax.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π', fontsize=12)
            ax.set_xticks(hours)
            ax.grid(True, alpha=0.3)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
            for bar, value in zip(bars, activity):
                if value > 0:
                    ax.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.1,
                           str(value), ha='center', va='bottom', fontsize=9)
            
            plt.tight_layout()
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ BytesIO
            buf = io.BytesIO()
            plt.savefig(buf, format='png', dpi=300, bbox_inches='tight')
            buf.seek(0)
            plt.close()
            
            return buf
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
            plt.close()
            return None
    
    def create_top_users_chart(self, top_users: List[Dict], title: str = "–¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π") -> io.BytesIO:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            if not top_users:
                return None
                
            fig, ax = plt.subplots(figsize=(10, 6))
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            usernames = []
            messages = []
            
            for user in top_users[:10]:  # –¢–æ–ø 10
                username = user.get('username') or f"User_{user.get('user_id', 'Unknown')}"
                if len(username) > 15:
                    username = username[:12] + "..."
                usernames.append(username)
                messages.append(user.get('message_count', 0))
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
            bars = ax.barh(usernames, messages, color='lightcoral', alpha=0.8, edgecolor='darkred')
            
            # –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
            ax.set_title(title, fontsize=16, fontweight='bold', pad=20)
            ax.set_xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π', fontsize=12)
            ax.grid(True, alpha=0.3, axis='x')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
            for bar, value in zip(bars, messages):
                ax.text(bar.get_width() + 0.1, bar.get_y() + bar.get_height()/2,
                       str(value), ha='left', va='center', fontsize=10)
            
            plt.tight_layout()
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ BytesIO
            buf = io.BytesIO()
            plt.savefig(buf, format='png', dpi=300, bbox_inches='tight')
            buf.seek(0)
            plt.close()
            
            return buf
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            plt.close()
            return None
    
    def create_daily_trend_chart(self, daily_stats: List[Dict], title: str = "–î–∏–Ω–∞–º–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏") -> io.BytesIO:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–∏–Ω–∞–º–∏–∫–∏ –ø–æ –¥–Ω—è–º"""
        try:
            if not daily_stats or len(daily_stats) < 2:
                return None
                
            fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 8))
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            dates = [stat['date'] for stat in daily_stats]
            messages = [stat['messages_count'] for stat in daily_stats]
            users = [stat['users_count'] for stat in daily_stats]
            
            # –ì—Ä–∞—Ñ–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            ax1.plot(dates, messages, marker='o', linewidth=2, markersize=6, 
                    color='blue', label='–°–æ–æ–±—â–µ–Ω–∏—è')
            ax1.set_title('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –¥–Ω—è–º', fontsize=14, fontweight='bold')
            ax1.set_ylabel('–°–æ–æ–±—â–µ–Ω–∏—è', fontsize=12)
            ax1.grid(True, alpha=0.3)
            ax1.legend()
            
            # –ì—Ä–∞—Ñ–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            ax2.plot(dates, users, marker='s', linewidth=2, markersize=6, 
                    color='green', label='–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏')
            ax2.set_title('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –¥–Ω—è–º', fontsize=14, fontweight='bold')
            ax2.set_ylabel('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', fontsize=12)
            ax2.set_xlabel('–î–∞—Ç–∞', fontsize=12)
            ax2.grid(True, alpha=0.3)
            ax2.legend()
            
            # –ü–æ–≤–æ—Ä–æ—Ç –ø–æ–¥–ø–∏—Å–µ–π –¥–∞—Ç
            for ax in [ax1, ax2]:
                ax.tick_params(axis='x', rotation=45)
            
            plt.tight_layout()
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ BytesIO
            buf = io.BytesIO()
            plt.savefig(buf, format='png', dpi=300, bbox_inches='tight')
            buf.seek(0)
            plt.close()
            
            return buf
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –¥–∏–Ω–∞–º–∏–∫–∏: {e}")
            plt.close()
            return None
    
    def create_weekly_heatmap(self, hourly_data_by_days: Dict[str, Dict[str, int]], 
                             title: str = "–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏") -> io.BytesIO:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ –∏ —á–∞—Å–∞–º"""
        try:
            # –°–æ–∑–¥–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É 7x24 (–¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ x —á–∞—Å—ã)
            days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
            hours = list(range(24))
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Ç—Ä–∏—Ü—É –Ω—É–ª—è–º–∏
            heatmap_data = np.zeros((7, 24))
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–º–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            for day_idx, day in enumerate(days):
                day_data = hourly_data_by_days.get(day, {})
                for hour in hours:
                    heatmap_data[day_idx][hour] = day_data.get(str(hour), 0)
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
            fig, ax = plt.subplots(figsize=(16, 8))
            
            # –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞
            sns.heatmap(heatmap_data, 
                       xticklabels=hours,
                       yticklabels=days,
                       annot=True, 
                       fmt='g',
                       cmap='YlOrRd',
                       cbar_kws={'label': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π'},
                       ax=ax)
            
            ax.set_title(title, fontsize=16, fontweight='bold', pad=20)
            ax.set_xlabel('–ß–∞—Å –¥–Ω—è', fontsize=12)
            ax.set_ylabel('–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏', fontsize=12)
            
            plt.tight_layout()
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ BytesIO
            buf = io.BytesIO()
            plt.savefig(buf, format='png', dpi=300, bbox_inches='tight')
            buf.seek(0)
            plt.close()
            
            return buf
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã: {e}")
            plt.close()
            return None
    
    def create_summary_dashboard(self, stats: Dict[str, Any], title: str = "–°–≤–æ–¥–Ω–∞—è –ø–∞–Ω–µ–ª—å") -> io.BytesIO:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞"""
        try:
            fig = plt.figure(figsize=(16, 12))
            
            # 1. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Ç–µ–∫—Å—Ç)
            ax1 = plt.subplot(2, 3, 1)
            ax1.axis('off')
            ax1.text(0.1, 0.8, f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", fontsize=16, fontweight='bold')
            ax1.text(0.1, 0.6, f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {stats.get('total_messages', 0)}", fontsize=12)
            ax1.text(0.1, 0.5, f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_users', 0)}", fontsize=12)
            ax1.text(0.1, 0.4, f"üìà –°—Ä–µ–¥–Ω–µ–µ –≤ –¥–µ–Ω—å: {stats.get('avg_daily', 0):.1f}", fontsize=12)
            ax1.text(0.1, 0.3, f"üèÜ –°–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π: {stats.get('top_user', 'N/A')}", fontsize=12)
            
            # 2. –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º (–º–∏–Ω–∏-–≤–µ—Ä—Å–∏—è)
            if 'hourly_activity' in stats:
                ax2 = plt.subplot(2, 3, 2)
                hours = list(range(24))
                activity = [stats['hourly_activity'].get(str(h), 0) for h in hours]
                ax2.bar(hours, activity, color='lightblue', alpha=0.7)
                ax2.set_title('–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º', fontsize=12, fontweight='bold')
                ax2.set_xlabel('–ß–∞—Å')
                ax2.set_ylabel('–°–æ–æ–±—â–µ–Ω–∏—è')
                ax2.grid(True, alpha=0.3)
            
            # 3. –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–º–∏–Ω–∏-–≤–µ—Ä—Å–∏—è)
            if 'top_users' in stats and stats['top_users']:
                ax3 = plt.subplot(2, 3, 3)
                top_5 = stats['top_users'][:5]
                usernames = [user.get('username', f"User_{user.get('user_id', 'Unknown')}")[:10] 
                           for user in top_5]
                messages = [user.get('message_count', 0) for user in top_5]
                ax3.barh(usernames, messages, color='lightcoral', alpha=0.8)
                ax3.set_title('–¢–æ–ø-5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', fontsize=12, fontweight='bold')
                ax3.set_xlabel('–°–æ–æ–±—â–µ–Ω–∏—è')
            
            # 4. –î–∏–Ω–∞–º–∏–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π)
            if 'daily_trend' in stats and len(stats['daily_trend']) > 1:
                ax4 = plt.subplot(2, 3, (4, 5))
                dates = [day['date'] for day in stats['daily_trend']]
                messages = [day['messages_count'] for day in stats['daily_trend']]
                ax4.plot(dates, messages, marker='o', linewidth=2, color='green')
                ax4.set_title('–î–∏–Ω–∞–º–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', fontsize=12, fontweight='bold')
                ax4.set_ylabel('–°–æ–æ–±—â–µ–Ω–∏—è')
                ax4.grid(True, alpha=0.3)
                ax4.tick_params(axis='x', rotation=45)
            
            # 6. –ò–Ω—Ñ–æ
            ax6 = plt.subplot(2, 3, 6)
            ax6.axis('off')
            ax6.text(0.1, 0.8, f"ü§ñ Telegram Analytics", fontsize=14, fontweight='bold')
            ax6.text(0.1, 0.6, f"üìÖ –û—Ç—á—ë—Ç –æ—Ç: {datetime.now().strftime('%d.%m.%Y %H:%M')}", fontsize=10)
            ax6.text(0.1, 0.5, f"üéØ –ì—Ä—É–ø–ø–∞: {stats.get('group_name', 'N/A')}", fontsize=10)
            ax6.text(0.1, 0.4, f"‚è±Ô∏è –ü–µ—Ä–∏–æ–¥: {stats.get('period', 'N/A')}", fontsize=10)
            
            plt.suptitle(title, fontsize=18, fontweight='bold')
            plt.tight_layout()
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ BytesIO
            buf = io.BytesIO()
            plt.savefig(buf, format='png', dpi=300, bbox_inches='tight')
            buf.seek(0)
            plt.close()
            
            return buf
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–Ω–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞: {e}")
            plt.close()
            return None
