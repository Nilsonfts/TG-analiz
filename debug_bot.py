#!/usr/bin/env python3
"""
TG-analiz Bot - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –¥–ª—è Railway
"""
import asyncio
import json
import logging
import os
import threading
from http.server import HTTPServer, BaseHTTPRequestHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ü–†–ê–í–ò–õ–¨–ù–û–ï –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞ –¥–ª—è Railway
PORT = int(os.getenv("PORT", "8080"))  # Railway —Å–∞–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç PORT
BOT_TOKEN = os.getenv("BOT_TOKEN")

logger.info(f"ÔøΩ Starting with PORT={PORT}")
logger.info(f"ü§ñ BOT_TOKEN={'‚úÖ Set' if BOT_TOKEN else '‚ùå Missing'}")

# Health Check Handler
class SimpleHealthHandler(BaseHTTPRequestHandler):
    def log_message(self, format, *args):
        pass
    
    def do_GET(self):
        self.send_response(200)
        self.send_header("Content-Type", "application/json")
        self.end_headers()
        
        response = {"status": "ok", "healthy": True, "port": PORT}
        self.wfile.write(json.dumps(response).encode())

def start_health_server():
    """–ó–∞–ø—É—Å–∫ health —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        server = HTTPServer(("0.0.0.0", PORT), SimpleHealthHandler)
        logger.info(f"‚úÖ Health server ON PORT {PORT}")
        server.serve_forever()
    except Exception as e:
        logger.error(f"‚ùå Health error: {e}")

async def start_telegram_bot():
    """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
    if not BOT_TOKEN:
        logger.error("‚ùå NO BOT_TOKEN!")
        return
    
    try:
        from telegram import Update
        from telegram.ext import Application, CommandHandler, ContextTypes
        
        app = Application.builder().token(BOT_TOKEN).build()
        
        async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
            await update.message.reply_text(
                "üéâ <b>–†–ê–ë–û–¢–ê–ï–¢!</b>

"
                "‚úÖ Railway –¥–µ–ø–ª–æ–π —É—Å–ø–µ—à–µ–Ω
"
                "‚úÖ Health check –∞–∫—Ç–∏–≤–µ–Ω
" 
                "‚úÖ –ü–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ
"
                "‚úÖ BOT_TOKEN –Ω–∞–π–¥–µ–Ω

"
                "ÔøΩ <b>–ë–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω!</b>",
                parse_mode='HTML'
            )
        
        async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
            await update.message.reply_text(
                "üìã <b>–ö–æ–º–∞–Ω–¥—ã:</b>

"
                "‚Ä¢ /start - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã
"
                "‚Ä¢ /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
"
                "‚Ä¢ /test - –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞

"
                "üéØ <b>–í—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!</b>",
                parse_mode='HTML'
            )
        
        async def test_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
            await update.message.reply_text(
                "üß™ <b>–¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω!</b>

"
                f"üì° –ü–æ—Ä—Ç: {PORT}
"
                "üîó –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: –°—Ç–∞–±–∏–ª—å–Ω–æ
"
                "‚ö° –û—Ç–≤–µ—Ç: –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π

"
                "‚úÖ <b>–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ 100%!</b>",
                parse_mode='HTML'
            )
        
        app.add_handler(CommandHandler("start", start_cmd))
        app.add_handler(CommandHandler("help", help_cmd))
        app.add_handler(CommandHandler("test", test_cmd))
        
        logger.info("ü§ñ Telegram bot starting...")
        await app.run_polling()
        
    except Exception as e:
        logger.error(f"‚ùå Bot error: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ TG-analiz starting...")
    
    # Health server –≤ —Ñ–æ–Ω–µ
    health_thread = threading.Thread(target=start_health_server, daemon=True)
    health_thread.start()
    
    # Telegram bot
    if BOT_TOKEN:
        await start_telegram_bot()
    else:
        logger.warning("‚ö†Ô∏è No BOT_TOKEN - health only")
        await asyncio.sleep(float('inf'))

if __name__ == "__main__":
    asyncio.run(main())
