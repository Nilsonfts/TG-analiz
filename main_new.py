#!/usr/bin/env python3
"""
Telegram Analytics Bot - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –≥—Ä—É–ø–ø–∞–º–∏ —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –≤—ã–±–æ—Ä–∞
"""
import os
import http.server
import socketserver
import logging
import threading
import asyncio
import time
import signal
import sys
from datetime import datetime, timedelta

# Telegram Bot API
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters, CallbackQueryHandler

# –ù–∞—à–∏ –º–æ–¥—É–ª–∏
try:
    from visualization import ChartGenerator
except ImportError:
    ChartGenerator = None
    
try:
    from alerts import AlertSystem
except ImportError:
    AlertSystem = None
    
try:
    from data_export import DataExporter
except ImportError:
    DataExporter = None

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
app_running = True
scheduler_running = False

class SimpleHttpHandler(http.server.SimpleHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.send_header('Content-type', 'text/html')
        self.end_headers()
        
        status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if app_running else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
        scheduler_status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if scheduler_running else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
        
        html = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <title>Telegram Analytics Bot</title>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1">
            <style>
                body {{ font-family: Arial, sans-serif; margin: 40px; }}
                .status {{ padding: 20px; border-radius: 8px; margin: 10px 0; }}
                .active {{ background-color: #d4edda; color: #155724; }}
                .inactive {{ background-color: #f8d7da; color: #721c24; }}
            </style>
        </head>
        <body>
            <h1>ü§ñ Telegram Analytics Bot</h1>
            <div class="status {'active' if app_running else 'inactive'}">
                <h3>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: {status}</h3>
                <p>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
            </div>
            <div class="status {'active' if scheduler_running else 'inactive'}">
                <h3>–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: {scheduler_status}</h3>
                <p>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã –∏ –∞–ª–µ—Ä—Ç—ã</p>
            </div>
            <h3>üìä –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:</h3>
            <ul>
                <li>‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –≥—Ä—É–ø–ø–∞–º–∏</li>
                <li>‚úÖ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø —á–µ—Ä–µ–∑ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É</li>
                <li>‚úÖ –î–Ω–µ–≤–Ω—ã–µ –∏ –Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã</li>
                <li>‚úÖ –ì—Ä–∞—Ñ–∏–∫–∏ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</li>
                <li>‚úÖ –°–∏—Å—Ç–µ–º–∞ –∞–ª–µ—Ä—Ç–æ–≤ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</li>
                <li>‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ CSV</li>
                <li>‚úÖ –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞—à–±–æ—Ä–¥—ã</li>
            </ul>
            <h3>üîß –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:</h3>
            <ul>
                <li><code>/daily</code> - –î–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç (—Å –≤—ã–±–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã)</li>
                <li><code>/weekly</code> - –ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç (—Å –≤—ã–±–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã)</li>
                <li><code>/charts</code> - –ì—Ä–∞—Ñ–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—Å –≤—ã–±–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã)</li>
                <li><code>/trend</code> - –ì—Ä–∞—Ñ–∏–∫ –¥–∏–Ω–∞–º–∏–∫–∏ (—Å –≤—ã–±–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã)</li>
                <li><code>/dashboard</code> - –°–≤–æ–¥–Ω–∞—è –ø–∞–Ω–µ–ª—å (—Å –≤—ã–±–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã)</li>
                <li><code>/export</code> - –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö (—Å –≤—ã–±–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã)</li>
                <li><code>/status</code> - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</li>
                <li><code>/help</code> - –ü–æ–º–æ—â—å</li>
            </ul>
        </body>
        </html>
        """
        self.wfile.write(html.encode())

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    global app_running
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É...")
    app_running = False
    sys.exit(0)

async def create_group_selection_keyboard(db, action_type: str):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã"""
    try:
        groups = await db.get_active_groups()
        if not groups:
            return None
        
        keyboard = []
        for group in groups:
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏
            title = group.title[:30] + "..." if len(group.title) > 30 else group.title
            callback_data = f"{action_type}:{group.group_id}"
            keyboard.append([InlineKeyboardButton(title, callback_data=callback_data)])
        
        return InlineKeyboardMarkup(keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø: {e}")
        return None

async def handle_group_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –∏–∑ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    query = update.callback_query
    await query.answer()
    
    try:
        action, group_id = query.data.split(":", 1)
        group_id = int(group_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        db = getattr(context.application, 'db', None)
        reports = getattr(context.application, 'reports', None)
        
        if not db:
            await query.message.reply_text("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
        group = await db.get_group_by_id(group_id)
        if not group:
            await query.message.reply_text("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        if action == "daily":
            # –î–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
            await query.message.reply_text(f"üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –¥–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç –¥–ª—è –≥—Ä—É–ø–ø—ã '{group.title}'...")
            if reports:
                report = await reports.generate_daily_report(group_id)
                await query.message.reply_text(report, parse_mode='HTML')
            else:
                # –ü—Ä–æ—Å—Ç–æ–π –æ—Ç—á–µ—Ç –±–µ–∑ —Å–µ—Ä–≤–∏—Å–∞
                stats = await db.get_daily_stats(group_id, datetime.now() - timedelta(days=1))
                report = f"""üìä <b>–î–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç</b>

üè∑Ô∏è –ì—Ä—É–ø–ø–∞: {group.title}
üìà –°–æ–æ–±—â–µ–Ω–∏–π: {stats.get('messages_count', 0)}
üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('users_count', 0)}
"""
                await query.message.reply_text(report, parse_mode='HTML')
        
        elif action == "weekly":
            # –ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
            await query.message.reply_text(f"üìà –ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è –≥—Ä—É–ø–ø—ã '{group.title}'...")
            if reports:
                report = await reports.generate_weekly_report(group_id)
                await query.message.reply_text(report, parse_mode='HTML')
            else:
                # –ü—Ä–æ—Å—Ç–æ–π –æ—Ç—á–µ—Ç –±–µ–∑ —Å–µ—Ä–≤–∏—Å–∞
                start_date = datetime.now() - timedelta(days=7)
                stats = await db.get_weekly_stats(group_id, start_date.date())
                report = f"""üìà <b>–ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç</b>

üè∑Ô∏è –ì—Ä—É–ø–ø–∞: {group.title}
üìà –°–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –Ω–µ–¥–µ–ª—é: {stats.get('total_messages', 0)}
üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_active_users', 0)}
üÜï –ù–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {stats.get('new_users', 0)}
"""
                await query.message.reply_text(report, parse_mode='HTML')
        
        elif action == "charts":
            # –ì—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
            await query.message.reply_text(f"üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≥—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã '{group.title}'...")
            if ChartGenerator:
                chart_gen = ChartGenerator()
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
                hourly_data = await db.get_hourly_activity(group_id, days=7)
                top_users_data = await db.get_top_users(group_id, days=7)
                
                # –°–æ–∑–¥–∞—ë–º –≥—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ —á–∞—Å–∞–º
                if hourly_data:
                    chart_buf = chart_gen.create_activity_chart(
                        hourly_data, 
                        f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –≥—Ä—É–ø–ø–µ '{group.title}' (7 –¥–Ω–µ–π)"
                    )
                    
                    if chart_buf:
                        await query.bot.send_photo(
                            chat_id=query.message.chat_id,
                            photo=chart_buf,
                            caption=f"üìä –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ —á–∞—Å–∞–º\nüè∑Ô∏è –ì—Ä—É–ø–ø–∞: {group.title}\nüìÖ –ü–µ—Ä–∏–æ–¥: 7 –¥–Ω–µ–π"
                        )
            else:
                await query.message.reply_text("‚ùå –ú–æ–¥—É–ª—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        elif action == "dashboard":
            # –î–∞—à–±–æ—Ä–¥ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
            await query.message.reply_text(f"üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –¥–∞—à–±–æ—Ä–¥ –¥–ª—è –≥—Ä—É–ø–ø—ã '{group.title}'...")
            summary_stats = await db.get_group_summary_stats(group_id)
            
            report = f"""üìä <b>–°–≤–æ–¥–Ω–∞—è –ø–∞–Ω–µ–ª—å - {group.title}</b>

üìà <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {summary_stats.get('total_messages', 0)}
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {summary_stats.get('total_users', 0)}
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤ –¥–µ–Ω—å: {summary_stats.get('avg_daily', 0):.1f}
‚Ä¢ –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {summary_stats.get('top_user', 'N/A')}

üë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–∏:</b>
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {summary_stats.get('members_count', 0)}

üìÖ <b>–ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞:</b> {summary_stats.get('period', '30 –¥–Ω–µ–π')}
"""
            await query.message.reply_text(report, parse_mode='HTML')
        
        elif action == "export":
            # –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
            await query.message.reply_text(f"üì• –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä—É–ø–ø—ã '{group.title}'...")
            if DataExporter:
                exporter = DataExporter(db)
                
                # –ü–æ–ª–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç
                export_package = await exporter.create_full_export_package(
                    group_id, 
                    exporter.sanitize_filename(group.title)
                )
                
                if export_package:
                    await query.message.reply_text(f"üì¶ –û—Ç–ø—Ä–∞–≤–ª—è—é {len(export_package)} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –≥—Ä—É–ø–ø—ã '{group.title}'...")
                    
                    for filename, file_buffer in export_package.items():
                        try:
                            await query.bot.send_document(
                                chat_id=query.message.chat_id,
                                document=file_buffer,
                                filename=filename,
                                caption=f"üìÅ {filename}\nüè∑Ô∏è –ì—Ä—É–ø–ø–∞: {group.title}"
                            )
                        except Exception as file_error:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ {filename}: {file_error}")
                    
                    await query.message.reply_text("‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!")
                else:
                    await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            else:
                await query.message.reply_text("‚ùå –ú–æ–¥—É–ª—å —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        else:
            await query.message.reply_text(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
        await query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def start_telegram_bot():
    """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
    global app_running, scheduler_running
    
    try:
        from config import Config
        from database import Database
        from services.report_service import ReportService
        
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = Config()
        if not config.bot_token:
            logger.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
            logger.info("–†–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ –∫–∞–∫ HTTP —Å–µ—Ä–≤–µ—Ä")
            while app_running:
                await asyncio.sleep(60)
            return

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        try:
            db = Database(config.database_url)
            await db.init_db()
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            db = None

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –æ—Ç—á–µ—Ç–æ–≤
        try:
            reports = ReportService()
            logger.info("‚úÖ –°–µ—Ä–≤–∏—Å –æ—Ç—á–µ—Ç–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞ –æ—Ç—á–µ—Ç–æ–≤: {e}")
            reports = None

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        application = Application.builder().token(config.bot_token).build()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        application.db = db
        application.reports = reports

        # === –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê ===
        
        async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            user_id = update.effective_user.id
            await update.message.reply_text(
                f"ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ Telegram –≥—Ä—É–ø–ø.\n\n"
                f"üÜî –í–∞—à ID: {user_id}\n\n"
                f"üìä –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                f"‚Ä¢ /daily - –î–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç\n"
                f"‚Ä¢ /weekly - –ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç\n"
                f"‚Ä¢ /charts - –ì—Ä–∞—Ñ–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n"
                f"‚Ä¢ /dashboard - –°–≤–æ–¥–Ω–∞—è –ø–∞–Ω–µ–ª—å\n"
                f"‚Ä¢ /export - –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö\n"
                f"‚Ä¢ /status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n"
                f"‚Ä¢ /help - –ü–æ–º–æ—â—å\n\n"
                f"üéØ –í—Å–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏!"
            )

        async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            help_text = """
ü§ñ <b>Telegram Analytics Bot - –ü–æ–º–æ—â—å</b>

üìä <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ /daily - –î–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç —Å –≤—ã–±–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã
‚Ä¢ /weekly - –ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å –≤—ã–±–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã
‚Ä¢ /charts - –ì—Ä–∞—Ñ–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å –≤—ã–±–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã
‚Ä¢ /trend - –ì—Ä–∞—Ñ–∏–∫ –¥–∏–Ω–∞–º–∏–∫–∏ —Å –≤—ã–±–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã
‚Ä¢ /dashboard - –°–≤–æ–¥–Ω–∞—è –ø–∞–Ω–µ–ª—å —Å –≤—ã–±–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã
‚Ä¢ /export - –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö —Å –≤—ã–±–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã

‚öôÔ∏è <b>–°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ /status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –∏ –ë–î
‚Ä¢ /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üéØ <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>
1. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, /daily)
2. –ë–æ—Ç –ø–æ–∫–∞–∂–µ—Ç –∫–Ω–æ–ø–∫–∏ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≥—Ä—É–ø–ø–∞–º–∏
3. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—É—é –≥—Ä—É–ø–ø—É
4. –ü–æ–ª—É—á–∏—Ç–µ –æ—Ç—á–µ—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã

üí° <b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ –í—Å–µ –æ—Ç—á–µ—Ç—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –≥—Ä—É–ø–ø
‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫–∏
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
"""
            await update.message.reply_text(help_text, parse_mode='HTML')

        async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            user_id = update.effective_user.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if user_id not in config.admin_users:
                await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!")
                return

            db_status = "üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∞" if db else "üî¥ –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
            reports_status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if reports else "üî¥ –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            scheduler_status = "üü¢ –ó–∞–ø—É—â–µ–Ω" if scheduler_running else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            
            groups_count = 0
            if db:
                try:
                    groups = await db.get_active_groups()
                    groups_count = len(groups)
                except:
                    pass

            status_text = f"""
üìä <b>–°—Ç–∞—Ç—É—Å Telegram Analytics Bot</b>

üóÑÔ∏è <b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:</b> {db_status}
üìà <b>–°–µ—Ä–≤–∏—Å –æ—Ç—á–µ—Ç–æ–≤:</b> {reports_status}
‚è∞ <b>–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫:</b> {scheduler_status}

üìã <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø: {groups_count}
‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {len(config.admin_users)}

üïê <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
"""
            await update.message.reply_text(status_text, parse_mode='HTML')

        async def daily_report_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            user_id = update.effective_user.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if user_id not in config.admin_users:
                await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!")
                return
            
            if not db:
                await update.message.reply_text("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã
            keyboard = await create_group_selection_keyboard(db, "daily")
            if not keyboard:
                await update.message.reply_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
                return
            
            await update.message.reply_text(
                "üìä –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞:",
                reply_markup=keyboard
            )

        async def weekly_report_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            user_id = update.effective_user.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if user_id not in config.admin_users:
                await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!")
                return
            
            if not db:
                await update.message.reply_text("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã
            keyboard = await create_group_selection_keyboard(db, "weekly")
            if not keyboard:
                await update.message.reply_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
                return
            
            await update.message.reply_text(
                "üìà –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞:",
                reply_markup=keyboard
            )

        async def charts_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            user_id = update.effective_user.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if user_id not in config.admin_users:
                await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!")
                return
            
            if not db:
                await update.message.reply_text("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã
            keyboard = await create_group_selection_keyboard(db, "charts")
            if not keyboard:
                await update.message.reply_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                return
            
            await update.message.reply_text(
                "üìä –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:",
                reply_markup=keyboard
            )

        async def dashboard_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            user_id = update.effective_user.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if user_id not in config.admin_users:
                await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!")
                return
            
            if not db:
                await update.message.reply_text("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã
            keyboard = await create_group_selection_keyboard(db, "dashboard")
            if not keyboard:
                await update.message.reply_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                return
            
            await update.message.reply_text(
                "üìä –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —Å–≤–æ–¥–Ω–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞:",
                reply_markup=keyboard
            )

        async def export_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            user_id = update.effective_user.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if user_id not in config.admin_users:
                await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!")
                return
            
            if not db:
                await update.message.reply_text("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã
            keyboard = await create_group_selection_keyboard(db, "export")
            if not keyboard:
                await update.message.reply_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
                return
            
            await update.message.reply_text(
                "üì• –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö:",
                reply_markup=keyboard
            )

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("status", status_command))
        application.add_handler(CommandHandler("daily", daily_report_command))
        application.add_handler(CommandHandler("weekly", weekly_report_command))
        application.add_handler(CommandHandler("charts", charts_command))
        application.add_handler(CommandHandler("dashboard", dashboard_command))
        application.add_handler(CommandHandler("export", export_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback queries (–≤—ã–±–æ—Ä –≥—Ä—É–ø–ø)
        application.add_handler(CallbackQueryHandler(handle_group_callback))

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞—é Telegram –±–æ—Ç–∞...")
        await application.initialize()
        await application.start()
        await application.updater.start_polling()
        
        logger.info("‚úÖ Telegram –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        logger.info("üéØ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –≥—Ä—É–ø–ø–∞–º–∏ —á–µ—Ä–µ–∑ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É")
        
        # –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
        while app_running:
            await asyncio.sleep(1)
            
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ Telegram –±–æ—Ç–µ: {e}")
        import traceback
        traceback.print_exc()
    finally:
        try:
            if 'application' in locals():
                await application.stop()
                await application.shutdown()
            if db:
                await db.close()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")

def start_http_server():
    """–ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        port = int(os.environ.get('PORT', 8000))
        
        # –°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
        httpd = socketserver.TCPServer(("", port), SimpleHttpHandler)
        httpd.allow_reuse_address = True
        
        logger.info(f"üåê HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
        httpd.serve_forever()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ HTTP —Å–µ—Ä–≤–µ—Ä–∞: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    global app_running
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGTERM, signal_handler)
    signal.signal(signal.SIGINT, signal_handler)
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram Analytics Bot")
    logger.info("üéØ –í–µ—Ä—Å–∏—è: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –≥—Ä—É–ø–ø–∞–º–∏ —Å inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π")
    
    # –ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    http_thread = threading.Thread(target=start_http_server, daemon=True)
    http_thread.start()
    
    # –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞
    try:
        await start_telegram_bot()
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        app_running = False
        logger.info("üëã Telegram Analytics Bot –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
