#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è main.py —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º healthcheck –¥–ª—è –¥–µ–ø–ª–æ—è
"""
import os
import http.server
import socketserver
import logging
import threading
import asyncio
import signal
import sys
from datetime import datetime

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
app_running = True
bot_status = "starting"

class HealthHandler(http.server.SimpleHTTPRequestHandler):
    def log_message(self, format, *args):
        """–û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤"""
        pass
        
    def do_GET(self):
        global app_running, bot_status
        
        if self.path == "/health":
            # Health check endpoint
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.send_header('Cache-Control', 'no-cache')
            self.end_headers()
            
            health_data = {
                "status": "healthy" if app_running and bot_status == "running" else "unhealthy",
                "timestamp": datetime.now().isoformat(),
                "app_running": app_running,
                "bot_status": bot_status,
                "service": "telegram-channel-analytics"
            }
            
            import json
            self.wfile.write(json.dumps(health_data).encode())
            
        elif self.path == "/":
            # –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            self.send_response(200)
            self.send_header('Content-type', 'text/html')
            self.end_headers()
            
            status_emoji = "üü¢" if app_running and bot_status == "running" else "üü°" if bot_status == "starting" else "üî¥"
            
            html = f"""
            <!DOCTYPE html>
            <html>
            <head>
                <title>Telegram Channel Analytics Bot</title>
                <meta charset="utf-8">
                <meta http-equiv="refresh" content="30">
            </head>
            <body>
                <h1>üìä Telegram Channel Analytics Bot</h1>
                <p>{status_emoji} –°—Ç–∞—Ç—É—Å: {bot_status}</p>
                <p>üïê –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
                <p>üöÄ –ì–æ—Ç–æ–≤ –∫ –∞–Ω–∞–ª–∏–∑—É –∫–∞–Ω–∞–ª–æ–≤</p>
                <hr>
                <h3>üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</h3>
                <ul>
                    <li>/summary - üìä –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</li>
                    <li>/growth - üìà –†–æ—Å—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤</li>
                    <li>/engagement - ‚ö° –í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å</li>
                    <li>/traffic - üéØ –ò—Å—Ç–æ—á–Ω–∏–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞</li>
                    <li>/charts - üìä –ì—Ä–∞—Ñ–∏–∫–∏</li>
                </ul>
                <p><a href="/health">Health Check JSON</a></p>
            </body>
            </html>
            """
            self.wfile.write(html.encode())
            
        else:
            self.send_response(404)
            self.end_headers()
            self.wfile.write(b'{"error": "Not Found"}')

def start_http_server():
    """–ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞"""
    global app_running
    
    port = int(os.environ.get("PORT", 8000))
    
    try:
        with socketserver.TCPServer(("", port), HealthHandler) as httpd:
            logger.info(f"üåê HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
            while app_running:
                httpd.handle_request()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ HTTP —Å–µ—Ä–≤–µ—Ä–∞: {e}")

async def start_telegram_bot():
    """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
    global app_running, bot_status
    
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        bot_status = "initializing"
        
        from config import BOT_TOKEN
        if not BOT_TOKEN:
            logger.warning("‚ö†Ô∏è BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω - —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ –∫–∞–∫ HTTP —Å–µ—Ä–≤–µ—Ä")
            bot_status = "http_only"
            while app_running:
                await asyncio.sleep(60)
            return
            
        # –ò–º–ø–æ—Ä—Ç Telegram –±–æ—Ç–∞
        from telegram.ext import Application
        
        logger.info("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞...")
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –ü—Ä–æ—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ start
        async def start_command(update, context):
            await update.message.reply_text(
                "üöÄ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–æ–≤.\n"
                "üìä –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –≥–æ—Ç–æ–≤–∞ –∫ –∞–Ω–∞–ª–∏–∑—É!"
            )
        
        from telegram.ext import CommandHandler
        application.add_handler(CommandHandler("start", start_command))
        
        bot_status = "running"
        logger.info("‚úÖ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        await application.initialize()
        await application.start()
        await application.updater.start_polling()
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        while app_running:
            await asyncio.sleep(1)
            
    except ImportError as e:
        logger.warning(f"‚ö†Ô∏è –ú–æ–¥—É–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {e}")
        bot_status = "http_only"
        while app_running:
            await asyncio.sleep(60)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞: {e}")
        bot_status = "error"
        while app_running:
            await asyncio.sleep(60)

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
    global app_running
    logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}")
    app_running = False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    global app_running, bot_status
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGTERM, signal_handler)
    signal.signal(signal.SIGINT, signal_handler)
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram Channel Analytics Bot")
    logger.info("üìä –í–µ—Ä—Å–∏—è: Channel Analytics v2.0")
    
    # –ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    http_thread = threading.Thread(target=start_http_server, daemon=True)
    http_thread.start()
    
    # –û–∂–∏–¥–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ HTTP —Å–µ—Ä–≤–µ—Ä–∞
    await asyncio.sleep(2)
    bot_status = "ready"
    
    # –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞
    try:
        await start_telegram_bot()
    except KeyboardInterrupt:
        logger.info("‚å®Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        bot_status = "error"
    finally:
        app_running = False
        bot_status = "stopped"
        logger.info("üëã Telegram Analytics Bot –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("‚å®Ô∏è –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        sys.exit(1)
