#!/usr/bin/env python3
"""
–£–õ–¨–¢–†–ê-–ü–†–û–°–¢–û–ô TG-analiz Bot –¥–ª—è Railway
–ú–ò–ù–ò–ú–£–ú –ö–û–î–ê - –ú–ê–ö–°–ò–ú–£–ú –ù–ê–î–ï–ñ–ù–û–°–¢–ò
"""
import asyncio
import json
import logging
import os
import sys
import threading
from http.server import HTTPServer, BaseHTTPRequestHandler

# –õ–æ–≥–∏
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

# Railway –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
PORT = int(os.getenv("PORT", "8080"))
BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()

# –ü–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏
logger.info("=" * 50)
logger.info("üöÄ –£–õ–¨–¢–†–ê-–ü–†–û–°–¢–û–ô TG-ANALIZ –°–¢–ê–†–¢–£–ï–¢")
logger.info("=" * 50)
logger.info(f"üåê PORT: {PORT}")
logger.info(f"ü§ñ BOT_TOKEN: {'‚úÖ –ù–ê–ô–î–ï–ù' if BOT_TOKEN else '‚ùå –ù–ï –ù–ê–ô–î–ï–ù'}")
logger.info(f"üîó Python: {sys.version}")
logger.info("=" * 50)

class UltraHealthHandler(BaseHTTPRequestHandler):
    def log_message(self, format, *args):
        pass
    
    def do_GET(self):
        logger.info(f"üè• Health check –∑–∞–ø—Ä–æ—Å –æ—Ç {self.client_address}")
        
        self.send_response(200)
        self.send_header("Content-Type", "application/json")
        self.send_header("Access-Control-Allow-Origin", "*")
        self.end_headers()
        
        health_data = {
            "status": "ok",
            "healthy": True,
            "port": PORT,
            "bot_token_set": bool(BOT_TOKEN),
            "timestamp": asyncio.get_event_loop().time() if hasattr(asyncio, 'get_event_loop') else 0
        }
        
        response = json.dumps(health_data, indent=2)
        self.wfile.write(response.encode('utf-8'))
        logger.info("‚úÖ Health check –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

def start_health_server():
    """–ó–∞–ø—É—Å–∫ health —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        logger.info(f"üè• –ó–∞–ø—É—Å–∫ health —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
        server = HTTPServer(("0.0.0.0", PORT), UltraHealthHandler)
        logger.info(f"‚úÖ Health —Å–µ—Ä–≤–µ—Ä –ê–ö–¢–ò–í–ï–ù –Ω–∞ 0.0.0.0:{PORT}")
        server.serve_forever()
    except Exception as e:
        logger.error(f"‚ùå –û–®–ò–ë–ö–ê health —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        sys.exit(1)

async def ultra_simple_bot():
    """–£–ª—å—Ç—Ä–∞-–ø—Ä–æ—Å—Ç–æ–π Telegram –±–æ—Ç"""
    if not BOT_TOKEN:
        logger.error("‚ùå BOT_TOKEN –ù–ï –ù–ê–ô–î–ï–ù!")
        logger.error("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ Railway Variables!")
        return
    
    try:
        logger.info("üì¶ –ò–º–ø–æ—Ä—Ç telegram –±–∏–±–ª–∏–æ—Ç–µ–∫...")
        from telegram import Update
        from telegram.ext import Application, CommandHandler, ContextTypes
        logger.info("‚úÖ Telegram –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        logger.info("üîß –°–æ–∑–¥–∞–Ω–∏–µ Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        app = Application.builder().token(BOT_TOKEN).build()
        logger.info("‚úÖ Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ")
        
        # –ö–æ–º–∞–Ω–¥–∞ /start
        async def ultra_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
            logger.info(f"üì® /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
            
            message = (
                "üéâ <b>–£–õ–¨–¢–†–ê-–ü–†–û–°–¢–û–ô –ë–û–¢–ê –†–ê–ë–û–¢–ê–ï–¢!</b>\n\n"
                f"‚úÖ Railway –¥–µ–ø–ª–æ–π: –û–ö\n"
                f"‚úÖ Health check: –û–ö\n"
                f"‚úÖ –ü–æ—Ä—Ç {PORT}: –û–ö\n"
                f"‚úÖ BOT_TOKEN: –û–ö\n"
                f"‚úÖ Telegram API: –û–ö\n\n"
                f"üë§ –í–∞—à ID: <code>{update.effective_user.id}</code>\n"
                f"üí¨ –ß–∞—Ç ID: <code>{update.effective_chat.id}</code>\n\n"
                "üöÄ <b>–í–°–ï –°–ò–°–¢–ï–ú–´ –í –ù–û–†–ú–ï!</b>"
            )
            
            await update.message.reply_text(message, parse_mode='HTML')
            logger.info("‚úÖ –û—Ç–≤–µ—Ç /start –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        
        # –ö–æ–º–∞–Ω–¥–∞ /ping
        async def ultra_ping(update: Update, context: ContextTypes.DEFAULT_TYPE):
            logger.info(f"üì® /ping –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
            await update.message.reply_text("üèì <b>PONG!</b> –ë–æ—Ç –∂–∏–≤–æ–π!", parse_mode='HTML')
            logger.info("‚úÖ –û—Ç–≤–µ—Ç /ping –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        
        # –ö–æ–º–∞–Ω–¥–∞ /info
        async def ultra_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
            logger.info(f"üì® /info –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
            
            info_text = (
                "‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:</b>\n\n"
                f"üåê –ü–æ—Ä—Ç: {PORT}\n"
                f"ü§ñ –í–µ—Ä—Å–∏—è: –£–ª—å—Ç—Ä–∞-–ø—Ä–æ—Å—Ç–∞—è\n"
                f"‚òÅÔ∏è –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: Railway\n"
                f"üêç Python: {sys.version.split()[0]}\n\n"
                "üìã <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
                "‚Ä¢ /start - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã\n"
                "‚Ä¢ /ping - –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç\n"
                "‚Ä¢ /info - –≠—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n\n"
                "‚úÖ <b>–í—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!</b>"
            )
            
            await update.message.reply_text(info_text, parse_mode='HTML')
            logger.info("‚úÖ –û—Ç–≤–µ—Ç /info –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
        logger.info("üìã –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥...")
        app.add_handler(CommandHandler("start", ultra_start))
        app.add_handler(CommandHandler("ping", ultra_ping))
        app.add_handler(CommandHandler("info", ultra_info))
        logger.info("‚úÖ –ö–æ–º–∞–Ω–¥—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã: /start, /ping, /info")
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("ü§ñ –ó–ê–ü–£–°–ö TELEGRAM –ë–û–¢–ê...")
        logger.info("=" * 50)
        await app.run_polling(drop_pending_updates=True)
        
    except ImportError as e:
        logger.error(f"‚ùå –û–®–ò–ë–ö–ê –∏–º–ø–æ—Ä—Ç–∞: {e}")
        logger.error("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ requirements.txt!")
    except Exception as e:
        logger.error(f"‚ùå –û–®–ò–ë–ö–ê –±–æ—Ç–∞: {e}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –°–¢–ê–†–¢ –ì–õ–ê–í–ù–û–ô –§–£–ù–ö–¶–ò–ò")
    
    # Health —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    logger.info("üè• –ó–∞–ø—É—Å–∫ health —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ñ–æ–Ω–µ...")
    health_thread = threading.Thread(target=start_health_server, daemon=True)
    health_thread.start()
    
    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
    await asyncio.sleep(1)
    
    # Telegram –±–æ—Ç
    logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    await ultra_simple_bot()

if __name__ == "__main__":
    try:
        logger.info("üé¨ –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø")
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("‚õî –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        sys.exit(1)
