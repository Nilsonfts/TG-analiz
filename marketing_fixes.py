#!/usr/bin/env python3
"""
–ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ú–ê–†–ö–ï–¢–ò–ù–ì–ê: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ —É—Å—Ç—Ä–∞–Ω–µ–Ω—ã!

–û—Å–Ω–æ–≤–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
1. ER (Engagement Rate) —Ç–µ–ø–µ—Ä—å —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ: —Ä–µ–∞–∫—Ü–∏–∏/–ø–æ–¥–ø–∏—Å—á–∏–∫–∏, –∞ –Ω–µ —Ä–µ–∞–∫—Ü–∏–∏/–ø—Ä–æ—Å–º–æ—Ç—Ä—ã
2. –î–æ–±–∞–≤–ª–µ–Ω—ã —Ä–µ–∞–ª—å–Ω—ã–µ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
3. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è SMM –æ—Ç—á–µ—Ç–æ–≤
4. –£–ª—É—á—à–µ–Ω—ã —Ä–∞—Å—á–µ—Ç—ã –∫–æ–Ω–≤–µ—Ä—Å–∏–π –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
"""

# –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç ER (Engagement Rate) –¥–ª—è Telegram –∫–∞–Ω–∞–ª–æ–≤
def calculate_correct_er(total_reactions: int, total_posts: int, subscribers: int) -> str:
    """
    –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç ER –¥–ª—è Telegram:
    ER = (–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∞–∫—Ü–∏–π –Ω–∞ –ø–æ—Å—Ç / –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤) √ó 100%
    
    –≠—Ç–æ –ò–ù–î–£–°–¢–†–ò–ê–õ–¨–ù–´–ô –°–¢–ê–ù–î–ê–†–¢!
    """
    if subscribers <= 0 or total_posts <= 0:
        return "0.00%"
    
    avg_reactions_per_post = total_reactions / total_posts
    er = (avg_reactions_per_post / subscribers) * 100
    return f"{er:.2f}%"

# –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –±–µ–Ω—á–º–∞—Ä–∫–∏ ER –¥–ª—è Telegram –∫–∞–Ω–∞–ª–æ–≤
def get_er_rating(er_percentage: float, subscribers: int) -> str:
    """
    –û—Ü–µ–Ω–∫–∞ ER —Å–æ–≥–ª–∞—Å–Ω–æ –∏–Ω–¥—É—Å—Ç—Ä–∏–∏:
    - –ú–µ–≥–∞-–∫–∞–Ω–∞–ª—ã (100k+): 1-3% = –æ—Ç–ª–∏—á–Ω–æ
    - –ë–æ–ª—å—à–∏–µ –∫–∞–Ω–∞–ª—ã (10k-100k): 3-7% = –æ—Ç–ª–∏—á–Ω–æ  
    - –°—Ä–µ–¥–Ω–∏–µ –∫–∞–Ω–∞–ª—ã (1k-10k): 7-15% = –æ—Ç–ª–∏—á–Ω–æ
    - –ú–∞–ª—ã–µ –∫–∞–Ω–∞–ª—ã (<1k): 15%+ = –æ—Ç–ª–∏—á–Ω–æ
    """
    if subscribers >= 100000:
        if er_percentage >= 3: return "üî• –û—Ç–ª–∏—á–Ω–æ"
        elif er_percentage >= 1.5: return "‚úÖ –•–æ—Ä–æ—à–æ"
        elif er_percentage >= 1: return "‚ö†Ô∏è –°—Ä–µ–¥–Ω–µ"
        else: return "‚ùå –ü–ª–æ—Ö–æ"
    elif subscribers >= 10000:
        if er_percentage >= 7: return "üî• –û—Ç–ª–∏—á–Ω–æ"
        elif er_percentage >= 4: return "‚úÖ –•–æ—Ä–æ—à–æ"
        elif er_percentage >= 2: return "‚ö†Ô∏è –°—Ä–µ–¥–Ω–µ"
        else: return "‚ùå –ü–ª–æ—Ö–æ"
    elif subscribers >= 1000:
        if er_percentage >= 15: return "üî• –û—Ç–ª–∏—á–Ω–æ"
        elif er_percentage >= 10: return "‚úÖ –•–æ—Ä–æ—à–æ"
        elif er_percentage >= 5: return "‚ö†Ô∏è –°—Ä–µ–¥–Ω–µ"
        else: return "‚ùå –ü–ª–æ—Ö–æ"
    else:
        if er_percentage >= 20: return "üî• –û—Ç–ª–∏—á–Ω–æ"
        elif er_percentage >= 15: return "‚úÖ –•–æ—Ä–æ—à–æ"
        elif er_percentage >= 10: return "‚ö†Ô∏è –°—Ä–µ–¥–Ω–µ"
        else: return "‚ùå –ü–ª–æ—Ö–æ"

# –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç VTR (View Through Rate)
def calculate_vtr(total_views: int, subscribers: int) -> str:
    """
    VTR = –û–±—â–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã / –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ √ó 100%
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –≤–∏–¥–∏—Ç –∫–æ–Ω—Ç–µ–Ω—Ç
    """
    if subscribers <= 0:
        return "0.00%"
    
    vtr = (total_views / subscribers) * 100
    return f"{vtr:.1f}%"

# –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –æ—Ö–≤–∞—Ç–∞ (Reach Rate)
def calculate_reach_rate(unique_views: int, subscribers: int) -> str:
    """
    Reach Rate = –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã / –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ √ó 100%
    """
    if subscribers <= 0:
        return "0.00%"
    
    reach = (unique_views / subscribers) * 100
    return f"{reach:.1f}%"

# –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∫–∞–Ω–∞–ª–∞ (–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∞—É–¥–∏—Ç–æ—Ä–∏–∏)
def calculate_channel_temperature(er: float, vtr: float, subscribers: int) -> dict:
    """
    –†–∞—Å—á–µ—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∫–∞–Ω–∞–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ ER –∏ VTR
    """
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø–æ —Ä–∞–∑–º–µ—Ä—É –∞—É–¥–∏—Ç–æ—Ä–∏–∏
    if subscribers >= 100000:
        er_weight = er / 3.0  # –î–ª—è –º–µ–≥–∞-–∫–∞–Ω–∞–ª–æ–≤ ER 3% = –º–∞–∫—Å–∏–º—É–º
        vtr_weight = vtr / 50.0  # VTR 50% = –º–∞–∫—Å–∏–º—É–º
    elif subscribers >= 10000:
        er_weight = er / 7.0
        vtr_weight = vtr / 70.0
    elif subscribers >= 1000:
        er_weight = er / 15.0
        vtr_weight = vtr / 90.0
    else:
        er_weight = er / 20.0
        vtr_weight = vtr / 100.0
    
    # –û–±—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (0-5)
    temperature = min(5, (er_weight + vtr_weight) * 2.5)
    
    fire_emojis = "üî•" * int(temperature)
    cold_emojis = "‚¨ú" * (5 - int(temperature))
    
    return {
        "value": temperature,
        "display": f"{fire_emojis}{cold_emojis}",
        "rating": f"({int(temperature)}/5)"
    }

# –ê–Ω–∞–ª–∏–∑ –ª—É—á—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
def analyze_posting_times(posts_data: list) -> dict:
    """
    –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    posts_data: [{"hour": int, "views": int, "reactions": int, "subscribers": int}]
    """
    hourly_stats = {}
    
    for post in posts_data:
        hour = post["hour"]
        if hour not in hourly_stats:
            hourly_stats[hour] = {"views": 0, "reactions": 0, "posts": 0, "subscribers": post["subscribers"]}
        
        hourly_stats[hour]["views"] += post["views"]
        hourly_stats[hour]["reactions"] += post["reactions"]
        hourly_stats[hour]["posts"] += 1
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º ER –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Å–∞
    hour_er = {}
    for hour, stats in hourly_stats.items():
        if stats["posts"] > 0 and stats["subscribers"] > 0:
            avg_reactions = stats["reactions"] / stats["posts"]
            er = (avg_reactions / stats["subscribers"]) * 100
            hour_er[hour] = er
    
    # –¢–æ–ø-3 —á–∞—Å–∞
    sorted_hours = sorted(hour_er.items(), key=lambda x: x[1], reverse=True)[:3]
    
    return {
        "best_hours": sorted_hours,
        "all_hours": hour_er
    }

print("‚úÖ –ú–æ–¥—É–ª—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω!")
print("üéØ –û—Å–Ω–æ–≤–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
print("   ‚Ä¢ ER —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤, –Ω–µ –æ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤")
print("   ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω—ã –∏–Ω–¥—É—Å—Ç—Ä–∏–∞–ª—å–Ω—ã–µ –±–µ–Ω—á–º–∞—Ä–∫–∏")
print("   ‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∫–∞–Ω–∞–ª–∞ —É—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏")
print("   ‚Ä¢ –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º ER")
