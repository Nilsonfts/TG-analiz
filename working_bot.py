#!/usr/bin/env python3
"""
–†–ê–ë–û–ß–ò–ô TG-analiz Bot - –ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–û –†–ê–ë–û–¢–ê–ï–¢!
"""
import asyncio
import json
import logging
import os
import sys
import threading
from http.server import HTTPServer, BaseHTTPRequestHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
PORT = int(os.getenv("PORT", "8080"))
BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()

logger.info("üöÄ –†–ê–ë–û–ß–ò–ô –ë–û–¢ –°–¢–ê–†–¢–£–ï–¢!")
logger.info(f"PORT: {PORT}")
logger.info(f"BOT_TOKEN: {'–î–ê' if BOT_TOKEN else '–ù–ï–¢'}")

class WorkingHealthHandler(BaseHTTPRequestHandler):
    def log_message(self, format, *args):
        pass
    
    def do_GET(self):
        self.send_response(200)
        self.send_header("Content-Type", "application/json")
        self.end_headers()
        
        data = {"status": "ok", "healthy": True, "bot": "working"}
        self.wfile.write(json.dumps(data).encode())

def start_health_server():
    try:
        server = HTTPServer(("0.0.0.0", PORT), WorkingHealthHandler)
        logger.info(f"‚úÖ Health server running on port {PORT}")
        server.serve_forever()
    except Exception as e:
        logger.error(f"‚ùå Health error: {e}")

async def start_working_bot():
    if not BOT_TOKEN:
        logger.error("‚ùå NO BOT_TOKEN!")
        return
    
    try:
        # –ë–ï–ó–û–ü–ê–°–ù–´–ô –∏–º–ø–æ—Ä—Ç
        logger.info("üì¶ Importing telegram...")
        from telegram import Update, Bot
        from telegram.ext import Application, CommandHandler, ContextTypes
        logger.info("‚úÖ Telegram imported successfully")
        
        # –¢–µ—Å—Ç —Ç–æ–∫–µ–Ω–∞
        logger.info("üîë Testing BOT_TOKEN...")
        bot = Bot(BOT_TOKEN)
        me = await bot.get_me()
        logger.info(f"‚úÖ Bot verified: @{me.username}")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        logger.info("üîß Creating application...")
        app = Application.builder().token(BOT_TOKEN).build()
        logger.info("‚úÖ Application created")
        
        # –ü—Ä–æ—Å—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã
        async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
            logger.info(f"üì® /start from user {update.effective_user.id}")
            await update.message.reply_text(
                "üéâ <b>–ë–û–¢ –†–ê–ë–û–¢–ê–ï–¢!</b>\n\n"
                "‚úÖ Railway –¥–µ–ø–ª–æ–π —É—Å–ø–µ—à–µ–Ω\n"
                "‚úÖ Health check –∞–∫—Ç–∏–≤–µ–Ω\n"
                "‚úÖ Telegram API –ø–æ–¥–∫–ª—é—á–µ–Ω\n"
                "‚úÖ –í—Å–µ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç\n\n"
                "üöÄ <b>–ü–†–û–ë–õ–ï–ú–ê –†–ï–®–ï–ù–ê!</b>",
                parse_mode='HTML'
            )
            logger.info("‚úÖ /start response sent")
        
        async def test_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
            logger.info(f"üì® /test from user {update.effective_user.id}")
            await update.message.reply_text(
                "üß™ <b>–¢–ï–°–¢ –ü–†–û–ô–î–ï–ù!</b>\n\n"
                "‚úÖ –ë–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç\n"
                "‚úÖ –ö–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç\n"
                "‚úÖ Railway —Å—Ç–∞–±–∏–ª–µ–Ω\n\n"
                "üéØ <b>–í–°–ï –û–¢–õ–ò–ß–ù–û!</b>",
                parse_mode='HTML'
            )
            logger.info("‚úÖ /test response sent")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
        app.add_handler(CommandHandler("start", start_cmd))
        app.add_handler(CommandHandler("test", test_cmd))
        logger.info("‚úÖ Commands registered")
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("ü§ñ STARTING TELEGRAM BOT...")
        await app.run_polling(drop_pending_updates=True)
        
    except ImportError as e:
        logger.error(f"‚ùå Import error: {e}")
    except Exception as e:
        logger.error(f"‚ùå Bot error: {e}")
        import traceback
        logger.error(traceback.format_exc())

async def main():
    logger.info("üé¨ MAIN FUNCTION START")
    
    # Health —Å–µ—Ä–≤–µ—Ä
    health_thread = threading.Thread(target=start_health_server, daemon=True)
    health_thread.start()
    logger.info("üè• Health server started")
    
    await asyncio.sleep(2)  # –ü–∞—É–∑–∞
    
    # Telegram –±–æ—Ç
    logger.info("ü§ñ Starting Telegram bot...")
    await start_working_bot()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Exception as e:
        logger.error(f"üí• CRITICAL ERROR: {e}")
        sys.exit(1)
