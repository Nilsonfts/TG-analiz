#!/usr/bin/env python3
"""
–†–ê–ë–û–ß–ò–ô TG-analiz Bot - –ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–û –†–ê–ë–û–¢–ê–ï–¢!
"""
import asyncio
import json
import logging
import os
import sys
import threading
from http.server import HTTPServer, BaseHTTPRequestHandler

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger(__name__)

# Configuration
PORT = int(os.getenv("PORT", "8080")) # Railway provides the PORT env var
BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()

logger.info("üöÄ –†–ê–ë–û–ß–ò–ô –ë–û–¢ –°–¢–ê–†–¢–£–ï–¢!")
logger.info(f"PORT: {PORT}")
logger.info(f"BOT_TOKEN: {'–î–ê' if BOT_TOKEN else '–ù–ï–¢'}")

class WorkingHealthHandler(BaseHTTPRequestHandler):
    def log_message(self, format, *args):
        pass # Suppress HTTP logs for cleaner output
    
    def do_GET(self):
        self.send_response(200)
        self.send_header("Content-Type", "application/json")
        self.end_headers()
        
        data = {"status": "ok", "healthy": True, "bot": "working"}
        self.wfile.write(json.dumps(data).encode())

def start_health_server():
    """Starts the health check server in a background thread."""
    try:
        server = HTTPServer(("0.0.0.0", PORT), WorkingHealthHandler)
        logger.info(f"‚úÖ Health server running on port {PORT}")
        server.serve_forever()
    except Exception as e:
        logger.error(f"‚ùå Health error: {e}")

async def start_working_bot():
    """Initializes and runs the main Telegram bot."""
    if not BOT_TOKEN:
        logger.error("‚ùå NO BOT_TOKEN! The bot cannot start.")
        return
    
    try:
        # Safe import to prevent crashes if not installed
        logger.info("üì¶ Importing telegram...")
        from telegram import Update, Bot
        from telegram.ext import Application, CommandHandler, ContextTypes
        logger.info("‚úÖ Telegram imported successfully")
        
        # Test the token before starting
        logger.info("üîë Testing BOT_TOKEN...")
        bot = Bot(BOT_TOKEN)
        me = await bot.get_me()
        logger.info(f"‚úÖ Bot verified: @{me.username}")
        
        # Create the Application
        logger.info("üîß Creating application...")
        app = Application.builder().token(BOT_TOKEN).build()
        logger.info("‚úÖ Application created")
        
        # Simple command handlers for testing
        async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
            logger.info(f"üì® /start from user {update.effective_user.id}")
            await update.message.reply_text(
                "üéâ <b>–ë–û–¢ –†–ê–ë–û–¢–ê–ï–¢!</b>\n\n"
                "‚úÖ Railway –¥–µ–ø–ª–æ–π —É—Å–ø–µ—à–µ–Ω\n"
                "‚úÖ Health check –∞–∫—Ç–∏–≤–µ–Ω\n"
                "‚úÖ Telegram API –ø–æ–¥–∫–ª—é—á–µ–Ω\n\n"
                "üöÄ <b>–ü–†–û–ë–õ–ï–ú–ê –†–ï–®–ï–ù–ê!</b>",
                parse_mode='HTML'
            )
            logger.info("‚úÖ /start response sent")
        
        async def daily_report_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
            logger.info(f"üì® /daily_report from user {update.effective_user.id}")
            # –õ–æ–≥–∏–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏
            report = "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç:\n" \
                     "- –ü–æ–¥–ø–∏—Å–∫–∏: 100\n" \
                     "- –û—Ç–ø–∏—Å–∫–∏: 50\n" \
                     "- –ü—É–±–ª–∏–∫–∞—Ü–∏–∏: 10\n" \
                     "- –°—Ä–µ–¥–Ω–∏–µ –æ—Ö–≤–∞—Ç—ã –ø–æ—Å—Ç–æ–≤: 500\n" \
                     "- –°—Ä–µ–¥–Ω–∏–µ –æ—Ö–≤–∞—Ç—ã —Å—Ç–æ—Ä–∏—Å: 300\n" \
                     "- –í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å: 20%\n" \
                     "- –°—Ä–µ–¥–Ω–∏–µ –ª–∞–π–∫–∏ –Ω–∞ —Å—Ç–æ—Ä–∏—Å: 100"
            await update.message.reply_text(report)
            logger.info("‚úÖ /daily_report response sent")

        async def monthly_report_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
            logger.info(f"üì® /monthly_report from user {update.effective_user.id}")
            # –õ–æ–≥–∏–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
            report = "–ú–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç:\n" \
                     "- –ü–æ–¥–ø–∏—Å–∫–∏: 3000\n" \
                     "- –û—Ç–ø–∏—Å–∫–∏: 1500\n" \
                     "- –ü—É–±–ª–∏–∫–∞—Ü–∏–∏: 300\n" \
                     "- –°—Ä–µ–¥–Ω–∏–µ –æ—Ö–≤–∞—Ç—ã –ø–æ—Å—Ç–æ–≤: 450\n" \
                     "- –°—Ä–µ–¥–Ω–∏–µ –æ—Ö–≤–∞—Ç—ã —Å—Ç–æ—Ä–∏—Å: 350\n" \
                     "- –í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å: 25%\n" \
                     "- –°—Ä–µ–¥–Ω–∏–µ –ª–∞–π–∫–∏ –Ω–∞ —Å—Ç–æ—Ä–∏—Å: 120"
            await update.message.reply_text(report)
            logger.info("‚úÖ /monthly_report response sent")

        async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
            logger.info(f"üì® /help from user {update.effective_user.id}")
            help_text = "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n" \
                        "- /start: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞\n" \
                        "- /daily_report: –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç\n" \
                        "- /monthly_report: –ú–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç\n"
            await update.message.reply_text(help_text, parse_mode='HTML')
            logger.info("‚úÖ /help response sent")

        app.add_handler(CommandHandler("start", start_cmd))
        app.add_handler(CommandHandler("daily_report", daily_report_cmd))
        app.add_handler(CommandHandler("monthly_report", monthly_report_cmd))
        app.add_handler(CommandHandler("help", help_cmd))
        logger.info("‚úÖ Commands registered")
        
        # Start the bot
        logger.info("ü§ñ STARTING TELEGRAM BOT...")
        await app.run_polling(drop_pending_updates=True)
        
    except ImportError as e:
        logger.error(f"‚ùå Import error: {e}. Please install python-telegram-bot.")
    except Exception as e:
        logger.error(f"‚ùå Bot startup error: {e}")
        import traceback
        logger.error(traceback.format_exc())

async def main():
    logger.info("üé¨ MAIN FUNCTION START")
    
    # Start the health server in a separate thread
    health_thread = threading.Thread(target=start_health_server, daemon=True)
    health_thread.start()
    logger.info("üè• Health server starting in background")
    
    await asyncio.sleep(2) # Give server a moment to start
    
    # Start the Telegram bot
    logger.info("ü§ñ Starting Telegram bot...")
    await start_working_bot()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Exception as e:
        logger.error(f"üí• CRITICAL ERROR: {e}")
        sys.exit(1)
