#!/usr/bin/env python3
"""
–£–ª—å—Ç—Ä–∞-–ø—Ä–æ—Å—Ç–æ–π health server –¥–ª—è Railway
–ë–ï–ó –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô - —Ç–æ–ª—å–∫–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ Python
"""
import os
from http.server import HTTPServer, BaseHTTPRequestHandler
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class HealthHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        if self.path == '/health':
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            self.wfile.write(b'{"status": "healthy", "service": "railway-health"}')
            logger.info("Health check successful")
        else:
            self.send_response(404)
            self.end_headers()
    
    def log_message(self, format, *args):
        # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logger.info(format % args)

def main():
    port = int(os.environ.get('PORT', 8080))
    
    logger.info(f"üöÄ Starting Railway Health Server on port {port}")
    
    server = HTTPServer(('0.0.0.0', port), HealthHandler)
    
    try:
        logger.info(f"‚úÖ Server ready at http://0.0.0.0:{port}")
        logger.info("üìä Health endpoint: /health")
        server.serve_forever()
    except KeyboardInterrupt:
        logger.info("üõë Server stopped")
        server.shutdown()

if __name__ == '__main__':
    main()
