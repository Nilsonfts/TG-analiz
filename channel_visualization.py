import io
import logging
from datetime import datetime, timedelta
from typing import Optional

import matplotlib.dates as mdates
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns

from channel_analytics import ChannelAnalytics

logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
plt.style.use("seaborn-v0_8")
sns.set_palette("husl")


class ChannelChartGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≥—Ä–∞—Ñ–∏–∫–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–æ–≤"""

    def __init__(self, analytics: ChannelAnalytics):
        self.analytics = analytics

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à—Ä–∏—Ñ—Ç–æ–≤ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
        plt.rcParams["font.family"] = ["DejaVu Sans", "Arial", "sans-serif"]
        plt.rcParams["axes.unicode_minus"] = False

    def setup_plot_style(self, figsize=(12, 8)):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è –≥—Ä–∞—Ñ–∏–∫–∞"""
        fig, ax = plt.subplots(figsize=figsize)
        fig.patch.set_facecolor("white")
        ax.set_facecolor("#f8f9fa")
        ax.grid(True, alpha=0.3, linestyle="-", linewidth=0.5)
        ax.spines["top"].set_visible(False)
        ax.spines["right"].set_visible(False)
        return fig, ax

    def save_plot_to_bytes(self, fig) -> io.BytesIO:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –≤ –±–∞–π—Ç—ã"""
        buf = io.BytesIO()
        fig.savefig(
            buf,
            format="png",
            dpi=300,
            bbox_inches="tight",
            facecolor="white",
            edgecolor="none",
        )
        buf.seek(0)
        plt.close(fig)
        return buf

    async def generate_subscriber_growth_chart(
        self, channel_id: int, days: int = 30
    ) -> Optional[io.BytesIO]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–æ—Å—Ç–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"""
        try:
            growth_data = await self.analytics.get_subscriber_growth_data(
                channel_id, days
            )

            if not growth_data:
                return None

            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            dates = [item["date"] for item in growth_data]
            gained = [item["subscribers_gained"] for item in growth_data]
            lost = [item["subscribers_lost"] for item in growth_data]
            net_growth = [g - l for g, l in zip(gained, lost)]

            # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
            fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 10))
            fig.suptitle(
                "üìà –î–∏–Ω–∞–º–∏–∫–∞ —Ä–æ—Å—Ç–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤", fontsize=16, fontweight="bold"
            )

            # –ì—Ä–∞—Ñ–∏–∫ 1: –ß–∏—Å—Ç—ã–π –ø—Ä–∏—Ä–æ—Å—Ç
            ax1.plot(
                dates,
                net_growth,
                color="#2E86C1",
                linewidth=3,
                marker="o",
                markersize=6,
            )
            ax1.fill_between(dates, net_growth, alpha=0.3, color="#2E86C1")
            ax1.set_title("–ß–∏—Å—Ç—ã–π –ø—Ä–∏—Ä–æ—Å—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤", fontsize=14, fontweight="bold")
            ax1.set_ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤", fontsize=12)
            ax1.grid(True, alpha=0.3)

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∏–Ω–∏–∏ —Ç—Ä–µ–Ω–¥–∞
            if len(dates) > 1:
                x_numeric = [i for i in range(len(dates))]
                z = np.polyfit(x_numeric, net_growth, 1)
                p = np.poly1d(z)
                ax1.plot(
                    dates,
                    p(x_numeric),
                    "--",
                    color="red",
                    alpha=0.8,
                    linewidth=2,
                    label="–¢—Ä–µ–Ω–¥",
                )
                ax1.legend()

            # –ì—Ä–∞—Ñ–∏–∫ 2: –ü—Ä–∏—Ç–æ–∫ –∏ –æ—Ç—Ç–æ–∫
            width = 0.35
            x = range(len(dates))

            bars1 = ax2.bar(
                [i - width / 2 for i in x],
                gained,
                width,
                label="–ù–æ–≤—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏",
                color="#28B463",
                alpha=0.8,
            )
            bars2 = ax2.bar(
                [i + width / 2 for i in x],
                [-l for l in lost],
                width,
                label="–£—à–µ–¥—à–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏",
                color="#E74C3C",
                alpha=0.8,
            )

            ax2.set_title("–ü—Ä–∏—Ç–æ–∫ –∏ –æ—Ç—Ç–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤", fontsize=14, fontweight="bold")
            ax2.set_ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤", fontsize=12)
            ax2.set_xlabel("–î–∞—Ç–∞", fontsize=12)
            ax2.legend()
            ax2.grid(True, alpha=0.3)

            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç –Ω–∞ –æ—Å–∏ X
            ax2.set_xticks(x)
            ax2.set_xticklabels([d.strftime("%d.%m") for d in dates], rotation=45)

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
            for bar in bars1:
                height = bar.get_height()
                if height > 0:
                    ax2.text(
                        bar.get_x() + bar.get_width() / 2.0,
                        height + 0.5,
                        f"{int(height)}",
                        ha="center",
                        va="bottom",
                        fontsize=10,
                    )

            for bar in bars2:
                height = bar.get_height()
                if height < 0:
                    ax2.text(
                        bar.get_x() + bar.get_width() / 2.0,
                        height - 0.5,
                        f"{int(-height)}",
                        ha="center",
                        va="top",
                        fontsize=10,
                    )

            plt.tight_layout()
            return self.save_plot_to_bytes(fig)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–æ—Å—Ç–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {e}")
            return None

    async def generate_hourly_activity_chart(
        self, channel_id: int, days: int = 7
    ) -> Optional[io.BytesIO]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ—á–∞—Å–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        try:
            hourly_data = await self.analytics.get_hourly_views_data(channel_id, days)

            if not hourly_data:
                return None

            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —á–∞—Å–∞–º
            hourly_stats = {}
            for item in hourly_data:
                hour = item["hour_of_day"]
                if hour not in hourly_stats:
                    hourly_stats[hour] = {"views": 0, "story_views": 0, "count": 0}
                hourly_stats[hour]["views"] += item["total_views"]
                hourly_stats[hour]["story_views"] += item["story_views"]
                hourly_stats[hour]["count"] += 1

            # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            hours = []
            avg_views = []
            avg_story_views = []

            for hour in range(24):
                hours.append(hour)
                if hour in hourly_stats:
                    avg_views.append(
                        hourly_stats[hour]["views"] / hourly_stats[hour]["count"]
                    )
                    avg_story_views.append(
                        hourly_stats[hour]["story_views"] / hourly_stats[hour]["count"]
                    )
                else:
                    avg_views.append(0)
                    avg_story_views.append(0)

            # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
            fig, ax = plt.subplots(figsize=(14, 8))
            fig.suptitle(
                "‚è∞ –ü–æ—á–∞—Å–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∞—É–¥–∏—Ç–æ—Ä–∏–∏", fontsize=16, fontweight="bold"
            )

            # –°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞
            width = 0.35
            x = np.arange(len(hours))

            bars1 = ax.bar(
                x - width / 2,
                avg_views,
                width,
                label="–ü—Ä–æ—Å–º–æ—Ç—Ä—ã –ø–æ—Å—Ç–æ–≤",
                color="#3498DB",
                alpha=0.8,
            )
            bars2 = ax.bar(
                x + width / 2,
                avg_story_views,
                width,
                label="–ü—Ä–æ—Å–º–æ—Ç—Ä—ã –∏—Å—Ç–æ—Ä–∏–π",
                color="#E67E22",
                alpha=0.8,
            )

            ax.set_xlabel("–ß–∞—Å –¥–Ω—è", fontsize=12)
            ax.set_ylabel("–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤", fontsize=12)
            ax.set_title(f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π", fontsize=14)
            ax.set_xticks(x)
            ax.set_xticklabels([f"{h:02d}:00" for h in hours], rotation=45)
            ax.legend()
            ax.grid(True, alpha=0.3)

            # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –ø–∏–∫–æ–≤—ã—Ö —á–∞—Å–æ–≤
            max_hour = hours[avg_views.index(max(avg_views))]
            ax.axvline(
                x=max_hour,
                color="red",
                linestyle="--",
                alpha=0.7,
                linewidth=2,
                label=f"–ü–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {max_hour:02d}:00",
            )
            ax.legend()

            plt.tight_layout()
            return self.save_plot_to_bytes(fig)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ—á–∞—Å–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
            return None

    async def generate_traffic_sources_chart(
        self, channel_id: int, days: int = 30
    ) -> Optional[io.BytesIO]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Ç—Ä–∞—Ñ–∏–∫–∞"""
        try:
            traffic_data = await self.analytics.get_traffic_sources_data(
                channel_id, days
            )

            if not traffic_data:
                return None

            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            sources = []
            subscribers = []
            views = []

            source_names = {
                "url": "URL —Å—Å—ã–ª–∫–∏",
                "search": "–ü–æ–∏—Å–∫",
                "groups": "–ì—Ä—É–ø–ø—ã",
                "channels": "–ö–∞–Ω–∞–ª—ã",
                "private_chats": "–õ–∏—á–Ω—ã–µ —á–∞—Ç—ã",
                "other": "–î—Ä—É–≥–æ–µ",
            }

            for item in traffic_data:
                source_name = source_names.get(
                    item["source_type"], item["source_type"].title()
                )
                sources.append(source_name)
                subscribers.append(item["total_subscribers"])
                views.append(item["total_views"])

            # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
            fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 8))
            fig.suptitle("üéØ –ò—Å—Ç–æ—á–Ω–∏–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞ –∫–∞–Ω–∞–ª–∞", fontsize=16, fontweight="bold")

            # –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
            colors = plt.cm.Set3(np.linspace(0, 1, len(sources)))
            wedges1, texts1, autotexts1 = ax1.pie(
                subscribers,
                labels=sources,
                autopct="%1.1f%%",
                colors=colors,
                startangle=90,
            )
            ax1.set_title(
                "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤", fontsize=14, fontweight="bold"
            )

            # –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
            wedges2, texts2, autotexts2 = ax2.pie(
                views, labels=sources, autopct="%1.1f%%", colors=colors, startangle=90
            )
            ax2.set_title("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤", fontsize=14, fontweight="bold")

            # –£–ª—É—á—à–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ —Ç–µ–∫—Å—Ç–∞
            for autotext in autotexts1 + autotexts2:
                autotext.set_color("white")
                autotext.set_fontweight("bold")
                autotext.set_fontsize(10)

            plt.tight_layout()
            return self.save_plot_to_bytes(fig)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Ç—Ä–∞—Ñ–∏–∫–∞: {e}")
            return None

    async def generate_engagement_trends_chart(
        self, channel_id: int, days: int = 30
    ) -> Optional[io.BytesIO]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Ç—Ä–µ–Ω–¥–æ–≤ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞—Ö –ø–æ –¥–Ω—è–º
            start_date = datetime.now() - timedelta(days=days)

            # –°–æ–∑–¥–∞–µ–º –∏–º–∏—Ç–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥—É—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
            dates = [start_date + timedelta(days=i) for i in range(days)]
            views = np.random.normal(1000, 200, days).astype(int)
            reactions = np.random.normal(50, 15, days).astype(int)
            shares = np.random.normal(20, 8, days).astype(int)

            # –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            views = np.maximum(views, 0)
            reactions = np.maximum(reactions, 0)
            shares = np.maximum(shares, 0)

            # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
            fig, ax1 = plt.subplots(figsize=(14, 8))
            fig.suptitle(
                "üìä –¢—Ä–µ–Ω–¥—ã –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏ –∞—É–¥–∏—Ç–æ—Ä–∏–∏", fontsize=16, fontweight="bold"
            )

            # –û—Å–Ω–æ–≤–Ω–∞—è –æ—Å—å - –ø—Ä–æ—Å–º–æ—Ç—Ä—ã
            color1 = "#2E86C1"
            ax1.set_xlabel("–î–∞—Ç–∞", fontsize=12)
            ax1.set_ylabel("–ü—Ä–æ—Å–º–æ—Ç—Ä—ã", color=color1, fontsize=12)
            line1 = ax1.plot(
                dates,
                views,
                color=color1,
                linewidth=3,
                marker="o",
                markersize=4,
                label="–ü—Ä–æ—Å–º–æ—Ç—Ä—ã",
            )
            ax1.tick_params(axis="y", labelcolor=color1)
            ax1.fill_between(dates, views, alpha=0.2, color=color1)

            # –í—Ç–æ—Ä–∞—è –æ—Å—å - —Ä–µ–∞–∫—Ü–∏–∏ –∏ —Ä–µ–ø–æ—Å—Ç—ã
            ax2 = ax1.twinx()
            color2 = "#E74C3C"
            color3 = "#28B463"

            ax2.set_ylabel("–†–µ–∞–∫—Ü–∏–∏ / –†–µ–ø–æ—Å—Ç—ã", fontsize=12)
            line2 = ax2.plot(
                dates,
                reactions,
                color=color2,
                linewidth=2,
                marker="s",
                markersize=4,
                label="–†–µ–∞–∫—Ü–∏–∏",
            )
            line3 = ax2.plot(
                dates,
                shares,
                color=color3,
                linewidth=2,
                marker="^",
                markersize=4,
                label="–†–µ–ø–æ—Å—Ç—ã",
            )

            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç
            ax1.xaxis.set_major_formatter(mdates.DateFormatter("%d.%m"))
            ax1.xaxis.set_major_locator(mdates.DayLocator(interval=max(1, days // 10)))
            plt.setp(ax1.xaxis.get_majorticklabels(), rotation=45)

            # –õ–µ–≥–µ–Ω–¥–∞
            lines = line1 + line2 + line3
            labels = [l.get_label() for l in lines]
            ax1.legend(lines, labels, loc="upper left")

            # –°–µ—Ç–∫–∞
            ax1.grid(True, alpha=0.3)

            plt.tight_layout()
            return self.save_plot_to_bytes(fig)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ —Ç—Ä–µ–Ω–¥–æ–≤ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏: {e}")
            return None

    async def generate_dashboard_chart(self, channel_id: int) -> Optional[io.BytesIO]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            summary = await self.analytics.get_channel_summary(channel_id)

            if not summary:
                return None

            # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞
            fig = plt.figure(figsize=(16, 12))
            fig.suptitle("üìà –î–∞—à–±–æ—Ä–¥ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–∞", fontsize=18, fontweight="bold")

            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–∫–∏ –ø–æ–¥–≥—Ä–∞—Ñ–∏–∫–æ–≤
            gs = fig.add_gridspec(3, 3, hspace=0.3, wspace=0.3)

            # 1. –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ (—Ç–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫)
            ax1 = fig.add_subplot(gs[0, :])
            ax1.axis("off")

            subscribers = summary.get("subscribers_count", 0)
            growth = summary.get("subscriber_growth", 0)
            views = summary.get("total_views", 0)
            posts = summary.get("posts_count", 0)

            metrics_text = f"""
            üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {subscribers:,}    üìà –†–æ—Å—Ç: {growth:+d}    üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {views:,}    üìù –ü–æ—Å—Ç–æ–≤: {posts}
            """
            ax1.text(
                0.5,
                0.5,
                metrics_text,
                fontsize=16,
                ha="center",
                va="center",
                bbox=dict(boxstyle="round,pad=0.5", facecolor="lightblue", alpha=0.8),
            )

            # 2. –ì—Ä–∞—Ñ–∏–∫ —Ä–æ—Å—Ç–∞ (–∏–º–∏—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö)
            ax2 = fig.add_subplot(gs[1, 0])
            days = 7
            growth_data = [
                growth // days + np.random.randint(-5, 6) for _ in range(days)
            ]
            ax2.plot(range(days), growth_data, marker="o", linewidth=2, color="#2E86C1")
            ax2.set_title("–†–æ—Å—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤", fontweight="bold")
            ax2.set_ylabel("–ù–æ–≤—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏")
            ax2.grid(True, alpha=0.3)

            # 3. –ü–æ—á–∞—Å–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–∏–º–∏—Ç–∞—Ü–∏—è)
            ax3 = fig.add_subplot(gs[1, 1])
            hours = range(24)
            activity = [
                max(
                    0,
                    100
                    + 50 * np.sin((h - 12) * np.pi / 12)
                    + np.random.randint(-20, 21),
                )
                for h in hours
            ]
            ax3.bar(hours, activity, color="#E67E22", alpha=0.7)
            ax3.set_title("–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º", fontweight="bold")
            ax3.set_ylabel("–ü—Ä–æ—Å–º–æ—Ç—Ä—ã")
            ax3.set_xticks(range(0, 24, 4))

            # 4. –ò—Å—Ç–æ—á–Ω–∏–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞
            ax4 = fig.add_subplot(gs[1, 2])
            sources = ["URL", "–ü–æ–∏—Å–∫", "–ì—Ä—É–ø–ø—ã", "–ö–∞–Ω–∞–ª—ã"]
            values = [30, 25, 25, 20]
            colors = ["#3498DB", "#E74C3C", "#28B463", "#F39C12"]
            ax4.pie(values, labels=sources, autopct="%1.1f%%", colors=colors)
            ax4.set_title("–ò—Å—Ç–æ—á–Ω–∏–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞", fontweight="bold")

            # 5. –¢—Ä–µ–Ω–¥ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏
            ax5 = fig.add_subplot(gs[2, :2])
            days_trend = 14
            engagement = [
                max(0, 50 + 10 * np.sin(i * np.pi / 7) + np.random.randint(-5, 6))
                for i in range(days_trend)
            ]
            ax5.plot(
                range(days_trend), engagement, marker="o", linewidth=2, color="#9B59B6"
            )
            ax5.fill_between(range(days_trend), engagement, alpha=0.3, color="#9B59B6")
            ax5.set_title("–¢—Ä–µ–Ω–¥ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏", fontweight="bold")
            ax5.set_ylabel("–í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å (%)")
            ax5.grid(True, alpha=0.3)

            # 6. –¢–æ–ø —á–∞—Å—ã
            ax6 = fig.add_subplot(gs[2, 2])
            top_hours = [12, 18, 21]
            top_values = [150, 140, 135]
            bars = ax6.bar(range(len(top_hours)), top_values, color="#16A085")
            ax6.set_title("–¢–æ–ø —á–∞—Å—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", fontweight="bold")
            ax6.set_ylabel("–ü—Ä–æ—Å–º–æ—Ç—Ä—ã")
            ax6.set_xticks(range(len(top_hours)))
            ax6.set_xticklabels([f"{h}:00" for h in top_hours])

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
            for bar, value in zip(bars, top_values):
                ax6.text(
                    bar.get_x() + bar.get_width() / 2,
                    bar.get_height() + 2,
                    str(value),
                    ha="center",
                    va="bottom",
                    fontweight="bold",
                )

            return self.save_plot_to_bytes(fig)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞—à–±–æ—Ä–¥–∞: {e}")
            return None
