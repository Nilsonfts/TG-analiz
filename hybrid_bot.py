#!/usr/bin/env python3
"""
Hybrid Railway Bot - –í–°–ï–ì–î–ê —Ä–∞–±–æ—Ç–∞–µ—Ç + –ø–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
–ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç healthcheck + –∑–∞–ø—É—Å–∫–∞–µ—Ç Telegram –±–æ—Ç
"""
import asyncio
import json
import logging
import os
import sys
import threading
import time
from http.server import HTTPServer, BaseHTTPRequestHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class HealthHandler(BaseHTTPRequestHandler):
    """HTTP handler - –í–°–ï–ì–î–ê —Ä–∞–±–æ—Ç–∞–µ—Ç"""
    
    def log_message(self, format, *args):
        # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logger.info(format % args)
    
    def do_GET(self):
        if self.path == '/health':
            # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π healthcheck –¥–ª—è Railway
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            
            response = {
                "status": "healthy",
                "service": "telegram-analytics-bot",
                "bot_status": bot_manager.get_status(),
                "uptime": time.time() - start_time,
                "version": "hybrid-1.0"
            }
            
            self.wfile.write(json.dumps(response, indent=2).encode('utf-8'))
            logger.info("‚úÖ Health check successful")
            
        elif self.path == '/status':
            # –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            
            status = {
                "server": "running",
                "bot": bot_manager.get_detailed_status(),
                "config": bot_manager.get_config_status(),
                "timestamp": time.time()
            }
            
            self.wfile.write(json.dumps(status, indent=2).encode('utf-8'))
            
        else:
            # –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            self.send_response(200)
            self.send_header('Content-type', 'text/html')
            self.end_headers()
            
            html = """
            <h1>ü§ñ Telegram Analytics Bot</h1>
            <p><strong>Status:</strong> Running</p>
            <p><strong>Bot Status:</strong> {}</p>
            <p><a href="/health">Health Check</a> | <a href="/status">Status JSON</a></p>
            """.format(bot_manager.get_status())
            
            self.wfile.write(html.encode('utf-8'))

class BotManager:
    """–£–ø—Ä–∞–≤–ª—è–µ—Ç Telegram –±–æ—Ç–æ–º —Å graceful fallback"""
    
    def __init__(self):
        self.status = "initializing"
        self.bot = None
        self.bot_task = None
        self.error_count = 0
        self.last_error = None
        
    def get_status(self):
        return self.status
    
    def get_detailed_status(self):
        return {
            "status": self.status,
            "errors": self.error_count,
            "last_error": self.last_error,
            "bot_running": self.bot is not None,
            "task_running": self.bot_task is not None and not self.bot_task.done()
        }
    
    def get_config_status(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        config = {}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        config['bot_token'] = "‚úÖ" if os.getenv('BOT_TOKEN') else "‚ùå"
        config['api_id'] = "‚úÖ" if os.getenv('API_ID') or os.getenv('TELEGRAM_API_ID') else "‚ùå"
        config['api_hash'] = "‚úÖ" if os.getenv('API_HASH') or os.getenv('TELEGRAM_API_HASH') else "‚ùå"
        config['database'] = "‚úÖ" if os.getenv('DATABASE_URL') else "‚ùå"
        
        return config
    
    async def start_bot(self):
        """–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å graceful fallback"""
        try:
            self.status = "starting"
            logger.info("ü§ñ Attempting to start Telegram bot...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
            bot_token = os.getenv('BOT_TOKEN')
            if not bot_token:
                raise ValueError("BOT_TOKEN not found")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π –±–æ—Ç
            try:
                from src.config import settings
                from src.bot import start_bot
                
                logger.info("üì¶ Loaded full bot modules")
                self.bot = await start_bot()
                self.status = "running_full"
                logger.info("‚úÖ Full Telegram bot started successfully!")
                
            except ImportError as e:
                logger.warning(f"‚ö†Ô∏è Full bot modules not available: {e}")
                # Fallback –∫ –ø—Ä–æ—Å—Ç–æ–º—É –±–æ—Ç—É
                await self.start_simple_bot(bot_token)
                
        except Exception as e:
            self.error_count += 1
            self.last_error = str(e)
            logger.error(f"‚ùå Bot start failed: {e}")
            self.status = "failed"
    
    async def start_simple_bot(self, bot_token):
        """–ü—Ä–æ—Å—Ç–æ–π –±–æ—Ç –∫–∞–∫ fallback"""
        try:
            # –ü—Ä–æ—Å—Ç–µ–π—à–∏–π –±–æ—Ç —Å aiogram
            from aiogram import Bot, Dispatcher
            from aiogram.types import Message
            from aiogram.filters import Command
            
            bot = Bot(token=bot_token)
            dp = Dispatcher()
            
            @dp.message(Command("start"))
            async def start_command(message: Message):
                await message.answer("ü§ñ Telegram Analytics Bot –∑–∞–ø—É—â–µ–Ω!\n\n–°—Ç–∞—Ç—É—Å: –ë–∞–∑–æ–≤—ã–π —Ä–µ–∂–∏–º")
            
            @dp.message(Command("status"))
            async def status_command(message: Message):
                await message.answer(f"üìä –°—Ç–∞—Ç—É—Å: {self.status}\nüïê –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {time.time() - start_time:.0f}—Å")
            
            logger.info("üîÑ Starting simple bot...")
            self.bot = bot
            self.status = "running_simple"
            
            await dp.start_polling(bot)
            
        except Exception as e:
            logger.error(f"‚ùå Simple bot failed: {e}")
            self.status = "health_only"
            # –î–∞–∂–µ –µ—Å–ª–∏ –±–æ—Ç –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è, health server —Ä–∞–±–æ—Ç–∞–µ—Ç!

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
start_time = time.time()
bot_manager = BotManager()

def start_http_server():
    """–ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞ - –ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–û —Ä–∞–±–æ—Ç–∞–µ—Ç"""
    port = int(os.environ.get('PORT', 8080))
    
    logger.info(f"üåê Starting HTTP server on port {port}")
    
    server = HTTPServer(('0.0.0.0', port), HealthHandler)
    
    logger.info(f"‚úÖ HTTP server ready at http://0.0.0.0:{port}")
    logger.info("üìä Endpoints: /health, /status, /")
    
    try:
        server.serve_forever()
    except KeyboardInterrupt:
        logger.info("üõë HTTP server stopped")
        server.shutdown()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ"""
    logger.info("üöÄ Starting Hybrid Railway Bot...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ (–¥–ª—è healthcheck)
    http_thread = threading.Thread(target=start_http_server, daemon=True)
    http_thread.start()
    
    # –î–∞–µ–º —Å–µ—Ä–≤–µ—Ä—É –≤—Ä–µ–º—è –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
    await asyncio.sleep(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ (—Å fallback)
    try:
        await bot_manager.start_bot()
    except Exception as e:
        logger.error(f"Bot startup error: {e}")
        bot_manager.status = "health_only"
    
    # –î–µ—Ä–∂–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∂–∏–≤—ã–º
    logger.info(f"üéØ Application running in mode: {bot_manager.status}")
    
    try:
        while True:
            await asyncio.sleep(10)
            if bot_manager.status == "failed":
                logger.info("üîÑ Attempting bot restart...")
                try:
                    await bot_manager.start_bot()
                except:
                    pass
    except KeyboardInterrupt:
        logger.info("üõë Application stopped")

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üëã Goodbye!")
