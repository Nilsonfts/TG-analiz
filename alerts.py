"""
–°–∏—Å—Ç–µ–º–∞ –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è Telegram Analytics Bot
–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –≤—Å–ø–ª–µ—Å–∫–∏ –∏ –∞–Ω–æ–º–∞–ª–∏–∏ –≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
"""
import asyncio
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional
from dataclasses import dataclass

logger = logging.getLogger(__name__)

@dataclass
class Alert:
    """–ú–æ–¥–µ–ª—å –∞–ª–µ—Ä—Ç–∞"""
    alert_type: str
    group_id: int
    group_name: str
    message: str
    value: float
    threshold: float
    timestamp: datetime

class AlertSystem:
    """–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –∞–ª–µ—Ä—Ç–æ–≤"""
    
    def __init__(self, db, bot):
        self.db = db
        self.bot = bot
        self.alert_settings = {
            'viral_multiplier': 3.0,  # –í—Å–ø–ª–µ—Å–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ N —Ä–∞–∑
            'drop_threshold': 0.5,    # –ü–∞–¥–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–æ N –æ—Ç –Ω–æ—Ä–º—ã
            'new_users_threshold': 10, # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —á–∞—Å
            'spam_threshold': 50,     # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ —á–∞—Å
        }
        self.last_checks = {}
    
    async def check_activity_spikes(self, group_id: int, group_name: str) -> List[Alert]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–ø–ª–µ—Å–∫–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        alerts = []
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —á–∞—Å–∞ –∏ –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ 24 —á–∞—Å–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            now = datetime.now()
            last_hour = now - timedelta(hours=1)
            last_24h = now - timedelta(hours=24)
            
            # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
            recent_stats = await self.db.get_daily_stats(group_id, now)
            recent_count = recent_stats.get('messages_count', 0)
            
            # –°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ 24 —á–∞—Å–∞ (–ø–æ —á–∞—Å–∞–º)
            hourly_data = await self.db.get_hourly_activity(group_id, days=1)
            if hourly_data:
                avg_hourly = sum(hourly_data.values()) / max(len(hourly_data), 1)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–ø–ª–µ—Å–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                if recent_count > avg_hourly * self.alert_settings['viral_multiplier']:
                    alerts.append(Alert(
                        alert_type="viral_spike",
                        group_id=group_id,
                        group_name=group_name,
                        message=f"üî• –í–°–ü–õ–ï–°–ö –ê–ö–¢–ò–í–ù–û–°–¢–ò!\nüìà {recent_count} —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —á–∞—Å\nüìä –û–±—ã—á–Ω–æ: {avg_hourly:.1f}/—á–∞—Å\nüöÄ –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –≤ {recent_count/avg_hourly:.1f}x —Ä–∞–∑!",
                        value=recent_count,
                        threshold=avg_hourly * self.alert_settings['viral_multiplier'],
                        timestamp=now
                    ))
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–¥–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                elif recent_count < avg_hourly * self.alert_settings['drop_threshold'] and avg_hourly > 5:
                    alerts.append(Alert(
                        alert_type="activity_drop",
                        group_id=group_id,
                        group_name=group_name,
                        message=f"üìâ –ü–ê–î–ï–ù–ò–ï –ê–ö–¢–ò–í–ù–û–°–¢–ò\nüìà {recent_count} —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —á–∞—Å\nüìä –û–±—ã—á–Ω–æ: {avg_hourly:.1f}/—á–∞—Å\n‚ö†Ô∏è –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É–ø–∞–ª–∞ –Ω–∞ {((avg_hourly - recent_count) / avg_hourly * 100):.1f}%",
                        value=recent_count,
                        threshold=avg_hourly * self.alert_settings['drop_threshold'],
                        timestamp=now
                    ))
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id}: {e}")
        
        return alerts
    
    async def check_new_users_spike(self, group_id: int, group_name: str) -> List[Alert]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–ø–ª–µ—Å–∫–∞ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        alerts = []
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
            now = datetime.now()
            hour_ago = now - timedelta(hours=1)
            
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –ë–î –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            # –ü–æ–∫–∞ —á—Ç–æ —É–ø—Ä–æ—â—ë–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id}: {e}")
        
        return alerts
    
    async def check_spam_activity(self, group_id: int, group_name: str) -> List[Alert]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"""
        alerts = []
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
            now = datetime.now()
            stats = await self.db.get_daily_stats(group_id, now)
            
            if stats and stats.get('top_users'):
                for user in stats['top_users'][:3]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ø-3
                    message_count = user.get('message_count', 0)
                    if message_count > self.alert_settings['spam_threshold']:
                        username = user.get('username', f"User {user.get('user_id', 'Unknown')}")
                        alerts.append(Alert(
                            alert_type="spam_detection",
                            group_id=group_id,
                            group_name=group_name,
                            message=f"üö® –ü–û–î–û–ó–†–ï–ù–ò–ï –ù–ê –°–ü–ê–ú\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\nüìä {message_count} —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —á–∞—Å\n‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç {self.alert_settings['spam_threshold']} —Å–æ–æ–±—â–µ–Ω–∏–π/—á–∞—Å",
                            value=message_count,
                            threshold=self.alert_settings['spam_threshold'],
                            timestamp=now
                        ))
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ø–∞–º–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id}: {e}")
        
        return alerts
    
    async def check_all_groups(self) -> List[Alert]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø"""
        all_alerts = []
        
        try:
            groups = await self.db.get_active_groups()
            
            for group in groups:
                group_alerts = []
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∞–ª–µ—Ä—Ç–æ–≤
                group_alerts.extend(await self.check_activity_spikes(group.group_id, group.title))
                group_alerts.extend(await self.check_spam_activity(group.group_id, group.title))
                
                all_alerts.extend(group_alerts)
                
                # –î–µ–ª–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏
                await asyncio.sleep(1)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥—Ä—É–ø–ø –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤: {e}")
        
        return all_alerts
    
    async def send_alert(self, alert: Alert, admin_users: List[int]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
        try:
            alert_message = f"""
üö® **–ê–õ–ï–†–¢ –°–ò–°–¢–ï–ú–´ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê**

üè∑Ô∏è **–ì—Ä—É–ø–ø–∞:** {alert.group_name}
‚è∞ **–í—Ä–µ–º—è:** {alert.timestamp.strftime('%d.%m.%Y %H:%M')}
üîç **–¢–∏–ø:** {alert.alert_type}

{alert.message}

üìã **–î–µ—Ç–∞–ª–∏:**
‚Ä¢ –ó–Ω–∞—á–µ–Ω–∏–µ: {alert.value}
‚Ä¢ –ü–æ—Ä–æ–≥: {alert.threshold}
‚Ä¢ ID –≥—Ä—É–ø–ø—ã: {alert.group_id}
            """
            
            for admin_id in admin_users:
                try:
                    await self.bot.send_message(
                        chat_id=admin_id,
                        text=alert_message,
                        parse_mode='Markdown'
                    )
                    logger.info(f"–ê–ª–µ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞: {e}")
    
    async def run_monitoring_cycle(self, admin_users: List[int]):
        """–ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        try:
            logger.info("üö® –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–ª–µ—Ä—Ç–æ–≤...")
            
            alerts = await self.check_all_groups()
            
            if alerts:
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(alerts)} –∞–ª–µ—Ä—Ç–æ–≤")
                for alert in alerts:
                    await self.send_alert(alert, admin_users)
            else:
                logger.info("–ê–ª–µ—Ä—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - –≤—Å—ë —Å–ø–æ–∫–æ–π–Ω–æ")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
    
    def update_settings(self, new_settings: Dict[str, float]):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–ª–µ—Ä—Ç–æ–≤"""
        self.alert_settings.update(new_settings)
        logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {self.alert_settings}")
