#!/usr/bin/env python3
"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º–∏ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ
"""

import asyncio
import os
import sys
from dotenv import load_dotenv
from telethon import TelegramClient

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from database.models import get_db, TelegramGroup

load_dotenv()

class GroupManager:
    def __init__(self):
        self.api_id = int(os.getenv('API_ID'))
        self.api_hash = os.getenv('API_HASH')
        self.client = TelegramClient('session', self.api_id, self.api_hash)
    
    async def add_group_by_username(self, username: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ø–æ username"""
        try:
            await self.client.start()
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ
            entity = await self.client.get_entity(username)
            
            db = get_db()
            try:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –≥—Ä—É–ø–ø–∞
                existing = db.query(TelegramGroup).filter(
                    TelegramGroup.group_id == entity.id
                ).first()
                
                if existing:
                    print(f"‚ö†Ô∏è  –ì—Ä—É–ø–ø–∞ {username} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
                    return
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
                group = TelegramGroup(
                    group_id=entity.id,
                    username=getattr(entity, 'username', None),
                    title=getattr(entity, 'title', username),
                    description=getattr(entity, 'about', ''),
                    members_count=getattr(entity, 'participants_count', 0)
                )
                
                db.add(group)
                db.commit()
                
                print(f"‚úÖ –ì—Ä—É–ø–ø–∞ '{group.title}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
                print(f"   ID: {group.group_id}")
                print(f"   –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {group.members_count}")
                
            finally:
                db.close()
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã: {e}")
        finally:
            await self.client.disconnect()
    
    async def list_groups(self):
        """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥—Ä—É–ø–ø –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ"""
        db = get_db()
        try:
            groups = db.query(TelegramGroup).all()
            
            if not groups:
                print("üì≠ –ù–µ—Ç –≥—Ä—É–ø–ø –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ")
                return
            
            print("üìä –ì—Ä—É–ø–ø—ã –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ:")
            print("-" * 60)
            
            for group in groups:
                status = "üü¢" if group.is_active else "üî¥"
                print(f"{status} {group.title}")
                print(f"   ID: {group.group_id}")
                print(f"   Username: @{group.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}")
                print(f"   –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {group.members_count:,}")
                print(f"   –°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–Ω–∞' if group.is_active else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}")
                print("-" * 60)
                
        finally:
            db.close()
    
    async def toggle_group_status(self, group_id: int, is_active: bool):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≥—Ä—É–ø–ø—ã"""
        db = get_db()
        try:
            group = db.query(TelegramGroup).filter(
                TelegramGroup.group_id == group_id
            ).first()
            
            if not group:
                print(f"‚ùå –ì—Ä—É–ø–ø–∞ —Å ID {group_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            group.is_active = is_active
            db.commit()
            
            status = "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞" if is_active else "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞"
            print(f"‚úÖ –ì—Ä—É–ø–ø–∞ '{group.title}' {status}")
            
        finally:
            db.close()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    manager = GroupManager()
    
    if len(sys.argv) < 2:
        print("ü§ñ –£—Ç–∏–ª–∏—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º–∏")
        print("\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python manage_groups.py add @username     # –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É")
        print("  python manage_groups.py list              # –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø") 
        print("  python manage_groups.py enable GROUP_ID   # –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—É")
        print("  python manage_groups.py disable GROUP_ID  # –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—É")
        return
    
    command = sys.argv[1]
    
    if command == "add" and len(sys.argv) > 2:
        username = sys.argv[2].replace('@', '')
        await manager.add_group_by_username(username)
    
    elif command == "list":
        await manager.list_groups()
    
    elif command == "enable" and len(sys.argv) > 2:
        group_id = int(sys.argv[2])
        await manager.toggle_group_status(group_id, True)
    
    elif command == "disable" and len(sys.argv) > 2:
        group_id = int(sys.argv[2])
        await manager.toggle_group_status(group_id, False)
    
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")

if __name__ == "__main__":
    asyncio.run(main())
