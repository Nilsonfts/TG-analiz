#!/usr/bin/env python3
"""
Initialize database and create first Alembic migration.
"""
import asyncio
import os
import sys

# Add src to path
sys.path.insert(0, os.path.join(os.path.dirname(os.path.dirname(__file__)), 'src'))

from src.config import settings
from src.db.models import DatabaseManager
from src.utils.logging import get_logger

logger = get_logger("init_db")


async def init_database():
    """Initialize database and create tables."""
    logger.info("ÔøΩÔ∏è Initializing database...")
    
    try:
        # Create database manager
        db_manager = DatabaseManager(settings.database_url)
        
        # Create all tables
        await db_manager.create_tables()
        
        logger.info("‚úÖ Database tables created successfully")
        
        # Close connections
        await db_manager.close()
        
        return True
        
    except Exception as e:
        logger.error("‚ùå Failed to initialize database", error=str(e))
        return False

def create_alembic_migration():
    """Create initial Alembic migration."""
    logger.info("üìù Creating Alembic migration...")
    
    try:
        import subprocess
        
        # Create initial migration
        result = subprocess.run([
            "alembic", "revision", "--autogenerate", 
            "-m", "Initial migration with all tables"
        ], capture_output=True, text=True)
        
        if result.returncode == 0:
            logger.info("‚úÖ Alembic migration created successfully")
            return True
        else:
            logger.error("‚ùå Failed to create migration", stderr=result.stderr)
            return False
            
    except subprocess.CalledProcessError as e:
        logger.error("‚ùå Alembic command failed", error=str(e))
        return False
    except FileNotFoundError:
        logger.error("‚ùå Alembic not found - install with: pip install alembic")
        return False


async def main():
    """Main initialization function."""
    logger.info("üöÄ Database initialization started...")
    
    # Check if database URL is configured
    if not settings.database_url:
        logger.error("‚ùå DATABASE_URL not configured")
        return 1
    
    # Initialize database
    if not await init_database():
        return 1
    
    # Create Alembic migration
    if not create_alembic_migration():
        logger.warning("‚ö†Ô∏è Migration creation failed - you may need to run manually")
    
    logger.info("‚úÖ Database initialization completed")
    return 0


if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
        'API_HASH',
        'DATABASE_URL'
    ]
    
    missing_vars = []
    for var in required_vars:
        if not os.getenv(var):
            missing_vars.append(var)
    
    if missing_vars:
        print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        for var in missing_vars:
            print(f"   - {var}")
        print("\nüìù –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –Ω–∞ –æ—Å–Ω–æ–≤–µ .env.example –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")
        return False
    
    print("‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    return True

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram Analytics Bot")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not check_environment():
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await init_database()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –≥—Ä—É–ø–ø
    add_sample_groups()
    
    print("\n" + "=" * 50)
    print("üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –û–±–Ω–æ–≤–∏—Ç–µ ID –≥—Ä—É–ø–ø –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ")
    print("2. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç –≤ –≥—Ä—É–ø–ø—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å")
    print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç –∫–æ–º–∞–Ω–¥–æ–π: python main.py")
    print("\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –≤ –±–æ—Ç–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")

if __name__ == "__main__":
    asyncio.run(main())
