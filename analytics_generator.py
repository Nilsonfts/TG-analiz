import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from datetime import datetime, timedelta
import io
import numpy as np
from typing import Optional, Dict, Any

async def generate_channel_analytics_image(real_stats: Optional[Dict[str, Any]] = None) -> io.BytesIO:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç PNG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –†–ï–ê–õ–¨–ù–û–ô –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π –∫–∞–Ω–∞–ª–∞
    """
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à—Ä–∏—Ñ—Ç–æ–≤ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
    plt.rcParams['font.family'] = ['DejaVu Sans', 'Arial Unicode MS', 'Tahoma']
    plt.rcParams['axes.unicode_minus'] = False
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É —Å —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ–º —Å—Ç–æ—Ä–æ–Ω 4:3
    fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(16, 12))
    fig.suptitle('üìä –†–ï–ê–õ–¨–ù–ê–Ø –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ Telegram-–∫–∞–Ω–∞–ª–∞', fontsize=20, fontweight='bold', y=0.95)
    
    # –ò–°–ü–û–õ–¨–ó–£–ï–ú –¢–û–õ–¨–ö–û –†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï!
    if real_stats and isinstance(real_stats, dict):
        channel_name = real_stats.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª')
        current_subscribers = real_stats.get('participants_count', 0)
        total_views = real_stats.get('total_views', 0)
        total_reactions = real_stats.get('total_reactions', 0)
        total_forwards = real_stats.get('total_forwards', 0)
        posts_count = real_stats.get('posts', 0)
        er_value = real_stats.get('er', 0.0)
        
        # –ó–∞—â–∏—Ç–∞ –æ—Ç None –∑–Ω–∞—á–µ–Ω–∏–π
        current_subscribers = int(current_subscribers or 0)
        total_views = int(total_views or 0)
        total_reactions = int(total_reactions or 0)
        total_forwards = int(total_forwards or 0)
        posts_count = int(posts_count or 0)
        er_value = float(er_value or 0.0)
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç!
        channel_name = '–ù–ï–¢ –î–ê–ù–ù–´–•'
        current_subscribers = 0
        total_views = 0
        total_reactions = 0
        total_forwards = 0
        posts_count = 0
        er_value = 0.0
    
    # 1. –ì—Ä–∞—Ñ–∏–∫ —Ä–µ–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –≤–º–µ—Å—Ç–æ "—Ä–æ—Å—Ç–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"
    ax1.set_title('ÔøΩ –†–µ–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞', fontsize=14, fontweight='bold')
    
    if posts_count > 0:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –†–ï–ê–õ–¨–ù–´–ï –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–Ω—Ç–µ–Ω—Ç–µ
        metrics_names = ['–ü–æ—Å—Ç—ã', '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã\n(—Ç—ã—Å.)', '–†–µ–∞–∫—Ü–∏–∏', '–†–µ–ø–æ—Å—Ç—ã']
        metrics_values = [
            posts_count,
            total_views // 1000 if total_views > 1000 else total_views,
            total_reactions,
            total_forwards
        ]
        
        bars = ax1.bar(metrics_names, metrics_values, color=['#2196F3', '#4CAF50', '#FF9800', '#9C27B0'], alpha=0.8)
        ax1.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', fontsize=12)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
        for bar, value in zip(bars, metrics_values):
            height = bar.get_height()
            ax1.text(bar.get_x() + bar.get_width()/2., height + max(height*0.01, 1),
                    f'{int(value)}', ha='center', va='bottom', fontweight='bold')
    else:
        ax1.text(0.5, 0.5, '–ù–ï–¢ –î–ê–ù–ù–´–• –û –ü–û–°–¢–ê–•', ha='center', va='center', 
                transform=ax1.transAxes, fontsize=16, color='red', fontweight='bold')
        ax1.set_xlim(0, 1)
        ax1.set_ylim(0, 1)
    
    # 2. –†–ï–ê–õ–¨–ù–´–ô Engagement Rate
    ax2.set_title('üéØ Engagement Rate (–†–ï–ê–õ–¨–ù–´–ô)', fontsize=14, fontweight='bold')
    
    if current_subscribers > 0 and posts_count > 0:
        # –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç ER
        total_engagement = total_reactions + total_forwards
        er_percentage = (total_engagement / current_subscribers) * 100
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã ER
        components = ['–†–µ–∞–∫—Ü–∏–∏', '–†–µ–ø–æ—Å—Ç—ã', 'ER %']
        values = [
            total_reactions / max(current_subscribers, 1) * 100,
            total_forwards / max(current_subscribers, 1) * 100,
            er_percentage
        ]
        colors = ['#FF9800', '#9C27B0', '#4CAF50']
        
        bars = ax2.bar(components, values, color=colors, alpha=0.8)
        ax2.set_ylabel('–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –∞—É–¥–∏—Ç–æ—Ä–∏–∏', fontsize=12)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
        for bar, value in zip(bars, values):
            height = bar.get_height()
            ax2.text(bar.get_x() + bar.get_width()/2., height + max(height*0.01, 0.01),
                    f'{value:.2f}%', ha='center', va='bottom', fontweight='bold')
    else:
        ax2.text(0.5, 0.5, '–ù–ï–¢ –î–ê–ù–ù–´–• –î–õ–Ø ER', ha='center', va='center', 
                transform=ax2.transAxes, fontsize=16, color='red', fontweight='bold')
        ax2.set_xlim(0, 1)
        ax2.set_ylim(0, 1)
    
    # 3. –†–ï–ê–õ–¨–ù–ê–Ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–≤–º–µ—Å—Ç–æ "–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –¥–Ω—è–º")
    ax3.set_title('ÔøΩ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞', fontsize=14, fontweight='bold')
    
    if posts_count > 0 and total_views > 0:
        # –†–µ–∞–ª—å–Ω—ã–µ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        avg_views_per_post = total_views / posts_count
        avg_reactions_per_post = total_reactions / posts_count
        avg_forwards_per_post = total_forwards / posts_count
        
        metrics = ['–°—Ä. –ø—Ä–æ—Å–º–æ—Ç—Ä—ã', '–°—Ä. —Ä–µ–∞–∫—Ü–∏–∏', '–°—Ä. —Ä–µ–ø–æ—Å—Ç—ã']
        values = [avg_views_per_post, avg_reactions_per_post, avg_forwards_per_post]
        
        ax3.bar(metrics, values, color='#9C27B0', alpha=0.7)
        ax3.set_ylabel('–°—Ä–µ–¥–Ω–µ–µ –Ω–∞ –ø–æ—Å—Ç', fontsize=12)
        ax3.grid(True, alpha=0.3, axis='y')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
        for i, value in enumerate(values):
            ax3.text(i, value + max(value*0.01, 1), f'{int(value)}', 
                    ha='center', va='bottom', fontweight='bold')
    else:
        ax3.text(0.5, 0.5, '–ù–ï–¢ –î–ê–ù–ù–´–• –û –ö–û–ù–¢–ï–ù–¢–ï', ha='center', va='center', 
                transform=ax3.transAxes, fontsize=16, color='red', fontweight='bold')
        ax3.set_xlim(0, 1)
        ax3.set_ylim(0, 1)
    
    # 4. –†–ï–ê–õ–¨–ù–´–ï –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    ax4.set_title('üéØ –†–ï–ê–õ–¨–ù–´–ï –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏', fontsize=14, fontweight='bold')
    ax4.axis('off')
    
    # –¢–û–õ–¨–ö–û –†–ï–ê–õ–¨–ù–´–ï –†–ê–°–ß–ï–¢–´!
    if current_subscribers > 0 and posts_count > 0:
        total_subs = f"{current_subscribers:,}"
        total_engagement = total_reactions + total_forwards
        er_rate = f"{(total_engagement / current_subscribers * 100):.2f}%"
        avg_views_per_post = int(total_views / posts_count) if posts_count > 0 else 0
        
        # VTR (View Through Rate) - —Å–∫–æ–ª—å–∫–æ % –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –≤–∏–¥–∏—Ç –ø–æ—Å—Ç—ã
        vtr_rate = f"{(total_views / posts_count / current_subscribers * 100):.1f}%" if posts_count > 0 else "0%"
        
        metrics_text = f"""
üì∫ –ö–∞–Ω–∞–ª: {channel_name}
üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {total_subs}

ÔøΩ –†–ï–ê–õ–¨–ù–´–ï –ú–ï–¢–†–ò–ö–ò:
   ‚Ä¢ –ü–æ—Å—Ç–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {posts_count}
   ‚Ä¢ –û–±—â–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: {total_views:,}
   ‚Ä¢ –û–±—â–∏–µ —Ä–µ–∞–∫—Ü–∏–∏: {total_reactions:,}
   ‚Ä¢ –û–±—â–∏–µ —Ä–µ–ø–æ—Å—Ç—ã: {total_forwards:,}

üí° –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ï –ö–ü–ò:
   ‚Ä¢ ER (Engagement Rate): {er_rate}
   ‚Ä¢ VTR (View Through Rate): {vtr_rate}
   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã/–ø–æ—Å—Ç: {avg_views_per_post:,}
   
ÔøΩ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —á–µ—Ä–µ–∑ Telethon API
"""
    else:
        metrics_text = f"""
üì∫ –ö–∞–Ω–∞–ª: {channel_name}
üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {current_subscribers:,}

‚ùå –ù–ï–¢ –î–ê–ù–ù–´–• –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê:
   ‚Ä¢ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ—Å—Ç–æ–≤
   ‚Ä¢ –ò–ª–∏ –∫–∞–Ω–∞–ª –±–µ–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
   ‚Ä¢ –ò–ª–∏ –æ—à–∏–±–∫–∞ API

üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:
   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telethon
   ‚Ä¢ –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É
   ‚Ä¢ –ù–∞–ª–∏—á–∏–µ –ø–æ—Å—Ç–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ
"""
    
    ax4.text(0.05, 0.95, metrics_text, transform=ax4.transAxes, fontsize=12,
             verticalalignment='top', fontfamily='monospace',
             bbox=dict(boxstyle='round,pad=0.5', facecolor='lightblue', alpha=0.3))
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—â–µ–≥–æ —Å—Ç–∏–ª—è
    plt.tight_layout()
    fig.patch.set_facecolor('white')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫
    fig.text(0.95, 0.02, 'Generated by TG Analytics Bot', 
             ha='right', va='bottom', fontsize=8, alpha=0.5)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ BytesIO
    buf = io.BytesIO()
    plt.savefig(buf, format='png', dpi=300, bbox_inches='tight', 
                facecolor='white', edgecolor='none')
    buf.seek(0)
    plt.close(fig)
    
    return buf
