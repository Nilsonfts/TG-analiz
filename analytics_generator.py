import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from datetime import datetime, timedelta
import io
import numpy as np
from typing import Optional, Dict, Any

async def generate_channel_analytics_image(real_stats: Optional[Dict[str, Any]] = None) -> io.BytesIO:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç PNG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π –∫–∞–Ω–∞–ª–∞ –≤ —Å—Ç–∏–ª–µ Telemetr
    """
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à—Ä–∏—Ñ—Ç–æ–≤ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
    plt.rcParams['font.family'] = ['DejaVu Sans', 'Arial Unicode MS', 'Tahoma']
    plt.rcParams['axes.unicode_minus'] = False
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É —Å —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ–º —Å—Ç–æ—Ä–æ–Ω 4:3
    fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(16, 12))
    fig.suptitle('üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ Telegram-–∫–∞–Ω–∞–ª–∞', fontsize=20, fontweight='bold', y=0.95)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    if real_stats and isinstance(real_stats, dict):
        channel_name = real_stats.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª')
        current_subscribers = real_stats.get('participants_count', 0)
    else:
        channel_name = '–î–µ–º–æ-–∫–∞–Ω–∞–ª'
        current_subscribers = 1000
    
    # 1. –ì—Ä–∞—Ñ–∏–∫ —Ä–æ—Å—Ç–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    ax1.set_title('üìà –†–æ—Å—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ (7 –¥–Ω–µ–π)', fontsize=14, fontweight='bold')
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ —Ä–æ—Å—Ç–∞
    dates = [datetime.now() - timedelta(days=6-i) for i in range(7)]
    subscribers = [current_subscribers - (50 - i*8) for i in range(7)]
    
    ax1.plot(dates, subscribers, marker='o', linewidth=3, markersize=6, color='#2196F3')
    ax1.fill_between(dates, subscribers, alpha=0.3, color='#2196F3')
    ax1.set_ylabel('–ü–æ–¥–ø–∏—Å—á–∏–∫–∏', fontsize=12)
    ax1.grid(True, alpha=0.3)
    ax1.xaxis.set_major_formatter(mdates.DateFormatter('%d.%m'))
    
    # 2. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏—Ä–æ—Å—Ç–∞
    ax2.set_title('üìä –ü—Ä–∏—Ä–æ—Å—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤', fontsize=14, fontweight='bold')
    
    categories = ['–î–µ–Ω—å', '–ù–µ–¥–µ–ª—è', '–ú–µ—Å—è—Ü']
    growth_values = [45, 305, 1250]
    colors = ['#4CAF50', '#2196F3', '#FF9800']
    
    bars = ax2.bar(categories, growth_values, color=colors, alpha=0.8)
    ax2.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', fontsize=12)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
    for bar, value in zip(bars, growth_values):
        height = bar.get_height()
        ax2.text(bar.get_x() + bar.get_width()/2., height + 10,
                f'+{value}', ha='center', va='bottom', fontweight='bold')
    
    # 3. –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
    ax3.set_title('üìÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏', fontsize=14, fontweight='bold')
    
    days = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']
    activity = [45, 38, 52, 41, 67, 34, 28]
    
    ax3.bar(days, activity, color='#9C27B0', alpha=0.7)
    ax3.set_ylabel('–ù–æ–≤—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏', fontsize=12)
    ax3.grid(True, alpha=0.3, axis='y')
    
    # 4. –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    ax4.set_title('üéØ –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏', fontsize=14, fontweight='bold')
    ax4.axis('off')
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
    total_subs = f"{current_subscribers:,}"
    daily_growth = "+45"
    weekly_growth = "+305"
    avg_growth = "+44"
    er_rate = "12.3%"
    
    metrics_text = f"""
üì∫ –ö–∞–Ω–∞–ª: {channel_name}
üë• –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {total_subs}

üìà –ü—Ä–∏—Ä–æ—Å—Ç:
   ‚Ä¢ –ó–∞ –¥–µ–Ω—å: {daily_growth}
   ‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: {weekly_growth}
   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π/–¥–µ–Ω—å: {avg_growth}

üí° –ú–µ—Ç—Ä–∏–∫–∏:
   ‚Ä¢ ER –¥–Ω–µ–≤–Ω–æ–π: {er_rate}
   ‚Ä¢ –õ—É—á—à–∏–π –¥–µ–Ω—å: –ü—è—Ç–Ω–∏—Ü–∞ (+67)
   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: 78.5%

üî• –°—Ç–∞—Ç—É—Å: –ö–∞–Ω–∞–ª —Ä–∞—Å—Ç–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ
"""
    
    ax4.text(0.05, 0.95, metrics_text, transform=ax4.transAxes, fontsize=12,
             verticalalignment='top', fontfamily='monospace',
             bbox=dict(boxstyle='round,pad=0.5', facecolor='lightblue', alpha=0.3))
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—â–µ–≥–æ —Å—Ç–∏–ª—è
    plt.tight_layout()
    fig.patch.set_facecolor('white')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫
    fig.text(0.95, 0.02, 'Generated by TG Analytics Bot', 
             ha='right', va='bottom', fontsize=8, alpha=0.5)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ BytesIO
    buf = io.BytesIO()
    plt.savefig(buf, format='png', dpi=300, bbox_inches='tight', 
                facecolor='white', edgecolor='none')
    buf.seek(0)
    plt.close(fig)
    
    return buf
