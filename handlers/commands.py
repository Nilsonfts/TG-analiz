import logging
from datetime import datetime

from telegram import Update
from telegram.ext import ContextTypes

from database.models import User, get_db
from services.report_service import ReportService
from services.scheduler_service import SchedulerService
from utils.auth import admin_required, is_admin

logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
report_service = ReportService()
scheduler_service = SchedulerService()


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db = get_db()
    try:
        db_user = db.query(User).filter(User.user_id == user.id).first()
        if not db_user:
            db_user = User(
                user_id=user.id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name,
                is_admin=is_admin(user.id),
            )
            db.add(db_user)
            db.commit()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        db.rollback()
    finally:
        db.close()

    welcome_text = f"""
ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Telegram Analytics Bot!</b>

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–ª—É—á–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ Telegram-–≥—Ä—É–ø–ø–∞–º.

<b>üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ç—á–µ—Ç—ã:</b>
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
‚Ä¢ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
‚Ä¢ –ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ –æ—Ç—á–µ—Ç—ã

<b>üîß –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/daily - –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç
/weekly - –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç
/monthly - –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ—Ç—á—ë—Ç
/summary - –û—Ç—á—ë—Ç –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É
/subscribe - –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á—ë—Ç—ã
/unsubscribe - –û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏
/help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –≤—Å–µ–º –∫–æ–º–∞–Ω–¥–∞–º

<b>‚ö° –ß—Ç–æ —è —É–º–µ—é:</b>
üìà –ê–Ω–∞–ª–∏–∑ —Ä–æ—Å—Ç–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
üëÅÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–æ—Å—Ç–æ–≤
‚ù§Ô∏è –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä–µ–∞–∫—Ü–∏–π –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
üì± –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
üìä –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ –¥–∏–∞–≥—Ä–∞–º–º

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –≤—ã—à–µ!
    """

    if is_admin(user.id):
        welcome_text += "\nüîë <b>–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</b>"

    await update.message.reply_text(welcome_text, parse_mode="HTML")


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üìñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º</b>

<b>üî∏ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

<b>üî∏ –û—Ç—á–µ—Ç—ã:</b>
/daily - –ü–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞)
/weekly - –ü–æ–ª—É—á–∏—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
/monthly - –ü–æ–ª—É—á–∏—Ç—å –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ—Ç—á—ë—Ç (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π)
/summary –ì–ì–ì–ì-–ú–ú-–î–î - –û—Ç—á—ë—Ç –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É

<i>–ü—Ä–∏–º–µ—Ä:</i> /summary 2024-01-15

<b>üî∏ –ü–æ–¥–ø–∏—Å–∫–∏:</b>
/subscribe [—Ç–∏–ø] - –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á—ë—Ç—ã
    ‚Ä¢ daily - –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á—ë—Ç—ã (–≤ 09:00)
    ‚Ä¢ weekly - –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á—ë—Ç—ã (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 09:00)
    ‚Ä¢ monthly - –µ–∂–µ–º–µ—Å—è—á–Ω—ã–µ –æ—Ç—á—ë—Ç—ã (1 —á–∏—Å–ª–æ –≤ 09:00)

/unsubscribe [—Ç–∏–ø] - –û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏

<i>–ü—Ä–∏–º–µ—Ä—ã:</i>
/subscribe daily
/subscribe weekly
/unsubscribe monthly

<b>üìä –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤:</b>
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏ –∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–µ
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–æ—Å—Ç–æ–≤
‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ä–µ–∞–∫—Ü–∏–π –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
‚Ä¢ –ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
‚Ä¢ –ì—Ä–∞—Ñ–∏–∫–∏ –¥–∏–Ω–∞–º–∏–∫–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é

<b>‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤:</b>
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 09:00
‚Ä¢ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ: –∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 09:00
‚Ä¢ –ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ: 1 —á–∏—Å–ª–æ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞ –≤ 09:00

<i>‚ùì –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.</i>
    """

    await update.message.reply_text(help_text, parse_mode="HTML")


@admin_required
async def daily_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /daily"""
    try:
        await update.message.reply_text("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç...")

        report = await report_service.generate_daily_report()

        await update.message.reply_text(report["text"], parse_mode="HTML")

        if report.get("chart"):
            await update.message.reply_photo(
                photo=report["chart"], caption="üìà –ì—Ä–∞—Ñ–∏–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


@admin_required
async def weekly_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /weekly"""
    try:
        await update.message.reply_text("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç...")

        report = await report_service.generate_weekly_report()

        await update.message.reply_text(report["text"], parse_mode="HTML")

        if report.get("chart"):
            await update.message.reply_photo(
                photo=report["chart"], caption="üìà –ì—Ä–∞—Ñ–∏–∫–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


@admin_required
async def monthly_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /monthly"""
    try:
        await update.message.reply_text("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ—Ç—á—ë—Ç...")

        report = await report_service.generate_monthly_report()

        await update.message.reply_text(report["text"], parse_mode="HTML")

        if report.get("chart"):
            await update.message.reply_photo(
                photo=report["chart"], caption="üìà –ì—Ä–∞—Ñ–∏–∫–∏ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


@admin_required
async def summary_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /summary"""
    if not context.args:
        await update.message.reply_text(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î\n" "–ü—Ä–∏–º–µ—Ä: /summary 2024-01-15"
        )
        return

    try:
        date_str = context.args[0]
        target_date = datetime.strptime(date_str, "%Y-%m-%d").date()

        await update.message.reply_text(f"üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á—ë—Ç –∑–∞ {date_str}...")

        report = await report_service.generate_summary_report(target_date)

        await update.message.reply_text(report["text"], parse_mode="HTML")

        if report.get("chart"):
            await update.message.reply_photo(
                photo=report["chart"], caption=f"üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞ {date_str}"
            )

    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î\n"
            "–ü—Ä–∏–º–µ—Ä: /summary 2024-01-15"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞ –∑–∞ –¥–∞—Ç—É: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


@admin_required
async def subscribe_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /subscribe"""
    if not context.args:
        await update.message.reply_text(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏: daily, weekly –∏–ª–∏ monthly\n"
            "–ü—Ä–∏–º–µ—Ä: /subscribe daily"
        )
        return

    subscription_type = context.args[0].lower()
    if subscription_type not in ["daily", "weekly", "monthly"]:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏. –î–æ—Å—Ç—É–ø–Ω—ã: daily, weekly, monthly"
        )
        return

    user_id = update.effective_user.id
    chat_id = update.effective_chat.id

    try:
        success = await scheduler_service.add_subscription(
            user_id, subscription_type, chat_id
        )

        if success:
            schedule_info = {
                "daily": "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 09:00",
                "weekly": "–∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 09:00",
                "monthly": "1 —á–∏—Å–ª–æ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞ –≤ 09:00",
            }

            await update.message.reply_text(
                f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {subscription_type} –æ—Ç—á—ë—Ç—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n"
                f"üìÖ –û—Ç—á—ë—Ç—ã –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å {schedule_info[subscription_type]}"
            )
        else:
            await update.message.reply_text(
                "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


@admin_required
async def unsubscribe_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /unsubscribe"""
    if not context.args:
        await update.message.reply_text(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏: daily, weekly –∏–ª–∏ monthly\n"
            "–ü—Ä–∏–º–µ—Ä: /unsubscribe daily"
        )
        return

    subscription_type = context.args[0].lower()
    if subscription_type not in ["daily", "weekly", "monthly"]:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏. –î–æ—Å—Ç—É–ø–Ω—ã: daily, weekly, monthly"
        )
        return

    user_id = update.effective_user.id

    try:
        success = await scheduler_service.remove_subscription(
            user_id, subscription_type
        )

        if success:
            await update.message.reply_text(
                f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {subscription_type} –æ—Ç—á—ë—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω–∞!"
            )
        else:
            await update.message.reply_text("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–∞")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
