"""
Enhanced bot handlers for Channel Analytics with new functionality.
"""
import asyncio
from datetime import datetime, timedelta
from typing import List, Optional

from aiogram import Router, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, FSInputFile

from src.config import settings
from src.db.models import DatabaseManager, Channel
from src.collectors import CompositeCollector
from src.collectors.telegram_collector import TelegramCollector
from src.collectors.external_collectors import TelemetrCollector, TGStatCollector
from src.reports import ReportGenerator
from src.reports.export_service import DataExportService
from src.scheduler import SchedulerService
from src.utils.logging import get_bot_logger

logger = get_bot_logger()

# Initialize services
db_manager: Optional[DatabaseManager] = None
collector: Optional[CompositeCollector] = None
report_generator: Optional[ReportGenerator] = None
export_service: Optional[DataExportService] = None
scheduler_service: Optional[SchedulerService] = None

# Router for handlers
router = Router()


def check_admin(user_id: int) -> bool:
    """Check if user is admin."""
    return user_id in settings.admin_user_ids


def init_services(db_manager_instance: DatabaseManager):
    """Initialize all services."""
    global db_manager, collector, report_generator, export_service, scheduler_service
    
    db_manager = db_manager_instance
    
    # Initialize collectors
    collectors = [TelegramCollector()]
    if settings.telemetr_api_key:
        collectors.append(TelemetrCollector())
    if settings.tgstat_api_key:
        collectors.append(TGStatCollector())
    
    collector = CompositeCollector(collectors)
    report_generator = ReportGenerator()
    export_service = DataExportService()
    scheduler_service = SchedulerService(db_manager)


@router.message(CommandStart())
async def start_command(message: Message):
    """Enhanced /start command."""
    logger.info("Start command received", user_id=message.from_user.id)
    
    # Check system status
    db_status = "‚úÖ" if db_manager else "‚ùå"
    collector_status = "‚úÖ" if collector and await collector.health_check() else "‚ùå"
    scheduler_status = "‚úÖ" if scheduler_service else "‚ùå"
    
    # Count active channels
    try:
        async with db_manager.async_session() as session:
            from sqlalchemy import select, func
            result = await session.execute(
                select(func.count(Channel.id)).where(Channel.is_active == True)
            )
            active_channels = result.scalar() or 0
    except Exception:
        active_channels = 0
    
    welcome_text = (
        "üöÄ <b>Channel Analytics Bot v2.0</b>\n\n"
        "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ Telegram-–∫–∞–Ω–∞–ª–æ–≤\n\n"
        f"üìä <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:</b>\n"
        f"‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_status}\n"
        f"‚Ä¢ –°–±–æ—Ä—â–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {collector_status}\n"
        f"‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: {scheduler_status}\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {active_channels}\n\n"
        f"üîß <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        f"‚Ä¢ /add @channel - –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª\n"
        f"‚Ä¢ /remove @channel - —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª\n"
        f"‚Ä¢ /list_channels - —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤\n"
        f"‚Ä¢ /stats [today|week|month] - –æ—Ç—á–µ—Ç—ã\n"
        f"‚Ä¢ /export [week|month] - —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö\n"
        f"‚Ä¢ /health - —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã\n"
        f"‚Ä¢ /help - –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞\n\n"
    )
    
    if check_admin(message.from_user.id):
        welcome_text += "üëë <i>–£ –≤–∞—Å –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</i>"
    else:
        welcome_text += "‚ÑπÔ∏è <i>–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</i>"
    
    await message.answer(welcome_text, parse_mode="HTML")


@router.message(Command("add"))
async def add_channel_command(message: Message):
    """Add channel to monitoring."""
    if not check_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    logger.info("Add channel command", user_id=message.from_user.id)
    
    # Parse channel from command
    args = message.text.split()[1:] if len(message.text.split()) > 1 else []
    if not args:
        await message.answer(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ /add @channel_username\n"
            "‚Ä¢ /add https://t.me/channel_username\n"
            "‚Ä¢ /add -1001234567890"
        )
        return
    
    channel_input = args[0]
    
    # Parse channel ID/username
    channel_id = None
    username = None
    
    try:
        if channel_input.startswith('@'):
            username = channel_input[1:]
        elif channel_input.startswith('https://t.me/'):
            username = channel_input.replace('https://t.me/', '')
        elif channel_input.lstrip('-').isdigit():
            channel_id = int(channel_input)
        else:
            username = channel_input
        
        # Try to get channel info
        if username:
            # Convert username to ID using collector
            stats = await collector.collect_channel_stats(f"@{username}")
            if stats:
                channel_id = stats.channel_id
            else:
                await message.answer(f"‚ùå –ö–∞–Ω–∞–ª @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return
        
        if not channel_id:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –∫–∞–Ω–∞–ª–∞")
            return
        
        # Get channel stats
        stats = await collector.collect_channel_stats(channel_id)
        if not stats:
            await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞ {channel_id}")
            return
        
        # Add to database
        async with db_manager.async_session() as session:
            from sqlalchemy import select
            
            # Check if already exists
            existing = await session.execute(
                select(Channel).where(Channel.channel_id == channel_id)
            )
            existing_channel = existing.scalar_one_or_none()
            
            if existing_channel:
                if existing_channel.is_active:
                    await message.answer(f"‚ÑπÔ∏è –ö–∞–Ω–∞–ª —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω: {existing_channel.title}")
                    return
                else:
                    # Reactivate
                    existing_channel.is_active = True
                    existing_channel.title = stats.title
                    existing_channel.username = stats.username
                    existing_channel.description = stats.description
                    await session.commit()
                    
                    await message.answer(
                        f"‚úÖ –ö–∞–Ω–∞–ª —Ä–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\n\n"
                        f"üì∫ <b>{stats.title}</b>\n"
                        f"üîó @{stats.username or 'private'}\n"
                        f"üë• {stats.members_count:,} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"
                    )
                    return
            
            # Create new channel
            new_channel = Channel(
                channel_id=channel_id,
                username=stats.username,
                title=stats.title,
                description=stats.description,
                is_active=True,
                added_by_user_id=message.from_user.id
            )
            session.add(new_channel)
            await session.commit()
            
            await message.answer(
                f"‚úÖ –ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n\n"
                f"üì∫ <b>{stats.title}</b>\n"
                f"üîó @{stats.username or 'private'}\n"
                f"üë• {stats.members_count:,} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n\n"
                f"‚ÑπÔ∏è –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –Ω–∞—á–Ω–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
            )
            
            logger.info("Channel added", channel_id=channel_id, title=stats.title)
    
    except Exception as e:
        logger.error("Failed to add channel", error=str(e), channel_input=channel_input)
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {str(e)}")


@router.message(Command("remove"))
async def remove_channel_command(message: Message):
    """Remove channel from monitoring."""
    if not check_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    args = message.text.split()[1:] if len(message.text.split()) > 1 else []
    if not args:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è\n\n–ü—Ä–∏–º–µ—Ä: /remove @channel_username")
        return
    
    channel_input = args[0]
    
    try:
        async with db_manager.async_session() as session:
            from sqlalchemy import select
            
            # Find channel
            if channel_input.startswith('@'):
                username = channel_input[1:]
                result = await session.execute(
                    select(Channel).where(
                        Channel.username == username,
                        Channel.is_active == True
                    )
                )
            elif channel_input.lstrip('-').isdigit():
                channel_id = int(channel_input)
                result = await session.execute(
                    select(Channel).where(
                        Channel.channel_id == channel_id,
                        Channel.is_active == True
                    )
                )
            else:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–∞–Ω–∞–ª–∞")
                return
            
            channel = result.scalar_one_or_none()
            if not channel:
                await message.answer("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ")
                return
            
            # Deactivate channel
            channel.is_active = False
            await session.commit()
            
            await message.answer(
                f"‚úÖ –ö–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n\n"
                f"üì∫ <b>{channel.title}</b>\n"
                f"üîó @{channel.username or 'private'}\n\n"
                f"‚ÑπÔ∏è –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã"
            )
            
            logger.info("Channel removed", channel_id=channel.channel_id)
    
    except Exception as e:
        logger.error("Failed to remove channel", error=str(e))
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {str(e)}")


@router.message(Command("list_channels"))
async def list_channels_command(message: Message):
    """List all monitored channels."""
    if not check_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    try:
        async with db_manager.async_session() as session:
            from sqlalchemy import select, desc
            
            result = await session.execute(
                select(Channel).where(Channel.is_active == True).order_by(desc(Channel.added_at))
            )
            channels = result.scalars().all()
            
            if not channels:
                await message.answer("üì≠ –ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ\n\n–î–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª –∫–æ–º–∞–Ω–¥–æ–π /add @channel")
                return
            
            text = f"üìä <b>–ö–∞–Ω–∞–ª—ã –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ ({len(channels)})</b>\n\n"
            
            for i, channel in enumerate(channels[:20], 1):  # Limit to 20
                text += (
                    f"{i}. <b>{channel.title}</b>\n"
                    f"   üîó @{channel.username or 'private'}\n"
                    f"   üÜî <code>{channel.channel_id}</code>\n"
                    f"   üìÖ –î–æ–±–∞–≤–ª–µ–Ω: {channel.added_at.strftime('%d.%m.%Y')}\n\n"
                )
            
            if len(channels) > 20:
                text += f"... –∏ –µ—â–µ {len(channels) - 20} –∫–∞–Ω–∞–ª–æ–≤"
            
            # Add action buttons
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(text="üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats_all"),
                        InlineKeyboardButton(text="üìà –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç", callback_data="report_summary")
                    ]
                ]
            )
            
            await message.answer(text, parse_mode="HTML", reply_markup=keyboard)
    
    except Exception as e:
        logger.error("Failed to list channels", error=str(e))
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤: {str(e)}")


@router.message(Command("stats"))
async def stats_command(message: Message):
    """Generate statistics reports."""
    if not check_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    args = message.text.split()[1:] if len(message.text.split()) > 1 else ["today"]
    period = args[0] if args[0] in ["today", "week", "month"] else "today"
    
    status_msg = await message.answer("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç...")
    
    try:
        async with db_manager.async_session() as session:
            if period == "today":
                report = await report_generator.generate_daily_report(session)
            elif period == "week":
                report = await report_generator.generate_weekly_report(session)
            elif period == "month":
                report = await report_generator.generate_monthly_report(session)
            
            if not report:
                await status_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç")
                return
            
            # Send markdown report
            await status_msg.edit_text(
                f"üìä –û—Ç—á–µ—Ç –∑–∞ {period}\n\n" + report["markdown"][:4000],  # Telegram limit
                parse_mode="HTML"
            )
            
            # Send charts if available
            if "charts" in report and report["charts"]:
                for chart_path in report["charts"]:
                    try:
                        chart_file = FSInputFile(chart_path)
                        await message.answer_photo(chart_file)
                    except Exception as e:
                        logger.error("Failed to send chart", error=str(e), chart=chart_path)
    
    except Exception as e:
        logger.error("Failed to generate stats", error=str(e), period=period)
        await status_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}")


@router.message(Command("export"))
async def export_command(message: Message):
    """Export data to CSV."""
    if not check_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    args = message.text.split()[1:] if len(message.text.split()) > 1 else ["month"]
    export_type = args[0] if args[0] in ["week", "month", "quarter", "year", "all"] else "month"
    
    status_msg = await message.answer("üîÑ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ...")
    
    try:
        async with db_manager.async_session() as session:
            # Get all active channels
            from sqlalchemy import select
            result = await session.execute(
                select(Channel.channel_id).where(Channel.is_active == True)
            )
            channel_ids = [row[0] for row in result.fetchall()]
            
            if not channel_ids:
                await status_msg.edit_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
                return
            
            # Export data
            export_path = await export_service.export_multiple_channels(
                session, channel_ids, export_type, "csv"
            )
            
            if not export_path:
                await status_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö")
                return
            
            # Send file
            export_file = FSInputFile(export_path)
            await message.answer_document(
                export_file,
                caption=f"üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ {export_type}\n"
                       f"–ö–∞–Ω–∞–ª–æ–≤: {len(channel_ids)}\n"
                       f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {datetime.utcnow().strftime('%d.%m.%Y %H:%M UTC')}"
            )
            
            await status_msg.delete()
    
    except Exception as e:
        logger.error("Failed to export data", error=str(e), export_type=export_type)
        await status_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {str(e)}")


@router.message(Command("health"))
async def health_command(message: Message):
    """Check system health."""
    if not check_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    try:
        # Check database
        db_status = "‚ùå"
        try:
            async with db_manager.async_session() as session:
                from sqlalchemy import select
                await session.execute(select(1))
                db_status = "‚úÖ"
        except Exception:
            pass
        
        # Check collector
        collector_status = "‚úÖ" if collector and await collector.health_check() else "‚ùå"
        
        # Check scheduler
        scheduler_status = "‚úÖ" if scheduler_service and scheduler_service._running else "‚ùå"
        
        # Get scheduler jobs info
        jobs_info = ""
        if scheduler_service:
            job_status = scheduler_service.get_job_status()
            if job_status["status"] == "running":
                jobs_info = f"\n\nüïí <b>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:</b>\n"
                for job in job_status.get("jobs", []):
                    next_run = job.get("next_run")
                    if next_run:
                        next_run_dt = datetime.fromisoformat(next_run.replace('Z', '+00:00'))
                        time_str = next_run_dt.strftime('%d.%m %H:%M')
                    else:
                        time_str = "–ù–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ"
                    jobs_info += f"‚Ä¢ {job['name']}: {time_str}\n"
        
        # Count channels and data
        channels_count = 0
        data_points = 0
        try:
            async with db_manager.async_session() as session:
                from sqlalchemy import select, func
                
                # Count channels
                result = await session.execute(
                    select(func.count(Channel.id)).where(Channel.is_active == True)
                )
                channels_count = result.scalar() or 0
                
                # Count data points (last 7 days)
                from src.db.models import MembersDaily
                week_ago = datetime.utcnow().date() - timedelta(days=7)
                result = await session.execute(
                    select(func.count(MembersDaily.id)).where(MembersDaily.date >= week_ago)
                )
                data_points = result.scalar() or 0
        except Exception:
            pass
        
        health_text = (
            f"üè• <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
            f"üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_status}\n"
            f"üì° –°–±–æ—Ä—â–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {collector_status}\n"
            f"‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: {scheduler_status}\n\n"
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {channels_count}\n"
            f"‚Ä¢ –¢–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö (7 –¥–Ω–µ–π): {data_points}\n"
            f"‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {datetime.utcnow().strftime('%d.%m.%Y %H:%M UTC')}"
            f"{jobs_info}"
        )
        
        # Add action buttons
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="health_refresh"),
                    InlineKeyboardButton(text="üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", callback_data="health_detailed")
                ]
            ]
        )
        
        await message.answer(health_text, parse_mode="HTML", reply_markup=keyboard)
    
    except Exception as e:
        logger.error("Health check failed", error=str(e))
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {str(e)}")


@router.message(Command("help"))
async def help_command(message: Message):
    """Enhanced help command."""
    help_text = (
        "üìö <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ Channel Analytics Bot</b>\n\n"
        
        "üîß <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏:</b>\n"
        "‚Ä¢ /add @channel - –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n"
        "‚Ä¢ /remove @channel - —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª\n"
        "‚Ä¢ /list_channels - —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤\n\n"
        
        "üìä <b>–û—Ç—á–µ—Ç—ã –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        "‚Ä¢ /stats today - –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç\n"
        "‚Ä¢ /stats week - –Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏\n"
        "‚Ä¢ /stats month - –º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç\n\n"
        
        "üìÅ <b>–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö:</b>\n"
        "‚Ä¢ /export week - —ç–∫—Å–ø–æ—Ä—Ç –∑–∞ –Ω–µ–¥–µ–ª—é\n"
        "‚Ä¢ /export month - —ç–∫—Å–ø–æ—Ä—Ç –∑–∞ –º–µ—Å—è—Ü\n"
        "‚Ä¢ /export quarter - —ç–∫—Å–ø–æ—Ä—Ç –∑–∞ –∫–≤–∞—Ä—Ç–∞–ª\n"
        "‚Ä¢ /export year - —ç–∫—Å–ø–æ—Ä—Ç –∑–∞ –≥–æ–¥\n\n"
        
        "‚öôÔ∏è <b>–°–∏—Å—Ç–µ–º–∞:</b>\n"
        "‚Ä¢ /health - —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã\n"
        "‚Ä¢ /help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
        
        "üìà <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã:</b>\n"
        f"‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–±–æ—Ä: {settings.daily_job_hour:02d}:00 UTC\n"
        f"‚Ä¢ –ù–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã: –ü–Ω {settings.weekly_job_hour:02d}:00 UTC\n"
        f"‚Ä¢ –ú–µ—Å—è—á–Ω—ã–µ –æ—Ç—á–µ—Ç—ã: 1 —á–∏—Å–ª–æ {settings.monthly_job_hour:02d}:00 UTC\n\n"
        
        "üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>\n"
        "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã –≤ —á–∞—Ç\n"
        "‚Ä¢ –ê–ª–µ—Ä—Ç—ã –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ –º–µ—Ç—Ä–∏–∫\n"
        "‚Ä¢ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ —Å–∏—Å—Ç–µ–º—ã\n\n"
        
        "üí° <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö:</b>\n"
        "‚Ä¢ Telegram Bot API\n"
        "‚Ä¢ Telethon (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)\n"
    )
    
    if settings.telemetr_api_key:
        help_text += "‚Ä¢ Telemetr.me API ‚úÖ\n"
    else:
        help_text += "‚Ä¢ Telemetr.me API ‚ùå\n"
    
    if settings.tgstat_api_key:
        help_text += "‚Ä¢ TGStat.ru API ‚úÖ\n"
    else:
        help_text += "‚Ä¢ TGStat.ru API ‚ùå\n"
    
    help_text += (
        f"\nüìß <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:</b> {len(settings.admin_user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        f"üóÇÔ∏è <b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:</b> PostgreSQL\n"
        f"‚òÅÔ∏è <b>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</b> Railway\n\n"
        f"<i>–í–µ—Ä—Å–∏—è: 2.0.0 | {datetime.utcnow().strftime('%Y-%m-%d')}</i>"
    )
    
    await message.answer(help_text, parse_mode="HTML")


# Callback query handlers
@router.callback_query(F.data == "health_refresh")
async def health_refresh_callback(callback: CallbackQuery):
    """Refresh health status."""
    if not check_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    await callback.answer("üîÑ –û–±–Ω–æ–≤–ª—è—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ...")
    # Trigger health command logic
    await health_command(callback.message)


@router.callback_query(F.data == "health_detailed")
async def health_detailed_callback(callback: CallbackQuery):
    """Show detailed health information."""
    if not check_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    try:
        detailed_info = "üîç <b>–î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞</b>\n\n"
        
        # Database details
        try:
            async with db_manager.async_session() as session:
                from sqlalchemy import text
                result = await session.execute(text("SELECT version()"))
                db_version = result.scalar()
                detailed_info += f"üóÑÔ∏è <b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:</b>\n"
                detailed_info += f"‚Ä¢ –í–µ—Ä—Å–∏—è: PostgreSQL\n"
                detailed_info += f"‚Ä¢ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: –∞–∫—Ç–∏–≤–Ω–æ\n\n"
        except Exception as e:
            detailed_info += f"üóÑÔ∏è <b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:</b>\n‚Ä¢ –û—à–∏–±–∫–∞: {str(e)}\n\n"
        
        # Collector details
        if collector:
            for i, c in enumerate(collector.collectors):
                health = await c.health_check()
                detailed_info += f"üì° <b>–°–±–æ—Ä—â–∏–∫ {i+1}:</b> {c.__class__.__name__}\n"
                detailed_info += f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {'‚úÖ' if health else '‚ùå'}\n"
        
        await callback.message.answer(detailed_info, parse_mode="HTML")
        await callback.answer()
    
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@router.callback_query(F.data == "stats_all")
async def stats_all_callback(callback: CallbackQuery):
    """Show statistics for all channels."""
    if not check_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    await callback.answer("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
    # Trigger stats command with today period
    message_copy = callback.message
    message_copy.text = "/stats today"
    await stats_command(message_copy)
