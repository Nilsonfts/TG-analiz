"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –¥–ª—è Channel Analytics
–ü–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
"""
import asyncio
import logging
from typing import List, Optional, Dict, Any
from datetime import datetime, date, timedelta

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from ..db.database_service import DatabaseService
from ..config import settings

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class ChannelStates(StatesGroup):
    waiting_for_channel = State()
    waiting_for_days = State()

class AnalyticsCommands:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–æ–≤"""
    
    def __init__(self, db_service: DatabaseService):
        self.db = db_service
        self.router = Router()
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        
        # –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        @self.router.message(Command("add"))
        async def add_channel_command(message: Message, state: FSMContext):
            """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
            if not await self.is_admin(message.from_user.id):
                await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
                return
            
            args = message.text.split()[1:] if len(message.text.split()) > 1 else []
            
            if not args:
                await message.answer(
                    "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥</b>\n\n"
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/add @channel_username</code>\n"
                    "–ò–ª–∏: <code>/add -1001234567890</code>\n\n"
                    "–ü—Ä–∏–º–µ—Ä: <code>/add @durov</code>",
                    parse_mode="HTML"
                )
                return
            
            channel_input = args[0]
            await self.add_channel_to_monitoring(message, channel_input)
        
        @self.router.message(Command("remove"))
        async def remove_channel_command(message: Message):
            """–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
            if not await self.is_admin(message.from_user.id):
                await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
                return
            
            args = message.text.split()[1:] if len(message.text.split()) > 1 else []
            
            if not args:
                await message.answer(
                    "üìù <b>–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>\n\n"
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/remove @channel_username</code>\n"
                    "–ò–ª–∏: <code>/remove -1001234567890</code>",
                    parse_mode="HTML"
                )
                return
            
            channel_input = args[0]
            await self.remove_channel_from_monitoring(message, channel_input)
        
        @self.router.message(Command("list"))
        async def list_channels_command(message: Message):
            """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"""
            if not await self.is_admin(message.from_user.id):
                await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
                return
            
            await self.show_channels_list(message)
        
        @self.router.message(Command("stats"))
        async def channel_stats_command(message: Message):
            """–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–∞"""
            args = message.text.split()[1:] if len(message.text.split()) > 1 else []
            
            if not args:
                await message.answer(
                    "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–∞</b>\n\n"
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/stats @channel_username [–¥–Ω–∏]</code>\n\n"
                    "–ü—Ä–∏–º–µ—Ä—ã:\n"
                    "‚Ä¢ <code>/stats @durov</code> - –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π\n"
                    "‚Ä¢ <code>/stats @durov 30</code> - –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π",
                    parse_mode="HTML"
                )
                return
            
            channel_input = args[0]
            days = int(args[1]) if len(args) > 1 and args[1].isdigit() else 7
            days = min(days, 365)  # –ú–∞–∫—Å–∏–º—É–º –≥–æ–¥
            
            await self.show_channel_stats(message, channel_input, days)
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
        @self.router.message(Command("summary"))
        async def summary_command(message: Message):
            """–°–≤–æ–¥–∫–∞ –ø–æ –≤—Å–µ–º –∫–∞–Ω–∞–ª–∞–º"""
            await self.show_summary(message)
        
        @self.router.message(Command("growth"))
        async def growth_command(message: Message):
            """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–æ—Å—Ç–∞"""
            await self.show_growth_stats(message)
        
        @self.router.message(Command("channels"))
        async def channels_command(message: Message):
            """–ü—É–±–ª–∏—á–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤"""
            await self.show_public_channels_list(message)
        
        # Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        @self.router.callback_query(F.data.startswith("channel_"))
        async def channel_callback_handler(callback: CallbackQuery):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤"""
            await self.handle_channel_callback(callback)
    
    async def is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        return user_id in settings.admin_user_ids
    
    async def add_channel_to_monitoring(self, message: Message, channel_input: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        try:
            # –ü–∞—Ä—Å–∏–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if channel_input.startswith('@'):
                username = channel_input[1:]
                channel_id = await self.get_channel_id_by_username(username)
            elif channel_input.startswith('-100'):
                channel_id = int(channel_input)
                username = await self.get_username_by_channel_id(channel_id)
            else:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–∞–Ω–∞–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @username –∏–ª–∏ -1001234567890")
                return
            
            if not channel_id:
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö.")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
            channel_info = await self.get_channel_info(channel_id)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            channel = await self.db.add_channel(
                channel_id=channel_id,
                username=username,
                title=channel_info.get('title'),
                description=channel_info.get('description')
            )
            
            await message.answer(
                f"‚úÖ <b>–ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥!</b>\n\n"
                f"üì∫ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {channel_info.get('title', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                f"üë§ <b>Username:</b> @{username or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"üÜî <b>ID:</b> <code>{channel_id}</code>\n"
                f"üë• <b>–ü–æ–¥–ø–∏—Å—á–∏–∫–∏:</b> {channel_info.get('members_count', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
                f"üîÑ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –Ω–∞—á–Ω–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏",
                parse_mode="HTML"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {e}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {str(e)}")
    
    async def remove_channel_from_monitoring(self, message: Message, channel_input: str):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        try:
            # –ü–∞—Ä—Å–∏–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if channel_input.startswith('@'):
                username = channel_input[1:]
                channel_id = await self.get_channel_id_by_username(username)
            elif channel_input.startswith('-100'):
                channel_id = int(channel_input)
            else:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–∞–Ω–∞–ª–∞")
                return
            
            if not channel_id:
                await message.answer("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            success = await self.db.remove_channel(channel_id)
            
            if success:
                await message.answer(
                    f"‚úÖ <b>–ö–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>\n\n"
                    f"üÜî ID: <code>{channel_id}</code>\n"
                    f"üìä –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã",
                    parse_mode="HTML"
                )
            else:
                await message.answer("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {e}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {str(e)}")
    
    async def show_channels_list(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"""
        try:
            channels = await self.db.get_active_channels()
            
            if not channels:
                await message.answer(
                    "üìã <b>–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ</b>\n\n"
                    "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤\n\n"
                    "–î–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª –∫–æ–º–∞–Ω–¥–æ–π: <code>/add @channel</code>",
                    parse_mode="HTML"
                )
                return
            
            text = "üìã <b>–ö–∞–Ω–∞–ª—ã –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ:</b>\n\n"
            
            for i, channel in enumerate(channels, 1):
                username_display = f"@{channel.username}" if channel.username else "–ë–µ–∑ username"
                text += (
                    f"{i}. <b>{channel.title or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</b>\n"
                    f"   üë§ {username_display}\n"
                    f"   üÜî <code>{channel.channel_id}</code>\n"
                    f"   üë• {channel.subscribers_count:,} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n\n"
                )
            
            # –î–æ–±–∞–≤–ª—è–µ–º inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="üìä –°–≤–æ–¥–∫–∞", callback_data="summary_all"),
                    InlineKeyboardButton(text="üìà –†–æ—Å—Ç", callback_data="growth_all")
                ],
                [
                    InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_list")
                ]
            ])
            
            await message.answer(text, parse_mode="HTML", reply_markup=keyboard)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤: {e}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: {str(e)}")
    
    async def show_channel_stats(self, message: Message, channel_input: str, days: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–Ω–∞–ª–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞–Ω–∞–ª–∞
            if channel_input.startswith('@'):
                username = channel_input[1:]
                channel_id = await self.get_channel_id_by_username(username)
            elif channel_input.startswith('-100'):
                channel_id = int(channel_input)
            else:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–∞–Ω–∞–ª–∞")
                return
            
            if not channel_id:
                await message.answer("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
            analytics = await self.db.get_channel_analytics(channel_id, days)
            
            if not analytics:
                await message.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —ç—Ç–æ–º—É –∫–∞–Ω–∞–ª—É")
                return
            
            channel_info = analytics['channel']
            members_history = analytics['members_history']
            views_history = analytics['views_history']
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            text = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–∞ –∑–∞ {days} –¥–Ω–µ–π</b>\n\n"
            text += f"üì∫ <b>{channel_info['title']}</b>\n"
            if channel_info['username']:
                text += f"üë§ @{channel_info['username']}\n"
            text += f"üÜî <code>{channel_info['id']}</code>\n\n"
            
            # –¢–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            text += f"üë• <b>–ü–æ–¥–ø–∏—Å—á–∏–∫–∏:</b> {channel_info['subscribers']:,}\n"
            text += f"üìù <b>–ü–æ—Å—Ç–æ–≤:</b> {channel_info['posts_count']:,}\n\n"
            
            # –î–∏–Ω–∞–º–∏–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
            if members_history:
                first_day = members_history[0]
                last_day = members_history[-1]
                growth = last_day['count'] - first_day['count']
                growth_percent = (growth / first_day['count'] * 100) if first_day['count'] > 0 else 0
                
                text += f"üìà <b>–†–æ—Å—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:</b>\n"
                text += f"   ‚Ä¢ –ó–∞ –ø–µ—Ä–∏–æ–¥: {growth:+,} ({growth_percent:+.1f}%)\n"
                text += f"   ‚Ä¢ –í –¥–µ–Ω—å: {growth / days:+.1f} –≤ —Å—Ä–µ–¥–Ω–µ–º\n\n"
            
            # –ü—Ä–æ—Å–º–æ—Ç—Ä—ã
            if views_history:
                avg_views = sum(v['avg_views'] for v in views_history) / len(views_history)
                total_posts = sum(v['posts_count'] for v in views_history)
                
                text += f"üëÅ <b>–ü—Ä–æ—Å–º–æ—Ç—Ä—ã:</b>\n"
                text += f"   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∑–∞ –ø–æ—Å—Ç: {avg_views:,.0f}\n"
                text += f"   ‚Ä¢ –ü–æ—Å—Ç–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥: {total_posts}\n\n"
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã
            recent_posts = analytics['recent_posts'][:3]
            if recent_posts:
                text += f"üìù <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã:</b>\n"
                for post in recent_posts:
                    post_text = post['text'][:50] + '...' if post['text'] and len(post['text']) > 50 else (post['text'] or '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞')
                    text += f"   ‚Ä¢ {post_text}\n"
                    text += f"     üëÅ {post['views']:,} | üîÑ {post['forwards']:,}\n"
            
            # Inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="üìà 7 –¥–Ω–µ–π", callback_data=f"stats_{channel_id}_7"),
                    InlineKeyboardButton(text="üìä 30 –¥–Ω–µ–π", callback_data=f"stats_{channel_id}_30")
                ],
                [
                    InlineKeyboardButton(text="üìã –≠–∫—Å–ø–æ—Ä—Ç CSV", callback_data=f"export_{channel_id}_csv"),
                    InlineKeyboardButton(text="üìä –ì—Ä–∞—Ñ–∏–∫", callback_data=f"chart_{channel_id}")
                ]
            ])
            
            await message.answer(text, parse_mode="HTML", reply_markup=keyboard)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
    
    async def show_summary(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å–≤–æ–¥–∫—É –ø–æ –≤—Å–µ–º –∫–∞–Ω–∞–ª–∞–º"""
        try:
            channels = await self.db.get_active_channels()
            
            if not channels:
                await message.answer("üìä –ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ")
                return
            
            text = f"üìä <b>–°–≤–æ–¥–∫–∞ –ø–æ {len(channels)} –∫–∞–Ω–∞–ª–∞–º</b>\n\n"
            
            total_subscribers = sum(ch.subscribers_count for ch in channels)
            total_posts = sum(ch.posts_count for ch in channels)
            
            text += f"üë• <b>–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>\n"
            text += f"   ‚Ä¢ –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {total_subscribers:,}\n"
            text += f"   ‚Ä¢ –ü–æ—Å—Ç—ã: {total_posts:,}\n"
            text += f"   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –Ω–∞ –∫–∞–Ω–∞–ª: {total_subscribers // len(channels):,}\n\n"
            
            # –¢–æ–ø –∫–∞–Ω–∞–ª–æ–≤ –ø–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
            top_channels = sorted(channels, key=lambda x: x.subscribers_count, reverse=True)[:5]
            text += f"üèÜ <b>–¢–æ–ø –∫–∞–Ω–∞–ª–æ–≤ –ø–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º:</b>\n"
            for i, ch in enumerate(top_channels, 1):
                username_display = f"@{ch.username}" if ch.username else ch.title[:20]
                text += f"   {i}. {username_display} - {ch.subscribers_count:,}\n"
            
            await message.answer(text, parse_mode="HTML")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏: {e}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏: {str(e)}")
    
    async def show_growth_stats(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–æ—Å—Ç–∞"""
        await message.answer(
            "üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–æ—Å—Ç–∞</b>\n\n"
            "üöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n"
            "–°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–æ—Å—Ç–∞ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤",
            parse_mode="HTML"
        )
    
    async def show_public_channels_list(self, message: Message):
        """–ü—É–±–ª–∏—á–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ (–¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)"""
        try:
            channels = await self.db.get_active_channels()
            
            if not channels:
                await message.answer("üìã –ü–æ–∫–∞ –Ω–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ")
                return
            
            text = f"üìã <b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∫–∞–Ω–∞–ª—ã ({len(channels)}):</b>\n\n"
            
            for i, channel in enumerate(channels[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 10
                username_display = f"@{channel.username}" if channel.username else "–ö–∞–Ω–∞–ª"
                text += f"{i}. <b>{username_display}</b>\n"
                text += f"   üë• {channel.subscribers_count:,} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n\n"
            
            if len(channels) > 10:
                text += f"... –∏ –µ—â–µ {len(channels) - 10} –∫–∞–Ω–∞–ª–æ–≤\n\n"
            
            text += "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stats @channel –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
            
            await message.answer(text, parse_mode="HTML")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤: {e}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    async def handle_channel_callback(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        try:
            data = callback.data
            
            if data == "summary_all":
                await self.show_summary(callback.message)
            elif data == "growth_all":
                await self.show_growth_stats(callback.message)
            elif data == "refresh_list":
                await self.show_channels_list(callback.message)
            elif data.startswith("stats_"):
                parts = data.split("_")
                channel_id = int(parts[1])
                days = int(parts[2])
                # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å username –ø–æ channel_id
                await self.show_channel_stats(callback.message, str(channel_id), days)
            
            await callback.answer()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")
    
    # === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===
    
    async def get_channel_id_by_username(self, username: str) -> Optional[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ ID –∫–∞–Ω–∞–ª–∞ –ø–æ username (–∑–∞–≥–ª—É—à–∫–∞)"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ Telethon API
        return None
    
    async def get_username_by_channel_id(self, channel_id: int) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ username –ø–æ ID –∫–∞–Ω–∞–ª–∞ (–∑–∞–≥–ª—É—à–∫–∞)"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ Telethon API
        return None
    
    async def get_channel_info(self, channel_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ (–∑–∞–≥–ª—É—à–∫–∞)"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ Telethon API
        return {
            'title': f'–ö–∞–Ω–∞–ª {channel_id}',
            'description': '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ',
            'members_count': 0
        }
