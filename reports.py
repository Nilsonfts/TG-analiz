import asyncio
from datetime import datetime, timedelta
from typing import List, Dict, Any
import logging

from database import Database

logger = logging.getLogger(__name__)

class ReportGenerator:
    """–ö–ª–∞—Å—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤"""
    
    def __init__(self, database: Database):
        self.db = database
    
    async def generate_daily_report(self, date: datetime = None) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        if not date:
            date = datetime.now() - timedelta(days=1)  # –í—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å
        
        try:
            groups = await self.db.get_active_groups()
            report_lines = [
                f"üìä <b>–î–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç –∑–∞ {date.strftime('%d.%m.%Y')}</b>\n"
            ]
            
            total_messages = 0
            total_users = 0
            
            for group in groups:
                stats = await self.db.get_daily_stats(group.group_id, date)
                
                if stats['messages_count'] > 0:
                    total_messages += stats['messages_count']
                    total_users += stats['users_count']
                    
                    report_lines.append(
                        f"üîπ <b>{group.title or '–ì—Ä—É–ø–ø–∞ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</b>\n"
                        f"   üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {stats['messages_count']}\n"
                        f"   üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['users_count']}\n"
                    )
                    
                    # –¢–æ–ø-3 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    if stats['top_users']:
                        report_lines.append("   üèÜ –¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö:")
                        for i, user in enumerate(stats['top_users'][:3], 1):
                            username = user['username'] or f"User {user['user_id']}"
                            report_lines.append(f"     {i}. @{username} - {user['message_count']} —Å–æ–æ–±—â–µ–Ω–∏–π")
                        report_lines.append("")
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            report_lines.extend([
                f"üìà <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>",
                f"üí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}",
                f"üë• –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}",
                f"üì± –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –≥—Ä—É–ø–ø: {len(groups)}"
            ])
            
            return "\n".join(report_lines)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞"
    
    async def generate_weekly_report(self, end_date: datetime = None) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        if not end_date:
            end_date = datetime.now()
        
        start_date = end_date - timedelta(days=7)
        
        try:
            groups = await self.db.get_active_groups()
            report_lines = [
                f"üìä <b>–ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç</b>",
                f"üìÖ {start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}\n"
            ]
            
            total_messages = 0
            total_users_set = set()
            
            for group in groups:
                group_messages = 0
                group_users = set()
                
                # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
                current_date = start_date
                while current_date <= end_date:
                    stats = await self.db.get_daily_stats(group.group_id, current_date)
                    group_messages += stats['messages_count']
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    for user in stats['top_users']:
                        group_users.add(user['user_id'])
                        total_users_set.add(user['user_id'])
                    
                    current_date += timedelta(days=1)
                
                if group_messages > 0:
                    total_messages += group_messages
                    
                    report_lines.append(
                        f"üîπ <b>{group.title or '–ì—Ä—É–ø–ø–∞ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</b>\n"
                        f"   üí¨ –°–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –Ω–µ–¥–µ–ª—é: {group_messages}\n"
                        f"   üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(group_users)}\n"
                    )
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            report_lines.extend([
                f"üìà <b>–ò—Ç–æ–≥–æ –∑–∞ –Ω–µ–¥–µ–ª—é:</b>",
                f"üí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}",
                f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(total_users_set)}",
                f"üì± –ê–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø: {len([g for g in groups if total_messages > 0])}"
            ])
            
            return "\n".join(report_lines)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞"
    
    async def generate_monthly_report(self, end_date: datetime = None) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        if not end_date:
            end_date = datetime.now()
        
        start_date = end_date - timedelta(days=30)
        
        try:
            groups = await self.db.get_active_groups()
            report_lines = [
                f"üìä <b>–ú–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç</b>",
                f"üìÖ {start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}\n"
            ]
            
            total_messages = 0
            total_users_set = set()
            group_stats = []
            
            for group in groups:
                group_messages = 0
                group_users = set()
                daily_stats = []
                
                # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
                current_date = start_date
                while current_date <= end_date:
                    stats = await self.db.get_daily_stats(group.group_id, current_date)
                    group_messages += stats['messages_count']
                    daily_stats.append(stats['messages_count'])
                    
                    for user in stats['top_users']:
                        group_users.add(user['user_id'])
                        total_users_set.add(user['user_id'])
                    
                    current_date += timedelta(days=1)
                
                if group_messages > 0:
                    total_messages += group_messages
                    
                    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    avg_daily = group_messages / 30
                    max_daily = max(daily_stats) if daily_stats else 0
                    
                    group_stats.append({
                        'group': group,
                        'messages': group_messages,
                        'users': len(group_users),
                        'avg_daily': avg_daily,
                        'max_daily': max_daily
                    })
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—ã –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            group_stats.sort(key=lambda x: x['messages'], reverse=True)
            
            for stat in group_stats:
                report_lines.append(
                    f"üîπ <b>{stat['group'].title or '–ì—Ä—É–ø–ø–∞ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</b>\n"
                    f"   üí¨ –°–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –º–µ—Å—è—Ü: {stat['messages']}\n"
                    f"   üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stat['users']}\n"
                    f"   üìä –°—Ä–µ–¥–Ω–µ–µ –≤ –¥–µ–Ω—å: {stat['avg_daily']:.1f}\n"
                    f"   üî• –ú–∞–∫—Å–∏–º—É–º –≤ –¥–µ–Ω—å: {stat['max_daily']}\n"
                )
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            avg_daily_total = total_messages / 30 if total_messages > 0 else 0
            
            report_lines.extend([
                f"üìà <b>–ò—Ç–æ–≥–æ –∑–∞ –º–µ—Å—è—Ü:</b>",
                f"üí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}",
                f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(total_users_set)}",
                f"üìä –°—Ä–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å: {avg_daily_total:.1f}",
                f"üì± –ê–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø: {len(group_stats)}"
            ])
            
            return "\n".join(report_lines)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞"
