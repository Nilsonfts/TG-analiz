#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è healthcheck –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
"""
import http.server
import socketserver
import os
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class HealthCheckHandler(http.server.SimpleHTTPRequestHandler):
    def do_GET(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ GET –∑–∞–ø—Ä–æ—Å–æ–≤"""
        if self.path == "/health":
            # Healthcheck endpoint
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            self.wfile.write(b'{"status": "healthy", "service": "telegram-analytics-bot"}')
            
        elif self.path == "/":
            # –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            self.send_response(200)
            self.send_header('Content-type', 'text/html')
            self.end_headers()
            
            html = """
            <!DOCTYPE html>
            <html>
            <head>
                <title>Telegram Channel Analytics Bot</title>
                <meta charset="utf-8">
            </head>
            <body>
                <h1>üöÄ Telegram Channel Analytics Bot</h1>
                <p>‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç</p>
                <p>üìä –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∞–Ω–∞–ª–∏–∑—É –∫–∞–Ω–∞–ª–æ–≤</p>
                <p>ü§ñ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –≤ –Ω–æ—Ä–º–µ</p>
                <hr>
                <p><a href="/health">Health Check</a></p>
            </body>
            </html>
            """
            self.wfile.write(html.encode())
            
        else:
            # 404 –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π
            self.send_response(404)
            self.end_headers()
            self.wfile.write(b'Not Found')

def start_server():
    """–ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞"""
    port = int(os.environ.get("PORT", 8000))
    
    try:
        with socketserver.TCPServer(("", port), HealthCheckHandler) as httpd:
            logger.info(f"üåê HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
            logger.info(f"üìã Health check: http://localhost:{port}/health")
            httpd.serve_forever()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ HTTP —Å–µ—Ä–≤–µ—Ä–∞: {e}")

if __name__ == "__main__":
    start_server()
